
DSP_libv1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e208  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  0800e3a8  0800e3a8  0001e3a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e834  0800e834  000202e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e834  0800e834  0001e834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e83c  0800e83c  000202e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e83c  0800e83c  0001e83c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e840  0800e840  0001e840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  0800e844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e6c  200002e0  0800eb24  000202e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000214c  0800eb24  0002214c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146c8  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000371a  00000000  00000000  000349d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  000380f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec8  00000000  00000000  00039140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a519  00000000  00000000  0003a008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166c4  00000000  00000000  00054521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c6a5  00000000  00000000  0006abe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f728a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055dc  00000000  00000000  000f72dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e0 	.word	0x200002e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e390 	.word	0x0800e390

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002e4 	.word	0x200002e4
 80001dc:	0800e390 	.word	0x0800e390

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <FPU_enable>:
    };


/***********************************************Code************************************************/
void FPU_enable()
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

SCB->CPACR|=((3UL << 10*2) | (3UL << 11*2));
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <FPU_enable+0x20>)
 8000ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <FPU_enable+0x20>)
 8000ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88


}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <DSP_Filter_init>:



void DSP_Filter_init(M_Filt_t *filt)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]

	filt->filt_head = 0;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
	filt->output_f =0;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	filt->total = 0;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]

	memset(filt->buffer_t,0,sizeof(filt->buffer_t));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3308      	adds	r3, #8
 8000f04:	22c8      	movs	r2, #200	; 0xc8
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f00a f893 	bl	800b034 <memset>



}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <DSP_fir16>:



}

void DSP_fir16(M_Filt_t *filt ,int16_t Src){
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	807b      	strh	r3, [r7, #2]

	  static int16_t FIR_buf[length16];
	  unsigned int tempIndex;
	  unsigned int n;

	  FIR_buf[filt->filt_head] = Src;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4926      	ldr	r1, [pc, #152]	; (8000fc4 <DSP_fir16+0xac>)
 8000f2a:	887a      	ldrh	r2, [r7, #2]
 8000f2c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	  tempIndex =  filt->filt_head;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	60fb      	str	r3, [r7, #12]

	  filt->filt_head++ ;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	601a      	str	r2, [r3, #0]

	  filt->filt_head =  filt->filt_head % length16;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 0207 	and.w	r2, r3, #7
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	601a      	str	r2, [r3, #0]



	  filt->output_32 =0;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	  for(n =0; n<length16 ;n++){
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	e01d      	b.n	8000f96 <DSP_fir16+0x7e>

		  tempIndex > 0 ? (tempIndex--):(tempIndex = length16-1);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <DSP_fir16+0x50>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	e001      	b.n	8000f6c <DSP_fir16+0x54>
 8000f68:	2307      	movs	r3, #7
 8000f6a:	60fb      	str	r3, [r7, #12]

		  filt->output_32 += FIRCoeff16[n] * FIR_buf[tempIndex];
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000f72:	4915      	ldr	r1, [pc, #84]	; (8000fc8 <DSP_fir16+0xb0>)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	4911      	ldr	r1, [pc, #68]	; (8000fc4 <DSP_fir16+0xac>)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000f84:	fb00 f303 	mul.w	r3, r0, r3
 8000f88:	441a      	add	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	  for(n =0; n<length16 ;n++){
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	3301      	adds	r3, #1
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	2b07      	cmp	r3, #7
 8000f9a:	d9de      	bls.n	8000f5a <DSP_fir16+0x42>

	  }

	  filt->output_32 = filt->output_32/DCgain;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	da03      	bge.n	8000fae <DSP_fir16+0x96>
 8000fa6:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 8000faa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000fae:	145b      	asrs	r3, r3, #17
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	200002fc 	.word	0x200002fc
 8000fc8:	20000000 	.word	0x20000000

08000fcc <DSPstatistic_32>:
		   * !!! coefficient size have to be power of 2 for now.. !!!*/

}


void DSPstatistic_32(Statistic *st , int16_t sig, float32_t Sens_RMSnoise){
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	ed2d 8b02 	vpush	{d8}
 8000fd2:	b097      	sub	sp, #92	; 0x5c
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fde:	817b      	strh	r3, [r7, #10]

st->S_buffer[st->head] = (int16_t)sig;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	8979      	ldrh	r1, [r7, #10]
 8000fea:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

st->head++;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	601a      	str	r2, [r3, #0]

st->head = st->head % siglen;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0207 	and.w	r2, r3, #7
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	601a      	str	r2, [r3, #0]
float32_t k=1;
 8001004:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001008:	657b      	str	r3, [r7, #84]	; 0x54

if(st->head == 0)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	f040 80d6 	bne.w	80011c0 <DSPstatistic_32+0x1f4>


	int16_t *pDest;
	int16_t *pVarDest;
	int16_t *pSrc;
	int16_t Accumulator[2]={0,0};
 8001014:	2300      	movs	r3, #0
 8001016:	843b      	strh	r3, [r7, #32]
 8001018:	2300      	movs	r3, #0
 800101a:	847b      	strh	r3, [r7, #34]	; 0x22
	int32_t *pVarResult;

	 Accumulator[0]= st->S_buffer[0];
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001022:	843b      	strh	r3, [r7, #32]
	 Accumulator[1]= st->S_buffer[1];
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800102a:	847b      	strh	r3, [r7, #34]	; 0x22

     pDest = Accumulator;
 800102c:	f107 0320 	add.w	r3, r7, #32
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
     pSrc  = st->S_buffer;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3310      	adds	r3, #16
 8001036:	627b      	str	r3, [r7, #36]	; 0x24


	for(register unsigned int i = 0 ;i<siglen/2; i++){
 8001038:	2400      	movs	r4, #0
 800103a:	e017      	b.n	800106c <DSPstatistic_32+0xa0>


		//_ __UHADD16
		 *__SIMD32(pDest) = __UHADD16(*__SIMD32(pSrc)++,*__SIMD32(pDest) );
 800103c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001040:	6813      	ldr	r3, [r2, #0]
 8001042:	1d19      	adds	r1, r3, #4
 8001044:	6011      	str	r1, [r2, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	653a      	str	r2, [r7, #80]	; 0x50
 8001054:	64fb      	str	r3, [r7, #76]	; 0x4c

__STATIC_FORCEINLINE uint32_t __UHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("uhadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001058:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800105a:	fa93 f362 	uhadd16	r3, r3, r2
 800105e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8001060:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001062:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	601a      	str	r2, [r3, #0]
	for(register unsigned int i = 0 ;i<siglen/2; i++){
 800106a:	3401      	adds	r4, #1
 800106c:	2c03      	cmp	r4, #3
 800106e:	d9e5      	bls.n	800103c <DSPstatistic_32+0x70>
		 -----------------------------------------------------------
         result = half value for every  2 index
         */
	}

	st->mean = (float32_t)((Accumulator[0] +  Accumulator[1]) / 2.0f);
 8001070:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001074:	461a      	mov	r2, r3
 8001076:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800107a:	4413      	add	r3, r2
 800107c:	ee07 3a90 	vmov	s15, r3
 8001080:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001084:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001088:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	edc3 7a01 	vstr	s15, [r3, #4]

	Accumulator[0] = (int16_t)st->mean;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	edd3 7a01 	vldr	s15, [r3, #4]
 8001098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800109c:	ee17 3a90 	vmov	r3, s15
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	843b      	strh	r3, [r7, #32]
	Accumulator[1] = (int16_t)st->mean;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80010aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ae:	ee17 3a90 	vmov	r3, s15
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	847b      	strh	r3, [r7, #34]	; 0x22

	int16_t VarAccm[2]={0,0};
 80010b6:	2300      	movs	r3, #0
 80010b8:	833b      	strh	r3, [r7, #24]
 80010ba:	2300      	movs	r3, #0
 80010bc:	837b      	strh	r3, [r7, #26]
	int32_t ResultAcc[1]={0};
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
	pVarDest = VarAccm;
 80010c2:	f107 0318 	add.w	r3, r7, #24
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
	pVarResult = ResultAcc;
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	61fb      	str	r3, [r7, #28]
	pSrc  = st->S_buffer;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	3310      	adds	r3, #16
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24

	for(register unsigned int i = 0 ;i<siglen/2; i++){
 80010d4:	2400      	movs	r4, #0
 80010d6:	e02d      	b.n	8001134 <DSPstatistic_32+0x168>

	   	*__SIMD32(pVarDest) = __QSUB16(*__SIMD32(pSrc)++,*__SIMD32(pDest) );
 80010d8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80010dc:	6813      	ldr	r3, [r2, #0]
 80010de:	1d19      	adds	r1, r3, #4
 80010e0:	6011      	str	r1, [r2, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80010f0:	637b      	str	r3, [r7, #52]	; 0x34

__STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80010f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010f6:	fad3 f312 	qsub16	r3, r3, r2
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80010fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	601a      	str	r2, [r3, #0]
		*__SIMD32(pVarResult) += __SMUAD(*__SIMD32(pVarDest),*__SIMD32(pVarDest));
 8001106:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	647a      	str	r2, [r7, #68]	; 0x44
 800111a:	643b      	str	r3, [r7, #64]	; 0x40

__STATIC_FORCEINLINE uint32_t __SMUAD  (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800111c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800111e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001120:	fb23 f302 	smuad	r3, r3, r2
 8001124:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8001126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001128:	69fa      	ldr	r2, [r7, #28]
 800112a:	6812      	ldr	r2, [r2, #0]
 800112c:	441a      	add	r2, r3
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	601a      	str	r2, [r3, #0]
	for(register unsigned int i = 0 ;i<siglen/2; i++){
 8001132:	3401      	adds	r4, #1
 8001134:	2c03      	cmp	r4, #3
 8001136:	d9cf      	bls.n	80010d8 <DSPstatistic_32+0x10c>
          *
          *
          * */

	}
    st->variance =(float32_t)((float32_t)((ResultAcc[0]))/ siglen);
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	ee07 3a90 	vmov	s15, r3
 800113e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001142:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001146:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	edc3 7a02 	vstr	s15, [r3, #8]
    st->std = sqrtf(st->variance);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	edd3 7a02 	vldr	s15, [r3, #8]
 8001156:	eeb0 0a67 	vmov.f32	s0, s15
 800115a:	f00c fe85 	bl	800de68 <sqrtf>
 800115e:	eef0 7a40 	vmov.f32	s15, s0
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	edc3 7a03 	vstr	s15, [r3, #12]
    if(Sens_RMSnoise == 0.0){
 8001168:	edd7 7a01 	vldr	s15, [r7, #4]
 800116c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001174:	d105      	bne.n	8001182 <DSPstatistic_32+0x1b6>

       	k = 0;
 8001176:	f04f 0300 	mov.w	r3, #0
 800117a:	657b      	str	r3, [r7, #84]	; 0x54
       	Sens_RMSnoise=1.0;
 800117c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001180:	607b      	str	r3, [r7, #4]
       }
    st->SNR = k*10.0f * logf((st->mean*st->mean) / (Sens_RMSnoise*Sens_RMSnoise));
 8001182:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001186:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800118a:	ee27 8a87 	vmul.f32	s16, s15, s14
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	ed93 7a01 	vldr	s14, [r3, #4]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	edd3 7a01 	vldr	s15, [r3, #4]
 800119a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800119e:	edd7 7a01 	vldr	s15, [r7, #4]
 80011a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011aa:	eeb0 0a66 	vmov.f32	s0, s13
 80011ae:	f00c fe2d 	bl	800de0c <logf>
 80011b2:	eef0 7a40 	vmov.f32	s15, s0
 80011b6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	edc3 7a08 	vstr	s15, [r3, #32]



}

}
 80011c0:	bf00      	nop
 80011c2:	375c      	adds	r7, #92	; 0x5c
 80011c4:	46bd      	mov	sp, r7
 80011c6:	ecbd 8b02 	vpop	{d8}
 80011ca:	bd90      	pop	{r4, r7, pc}

080011cc <DSPstatistic_16>:

void DSPstatistic_16(Statistic *st , int16_t sig, float32_t Sens_RMSnoise){
 80011cc:	b590      	push	{r4, r7, lr}
 80011ce:	ed2d 8b02 	vpush	{d8}
 80011d2:	b097      	sub	sp, #92	; 0x5c
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	460b      	mov	r3, r1
 80011da:	ed87 0a01 	vstr	s0, [r7, #4]
 80011de:	817b      	strh	r3, [r7, #10]

st->S_buffer[st->head] = (int16_t)sig;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3208      	adds	r2, #8
 80011e8:	8979      	ldrh	r1, [r7, #10]
 80011ea:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

st->head++;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	601a      	str	r2, [r3, #0]

st->head = st->head % siglen;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0207 	and.w	r2, r3, #7
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	601a      	str	r2, [r3, #0]

int16_t k=1;
 8001204:	2301      	movs	r3, #1
 8001206:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
if(st->head == 0)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	f040 80da 	bne.w	80013c8 <DSPstatistic_16+0x1fc>


	int16_t *pDest;
	int16_t *pVarDest;
	int16_t *pSrc;
	int16_t Accumulator[2]={0,0};
 8001214:	2300      	movs	r3, #0
 8001216:	843b      	strh	r3, [r7, #32]
 8001218:	2300      	movs	r3, #0
 800121a:	847b      	strh	r3, [r7, #34]	; 0x22
	int32_t *pVarResult;
	 Accumulator[0]= st->S_buffer[0];
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001222:	843b      	strh	r3, [r7, #32]
	 Accumulator[1]= st->S_buffer[1];
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800122a:	847b      	strh	r3, [r7, #34]	; 0x22

     pDest =Accumulator;
 800122c:	f107 0320 	add.w	r3, r7, #32
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
     pSrc  = st->S_buffer;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	3310      	adds	r3, #16
 8001236:	627b      	str	r3, [r7, #36]	; 0x24


	for(register unsigned int i = 0 ;i<siglen/2; i++){
 8001238:	2400      	movs	r4, #0
 800123a:	e017      	b.n	800126c <DSPstatistic_16+0xa0>


		//__UHADD16
		 *__SIMD32(pDest) = __UHADD16(*__SIMD32(pSrc)++,*__SIMD32(pDest));
 800123c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001240:	6813      	ldr	r3, [r2, #0]
 8001242:	1d19      	adds	r1, r3, #4
 8001244:	6011      	str	r1, [r2, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	653a      	str	r2, [r7, #80]	; 0x50
 8001254:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("uhadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001258:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800125a:	fa93 f362 	uhadd16	r3, r3, r2
 800125e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8001260:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	601a      	str	r2, [r3, #0]
	for(register unsigned int i = 0 ;i<siglen/2; i++){
 800126a:	3401      	adds	r4, #1
 800126c:	2c03      	cmp	r4, #3
 800126e:	d9e5      	bls.n	800123c <DSPstatistic_16+0x70>
		 -----------------------------------------------------------
         result = half value for every 2 index
         */
	}

	st->mean = (float32_t)((Accumulator[0] +  Accumulator[1]) / 2.0f);
 8001270:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001274:	461a      	mov	r2, r3
 8001276:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800127a:	4413      	add	r3, r2
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001284:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001288:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	edc3 7a01 	vstr	s15, [r3, #4]

	Accumulator[0] = (int16_t)st->mean;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	edd3 7a01 	vldr	s15, [r3, #4]
 8001298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800129c:	ee17 3a90 	vmov	r3, s15
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	843b      	strh	r3, [r7, #32]
	Accumulator[1] = (int16_t)st->mean;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ae:	ee17 3a90 	vmov	r3, s15
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	847b      	strh	r3, [r7, #34]	; 0x22

	int16_t VarAccm[2]={0,0};
 80012b6:	2300      	movs	r3, #0
 80012b8:	833b      	strh	r3, [r7, #24]
 80012ba:	2300      	movs	r3, #0
 80012bc:	837b      	strh	r3, [r7, #26]
	int32_t ResultAcc[1]={0};
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
	pVarDest = VarAccm;
 80012c2:	f107 0318 	add.w	r3, r7, #24
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
	pVarResult = ResultAcc;
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	61fb      	str	r3, [r7, #28]
	pSrc  = st->S_buffer;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	3310      	adds	r3, #16
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24

	for(register unsigned int i = 0 ;i<siglen/2; i++){
 80012d4:	2400      	movs	r4, #0
 80012d6:	e02d      	b.n	8001334 <DSPstatistic_16+0x168>

	   	*__SIMD32(pVarDest) = __QSUB16(*__SIMD32(pSrc)++,*__SIMD32(pDest) );
 80012d8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80012dc:	6813      	ldr	r3, [r2, #0]
 80012de:	1d19      	adds	r1, r3, #4
 80012e0:	6011      	str	r1, [r2, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80012f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012f6:	fad3 f312 	qsub16	r3, r3, r2
 80012fa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80012fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	601a      	str	r2, [r3, #0]
		*__SIMD32(pVarResult) += __SMUAD(*__SIMD32(pVarDest),*__SIMD32(pVarDest));
 8001306:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	647a      	str	r2, [r7, #68]	; 0x44
 800131a:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800131c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800131e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001320:	fb23 f302 	smuad	r3, r3, r2
 8001324:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8001326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001328:	69fa      	ldr	r2, [r7, #28]
 800132a:	6812      	ldr	r2, [r2, #0]
 800132c:	441a      	add	r2, r3
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	601a      	str	r2, [r3, #0]
	for(register unsigned int i = 0 ;i<siglen/2; i++){
 8001332:	3401      	adds	r4, #1
 8001334:	2c03      	cmp	r4, #3
 8001336:	d9cf      	bls.n	80012d8 <DSPstatistic_16+0x10c>
          *
          *
          * */

	}
    st->variance =(float32_t)((float32_t)((ResultAcc[0]))/ siglen);
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001342:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001346:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	edc3 7a02 	vstr	s15, [r3, #8]
    st->std = sqrtf(st->variance);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	edd3 7a02 	vldr	s15, [r3, #8]
 8001356:	eeb0 0a67 	vmov.f32	s0, s15
 800135a:	f00c fd85 	bl	800de68 <sqrtf>
 800135e:	eef0 7a40 	vmov.f32	s15, s0
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	edc3 7a03 	vstr	s15, [r3, #12]
    if(Sens_RMSnoise == 0.0){
 8001368:	edd7 7a01 	vldr	s15, [r7, #4]
 800136c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001374:	d105      	bne.n	8001382 <DSPstatistic_16+0x1b6>

    	k = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    	Sens_RMSnoise=1;
 800137c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001380:	607b      	str	r3, [r7, #4]
    }
    st->SNR = k*10.0f * logf((st->mean*st->mean) / (Sens_RMSnoise*Sens_RMSnoise));
 8001382:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8001386:	ee07 3a90 	vmov	s15, r3
 800138a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800138e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001392:	ee27 8a87 	vmul.f32	s16, s15, s14
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	ed93 7a01 	vldr	s14, [r3, #4]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	edd3 7a01 	vldr	s15, [r3, #4]
 80013a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013b2:	eeb0 0a66 	vmov.f32	s0, s13
 80013b6:	f00c fd29 	bl	800de0c <logf>
 80013ba:	eef0 7a40 	vmov.f32	s15, s0
 80013be:	ee68 7a27 	vmul.f32	s15, s16, s15
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	edc3 7a08 	vstr	s15, [r3, #32]



}

}
 80013c8:	bf00      	nop
 80013ca:	375c      	adds	r7, #92	; 0x5c
 80013cc:	46bd      	mov	sp, r7
 80013ce:	ecbd 8b02 	vpop	{d8}
 80013d2:	bd90      	pop	{r4, r7, pc}

080013d4 <Init_QMCL5883>:

float offset_radians = 0.0f;
Filt_t filt[3];


Dev_Status Init_QMCL5883(I2C_HandleTypeDef*i2chandle, QMC5883L * dev , Mode_Config Mode ,ODR Rate,Scale scale,OSR Oversamp){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af04      	add	r7, sp, #16
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	4611      	mov	r1, r2
 80013e0:	461a      	mov	r2, r3
 80013e2:	460b      	mov	r3, r1
 80013e4:	71fb      	strb	r3, [r7, #7]
 80013e6:	4613      	mov	r3, r2
 80013e8:	71bb      	strb	r3, [r7, #6]

    for(unsigned int i =0 ;i<3; i++){
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	e00c      	b.n	800140a <Init_QMCL5883+0x36>


    Filter_init(&filt[i]);
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4a3c      	ldr	r2, [pc, #240]	; (80014ec <Init_QMCL5883+0x118>)
 80013fc:	4413      	add	r3, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 fa18 	bl	8001834 <Filter_init>
    for(unsigned int i =0 ;i<3; i++){
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	3301      	adds	r3, #1
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d9ef      	bls.n	80013f0 <Init_QMCL5883+0x1c>


    }

	dev->i2cx_handle = i2chandle;
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	601a      	str	r2, [r3, #0]

	uint8_t config_data = 0x00 ;
 8001416:	2300      	movs	r3, #0
 8001418:	74fb      	strb	r3, [r7, #19]

	config_data |= ( Mode|Rate |scale |Oversamp );
 800141a:	79fa      	ldrb	r2, [r7, #7]
 800141c:	79bb      	ldrb	r3, [r7, #6]
 800141e:	4313      	orrs	r3, r2
 8001420:	b2da      	uxtb	r2, r3
 8001422:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001426:	4313      	orrs	r3, r2
 8001428:	b2da      	uxtb	r2, r3
 800142a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800142e:	4313      	orrs	r3, r2
 8001430:	b2da      	uxtb	r2, r3
 8001432:	7cfb      	ldrb	r3, [r7, #19]
 8001434:	4313      	orrs	r3, r2
 8001436:	b2db      	uxtb	r3, r3
 8001438:	74fb      	strb	r3, [r7, #19]

	uint8_t CR2_data  = 0x40;
 800143a:	2340      	movs	r3, #64	; 0x40
 800143c:	74bb      	strb	r3, [r7, #18]

	uint8_t Set_reset = 0x01;
 800143e:	2301      	movs	r3, #1
 8001440:	747b      	strb	r3, [r7, #17]

	uint8_t tempRx ;


	while(!(HAL_I2C_Mem_Write(dev->i2cx_handle, R_Device_address, R_Set_Reset, SIZE_OF_ADDRES, &Set_reset, SIZE_OF_DATA, TIMEOUT)==HAL_OK));
 8001442:	bf00      	nop
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	2364      	movs	r3, #100	; 0x64
 800144a:	9302      	str	r3, [sp, #8]
 800144c:	2301      	movs	r3, #1
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	f107 0311 	add.w	r3, r7, #17
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	2301      	movs	r3, #1
 8001458:	220b      	movs	r2, #11
 800145a:	211a      	movs	r1, #26
 800145c:	f001 f9ce 	bl	80027fc <HAL_I2C_Mem_Write>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1ee      	bne.n	8001444 <Init_QMCL5883+0x70>
	while(!(HAL_I2C_Mem_Write(dev->i2cx_handle, R_Device_address, R_Contorl_1, SIZE_OF_ADDRES, &config_data,SIZE_OF_DATA, TIMEOUT)==HAL_OK));
 8001466:	bf00      	nop
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	2364      	movs	r3, #100	; 0x64
 800146e:	9302      	str	r3, [sp, #8]
 8001470:	2301      	movs	r3, #1
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	f107 0313 	add.w	r3, r7, #19
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2301      	movs	r3, #1
 800147c:	2209      	movs	r2, #9
 800147e:	211a      	movs	r1, #26
 8001480:	f001 f9bc 	bl	80027fc <HAL_I2C_Mem_Write>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1ee      	bne.n	8001468 <Init_QMCL5883+0x94>
	while(!(HAL_I2C_Mem_Write(dev->i2cx_handle, R_Device_address, R_Contorl_2, SIZE_OF_ADDRES, &CR2_data, SIZE_OF_DATA , TIMEOUT)==HAL_OK));
 800148a:	bf00      	nop
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	6818      	ldr	r0, [r3, #0]
 8001490:	2364      	movs	r3, #100	; 0x64
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	2301      	movs	r3, #1
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	f107 0312 	add.w	r3, r7, #18
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2301      	movs	r3, #1
 80014a0:	220a      	movs	r2, #10
 80014a2:	211a      	movs	r1, #26
 80014a4:	f001 f9aa 	bl	80027fc <HAL_I2C_Mem_Write>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1ee      	bne.n	800148c <Init_QMCL5883+0xb8>


	HAL_Delay(10);
 80014ae:	200a      	movs	r0, #10
 80014b0:	f000 fd76 	bl	8001fa0 <HAL_Delay>

    while(!(HAL_I2C_Mem_Read(dev->i2cx_handle, R_Device_address,R_Status, SIZE_OF_ADDRES, &tempRx, SIZE_OF_DATA, TIMEOUT)==HAL_OK));
 80014b4:	bf00      	nop
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	6818      	ldr	r0, [r3, #0]
 80014ba:	2364      	movs	r3, #100	; 0x64
 80014bc:	9302      	str	r3, [sp, #8]
 80014be:	2301      	movs	r3, #1
 80014c0:	9301      	str	r3, [sp, #4]
 80014c2:	f107 0310 	add.w	r3, r7, #16
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2301      	movs	r3, #1
 80014ca:	2206      	movs	r2, #6
 80014cc:	211a      	movs	r1, #26
 80014ce:	f001 fa8f 	bl	80029f0 <HAL_I2C_Mem_Read>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1ee      	bne.n	80014b6 <Init_QMCL5883+0xe2>

return Status_handler(tempRx);
 80014d8:	7c3b      	ldrb	r3, [r7, #16]
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f878 	bl	80015d0 <Status_handler>
 80014e0:	4603      	mov	r3, r0

}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000310 	.word	0x20000310

080014f0 <QMC5883L_Start>:


Dev_Status QMC5883L_Start(QMC5883L *dev)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af04      	add	r7, sp, #16
 80014f6:	6078      	str	r0, [r7, #4]
	uint8_t tempRx;
	HAL_StatusTypeDef status;


	tempRx = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(dev->i2cx_handle, R_Device_address,R_Status, SIZE_OF_ADDRES, &tempRx, SIZE_OF_DATA, TIMEOUT);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6818      	ldr	r0, [r3, #0]
 8001500:	2364      	movs	r3, #100	; 0x64
 8001502:	9302      	str	r3, [sp, #8]
 8001504:	2301      	movs	r3, #1
 8001506:	9301      	str	r3, [sp, #4]
 8001508:	f107 030e 	add.w	r3, r7, #14
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2301      	movs	r3, #1
 8001510:	2206      	movs	r2, #6
 8001512:	211a      	movs	r1, #26
 8001514:	f001 fa6c 	bl	80029f0 <HAL_I2C_Mem_Read>
 8001518:	4603      	mov	r3, r0
 800151a:	73fb      	strb	r3, [r7, #15]

	if((tempRx & Data_Ready)== 1 && (status == HAL_OK)){
 800151c:	7bbb      	ldrb	r3, [r7, #14]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d01b      	beq.n	800155e <QMC5883L_Start+0x6e>
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d118      	bne.n	800155e <QMC5883L_Start+0x6e>
    dev->RDY_flag = 1;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	HAL_I2C_Mem_Read_IT(dev->i2cx_handle, R_Device_address, R_Data_LSB_X, SIZE_OF_ADDRES,  dev->rx_buffer, 6);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3310      	adds	r3, #16
 800153c:	2206      	movs	r2, #6
 800153e:	9201      	str	r2, [sp, #4]
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	2301      	movs	r3, #1
 8001544:	2200      	movs	r2, #0
 8001546:	211a      	movs	r1, #26
 8001548:	f001 fc78 	bl	8002e3c <HAL_I2C_Mem_Read_IT>

	}*/



	heading_calc(dev);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f893 	bl	8001678 <heading_calc>




	return Status_handler(tempRx);
 8001552:	7bbb      	ldrb	r3, [r7, #14]
 8001554:	4618      	mov	r0, r3
 8001556:	f000 f83b 	bl	80015d0 <Status_handler>
 800155a:	4603      	mov	r3, r0
 800155c:	e004      	b.n	8001568 <QMC5883L_Start+0x78>

	}

	return Status_handler(tempRx);
 800155e:	7bbb      	ldrb	r3, [r7, #14]
 8001560:	4618      	mov	r0, r3
 8001562:	f000 f835 	bl	80015d0 <Status_handler>
 8001566:	4603      	mov	r3, r0

}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <Int_Process_handler>:
void Int_Process_handler(QMC5883L*dev)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

      dev->QMCL_Axis_Raw[0] = (int16_t)( (dev->rx_buffer[1] << 8)| dev->rx_buffer[0] );
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	7c5b      	ldrb	r3, [r3, #17]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b21a      	sxth	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7c1b      	ldrb	r3, [r3, #16]
 8001584:	b21b      	sxth	r3, r3
 8001586:	4313      	orrs	r3, r2
 8001588:	b21a      	sxth	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	809a      	strh	r2, [r3, #4]
      dev->QMCL_Axis_Raw[1] = (int16_t)( (dev->rx_buffer[3] << 8)| dev->rx_buffer[2] );
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7cdb      	ldrb	r3, [r3, #19]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b21a      	sxth	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7c9b      	ldrb	r3, [r3, #18]
 800159a:	b21b      	sxth	r3, r3
 800159c:	4313      	orrs	r3, r2
 800159e:	b21a      	sxth	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	80da      	strh	r2, [r3, #6]
      dev->QMCL_Axis_Raw[2] = (int16_t)( (dev->rx_buffer[5] << 8)| dev->rx_buffer[4] );
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	7d5b      	ldrb	r3, [r3, #21]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7d1b      	ldrb	r3, [r3, #20]
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	4313      	orrs	r3, r2
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	811a      	strh	r2, [r3, #8]

     // dev->QMCL_Axis_clb[i] = dev->scale[i]* (dev->QMCL_Axis_Raw[i] - dev->bias[i]);


     // }
      dev->RDY_flag = 0;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <Status_handler>:
Dev_Status Status_handler(uint8_t data ){
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]

    switch(data){
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b09      	cmp	r3, #9
 80015de:	d82b      	bhi.n	8001638 <Status_handler+0x68>
 80015e0:	a201      	add	r2, pc, #4	; (adr r2, 80015e8 <Status_handler+0x18>)
 80015e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e6:	bf00      	nop
 80015e8:	0800162d 	.word	0x0800162d
 80015ec:	08001611 	.word	0x08001611
 80015f0:	08001615 	.word	0x08001615
 80015f4:	08001619 	.word	0x08001619
 80015f8:	0800161d 	.word	0x0800161d
 80015fc:	08001621 	.word	0x08001621
 8001600:	08001625 	.word	0x08001625
 8001604:	08001629 	.word	0x08001629
 8001608:	08001631 	.word	0x08001631
 800160c:	08001635 	.word	0x08001635

    case Data_Ready:
    	return Data_Ready;
 8001610:	2301      	movs	r3, #1
 8001612:	e012      	b.n	800163a <Status_handler+0x6a>
    	break;
    case Data_Overflow:
        	return Data_Overflow;
 8001614:	2302      	movs	r3, #2
 8001616:	e010      	b.n	800163a <Status_handler+0x6a>
        	break;
    case Overflof_and_Skipped:
        	return Overflof_and_Skipped;
 8001618:	2303      	movs	r3, #3
 800161a:	e00e      	b.n	800163a <Status_handler+0x6a>
        	break;
    case Data_Skipped:
        	return Data_Skipped;
 800161c:	2304      	movs	r3, #4
 800161e:	e00c      	b.n	800163a <Status_handler+0x6a>
        	break;
    case Ready_and_Skipped:
        	return Ready_and_Skipped;
 8001620:	2305      	movs	r3, #5
 8001622:	e00a      	b.n	800163a <Status_handler+0x6a>
        	break;
    case Overflow_and_Skipped:
           	return Overflow_and_Skipped;
 8001624:	2306      	movs	r3, #6
 8001626:	e008      	b.n	800163a <Status_handler+0x6a>
           	break;
    case All_StatusSet:
           	return All_StatusSet;
 8001628:	2307      	movs	r3, #7
 800162a:	e006      	b.n	800163a <Status_handler+0x6a>
           	break;
    case Error_noneValid:
               	return Error_noneValid;
 800162c:	2300      	movs	r3, #0
 800162e:	e004      	b.n	800163a <Status_handler+0x6a>
               	break;
    case sFlase:
           	return sFlase;
 8001630:	2308      	movs	r3, #8
 8001632:	e002      	b.n	800163a <Status_handler+0x6a>
           	break;
    case sTrue:
              	return sTrue;
 8001634:	2309      	movs	r3, #9
 8001636:	e000      	b.n	800163a <Status_handler+0x6a>
              	break;
    default:
    	return Error_noneValid ;
 8001638:	2300      	movs	r3, #0

    }


}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop

08001648 <HAL_I2C_MemRxCpltCallback>:


void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]


	if(hi2c->Instance ==dev.i2cx_handle->Instance){
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d106      	bne.n	800166c <HAL_I2C_MemRxCpltCallback+0x24>

		Int_Process_handler(&dev);
 800165e:	4805      	ldr	r0, [pc, #20]	; (8001674 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8001660:	f7ff ff86 	bl	8001570 <Int_Process_handler>

		dev.RDY_flag = 0;
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <HAL_I2C_MemRxCpltCallback+0x2c>)
 8001666:	2200      	movs	r2, #0
 8001668:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200003a0 	.word	0x200003a0

08001678 <heading_calc>:

}


void heading_calc(QMC5883L*dev)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	   dev->heading = atan2f((float)dev->QMCL_Axis_Raw[1] ,(float)dev->QMCL_Axis_Raw[0] ) ;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001686:	ee07 3a90 	vmov	s15, r3
 800168a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001694:	ee07 3a10 	vmov	s14, r3
 8001698:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800169c:	eef0 0a47 	vmov.f32	s1, s14
 80016a0:	eeb0 0a67 	vmov.f32	s0, s15
 80016a4:	f00c fbb0 	bl	800de08 <atan2f>
 80016a8:	eef0 7a40 	vmov.f32	s15, s0
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	edc3 7a07 	vstr	s15, [r3, #28]


	   dev->heading += offset_radians;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	ed93 7a07 	vldr	s14, [r3, #28]
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <heading_calc+0x90>)
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	edc3 7a07 	vstr	s15, [r3, #28]
	   dev->heading  = dev->heading * RAD_2_DEG ;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80016ce:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800170c <heading_calc+0x94>
 80016d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	edc3 7a07 	vstr	s15, [r3, #28]

	   if (dev->heading>0){
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	edd3 7a07 	vldr	s15, [r3, #28]
 80016e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ea:	dc09      	bgt.n	8001700 <heading_calc+0x88>
	   	  }

	   	  else
	   	  {

	   		  dev->heading += 360.0f;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80016f2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001710 <heading_calc+0x98>
 80016f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	edc3 7a07 	vstr	s15, [r3, #28]
	   	  }


}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	2000030c 	.word	0x2000030c
 800170c:	42652ee1 	.word	0x42652ee1
 8001710:	43b40000 	.word	0x43b40000

08001714 <calibrating_init>:



void calibrating_init(QMC5883L *dev,int16_t xmax,int16_t xmin,int16_t ymax ,int16_t ymin,int16_t zmax ,int16_t zmin)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	4608      	mov	r0, r1
 800171e:	4611      	mov	r1, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4603      	mov	r3, r0
 8001724:	817b      	strh	r3, [r7, #10]
 8001726:	460b      	mov	r3, r1
 8001728:	813b      	strh	r3, [r7, #8]
 800172a:	4613      	mov	r3, r2
 800172c:	80fb      	strh	r3, [r7, #6]

	 int16_t average_delta [3];
	 float average_delta_Sum;

	 dev->bias[0] = (xmax + xmin) / 2;
 800172e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001732:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001736:	4413      	add	r3, r2
 8001738:	0fda      	lsrs	r2, r3, #31
 800173a:	4413      	add	r3, r2
 800173c:	105b      	asrs	r3, r3, #1
 800173e:	b21a      	sxth	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	815a      	strh	r2, [r3, #10]
	 dev->bias[1] = (ymax + ymin) / 2;
 8001744:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001748:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800174c:	4413      	add	r3, r2
 800174e:	0fda      	lsrs	r2, r3, #31
 8001750:	4413      	add	r3, r2
 8001752:	105b      	asrs	r3, r3, #1
 8001754:	b21a      	sxth	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	819a      	strh	r2, [r3, #12]
	 dev->bias[2] = (zmax + zmin) / 2;
 800175a:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800175e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001762:	4413      	add	r3, r2
 8001764:	0fda      	lsrs	r2, r3, #31
 8001766:	4413      	add	r3, r2
 8001768:	105b      	asrs	r3, r3, #1
 800176a:	b21a      	sxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	81da      	strh	r2, [r3, #14]

	 average_delta[0] = (xmax - xmin) / 2;
 8001770:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001774:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	0fda      	lsrs	r2, r3, #31
 800177c:	4413      	add	r3, r2
 800177e:	105b      	asrs	r3, r3, #1
 8001780:	b21b      	sxth	r3, r3
 8001782:	82bb      	strh	r3, [r7, #20]
	 average_delta[1] = (ymax - ymin) / 2;
 8001784:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001788:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	0fda      	lsrs	r2, r3, #31
 8001790:	4413      	add	r3, r2
 8001792:	105b      	asrs	r3, r3, #1
 8001794:	b21b      	sxth	r3, r3
 8001796:	82fb      	strh	r3, [r7, #22]
	 average_delta[2] = (zmax - zmin) / 2;
 8001798:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800179c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	0fda      	lsrs	r2, r3, #31
 80017a4:	4413      	add	r3, r2
 80017a6:	105b      	asrs	r3, r3, #1
 80017a8:	b21b      	sxth	r3, r3
 80017aa:	833b      	strh	r3, [r7, #24]

	 average_delta_Sum =(float)(( average_delta[0] + average_delta[1] + average_delta[2])/3);
 80017ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017b0:	461a      	mov	r2, r3
 80017b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017b6:	4413      	add	r3, r2
 80017b8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80017bc:	4413      	add	r3, r2
 80017be:	4a1c      	ldr	r2, [pc, #112]	; (8001830 <calibrating_init+0x11c>)
 80017c0:	fb82 1203 	smull	r1, r2, r2, r3
 80017c4:	17db      	asrs	r3, r3, #31
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	ee07 3a90 	vmov	s15, r3
 80017cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d0:	edc7 7a07 	vstr	s15, [r7, #28]

	 dev->scale[0] = (float)(average_delta_Sum /average_delta[0]);
 80017d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017d8:	ee07 3a90 	vmov	s15, r3
 80017dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80017e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	edc3 7a08 	vstr	s15, [r3, #32]
	 dev->scale[1] = (float)(average_delta_Sum /average_delta[1]);
 80017ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80017fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	 dev->scale[2] = (float)(average_delta_Sum /average_delta[2]);
 8001808:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001814:	edd7 6a07 	vldr	s13, [r7, #28]
 8001818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28


}
 8001822:	bf00      	nop
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	55555556 	.word	0x55555556

08001834 <Filter_init>:


void Filter_init(Filt_t *filt)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

	filt->filt_head = 0;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
	filt->filt_tail = 0;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	605a      	str	r2, [r3, #4]
	filt->output =0;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
	filt->total = 0;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	811a      	strh	r2, [r3, #8]

	memset(filt->buffer_t,0,sizeof(filt->buffer_t));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	330a      	adds	r3, #10
 800185a:	2206      	movs	r2, #6
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f009 fbe8 	bl	800b034 <memset>



}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800186c:	b5b0      	push	{r4, r5, r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001872:	f000 fb23 	bl	8001ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001876:	f000 f885 	bl	8001984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800187a:	f000 f919 	bl	8001ab0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800187e:	f000 f8e9 	bl	8001a54 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001882:	f008 fe9d 	bl	800a5c0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  FPU_enable();
 8001886:	f7ff fb19 	bl	8000ebc <FPU_enable>
  calibrating_init(&dev,1012,-1538,1383,-1133,1342,-1037);
 800188a:	4b31      	ldr	r3, [pc, #196]	; (8001950 <main+0xe4>)
 800188c:	9302      	str	r3, [sp, #8]
 800188e:	f240 533e 	movw	r3, #1342	; 0x53e
 8001892:	9301      	str	r3, [sp, #4]
 8001894:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <main+0xe8>)
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	f240 5367 	movw	r3, #1383	; 0x567
 800189c:	4a2e      	ldr	r2, [pc, #184]	; (8001958 <main+0xec>)
 800189e:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 80018a2:	482e      	ldr	r0, [pc, #184]	; (800195c <main+0xf0>)
 80018a4:	f7ff ff36 	bl	8001714 <calibrating_init>
  Init_QMCL5883(&hi2c1, &dev, Continuous, ODR_200Hz, SCALE_2G, OSR_64);
 80018a8:	23c0      	movs	r3, #192	; 0xc0
 80018aa:	9301      	str	r3, [sp, #4]
 80018ac:	2300      	movs	r3, #0
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	230c      	movs	r3, #12
 80018b2:	2201      	movs	r2, #1
 80018b4:	4929      	ldr	r1, [pc, #164]	; (800195c <main+0xf0>)
 80018b6:	482a      	ldr	r0, [pc, #168]	; (8001960 <main+0xf4>)
 80018b8:	f7ff fd8c 	bl	80013d4 <Init_QMCL5883>
  DSP_Filter_init(&filt_m);
 80018bc:	4829      	ldr	r0, [pc, #164]	; (8001964 <main+0xf8>)
 80018be:	f7ff fb0f 	bl	8000ee0 <DSP_Filter_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GetTick() - time1 >= interval ){
 80018c2:	f000 fb61 	bl	8001f88 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	4b27      	ldr	r3, [pc, #156]	; (8001968 <main+0xfc>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	1ad2      	subs	r2, r2, r3
 80018ce:	4b27      	ldr	r3, [pc, #156]	; (800196c <main+0x100>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d3f5      	bcc.n	80018c2 <main+0x56>
		     QMC5883L_Start(&dev);
 80018d6:	4821      	ldr	r0, [pc, #132]	; (800195c <main+0xf0>)
 80018d8:	f7ff fe0a 	bl	80014f0 <QMC5883L_Start>
	        //DSP_firfloat(&filt_m,dev.heading);
	        DSP_fir16(&filt_m, dev.QMCL_Axis_Raw[1]);
 80018dc:	4b1f      	ldr	r3, [pc, #124]	; (800195c <main+0xf0>)
 80018de:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018e2:	4619      	mov	r1, r3
 80018e4:	481f      	ldr	r0, [pc, #124]	; (8001964 <main+0xf8>)
 80018e6:	f7ff fb17 	bl	8000f18 <DSP_fir16>
	        DSPstatistic_32(&st,filt_m.output_32,0.05);
 80018ea:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <main+0xf8>)
 80018ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018f0:	b21b      	sxth	r3, r3
 80018f2:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001970 <main+0x104>
 80018f6:	4619      	mov	r1, r3
 80018f8:	481e      	ldr	r0, [pc, #120]	; (8001974 <main+0x108>)
 80018fa:	f7ff fb67 	bl	8000fcc <DSPstatistic_32>
	        DSPstatistic_16(&st1, dev.QMCL_Axis_Raw[1],0.05);
 80018fe:	4b17      	ldr	r3, [pc, #92]	; (800195c <main+0xf0>)
 8001900:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001904:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001970 <main+0x104>
 8001908:	4619      	mov	r1, r3
 800190a:	481b      	ldr	r0, [pc, #108]	; (8001978 <main+0x10c>)
 800190c:	f7ff fc5e 	bl	80011cc <DSPstatistic_16>
		     //DSPkalman(&kalman, dev.heading);
		     //out=fir(dev.QMCL_Axis_Raw[1]);
		     //DSP_fastfir16(&filt_m, dev.QMCL_Axis_Raw[1]);
		     sprintf(sendbuf,"FIR_std:%f,Rawval_std:%f\n",st.std ,st1.std);
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <main+0x108>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fe1f 	bl	8000558 <__aeabi_f2d>
 800191a:	4604      	mov	r4, r0
 800191c:	460d      	mov	r5, r1
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <main+0x10c>)
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fe18 	bl	8000558 <__aeabi_f2d>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	e9cd 2300 	strd	r2, r3, [sp]
 8001930:	4622      	mov	r2, r4
 8001932:	462b      	mov	r3, r5
 8001934:	4911      	ldr	r1, [pc, #68]	; (800197c <main+0x110>)
 8001936:	4812      	ldr	r0, [pc, #72]	; (8001980 <main+0x114>)
 8001938:	f009 ffee 	bl	800b918 <siprintf>
		     CDC_Transmit_FS((uint8_t*)sendbuf, 50);
 800193c:	2132      	movs	r1, #50	; 0x32
 800193e:	4810      	ldr	r0, [pc, #64]	; (8001980 <main+0x114>)
 8001940:	f008 fefc 	bl	800a73c <CDC_Transmit_FS>
		     time1 = HAL_GetTick();
 8001944:	f000 fb20 	bl	8001f88 <HAL_GetTick>
 8001948:	4603      	mov	r3, r0
 800194a:	4a07      	ldr	r2, [pc, #28]	; (8001968 <main+0xfc>)
 800194c:	6013      	str	r3, [r2, #0]
	  if(HAL_GetTick() - time1 >= interval ){
 800194e:	e7b8      	b.n	80018c2 <main+0x56>
 8001950:	fffffbf3 	.word	0xfffffbf3
 8001954:	fffffb93 	.word	0xfffffb93
 8001958:	fffff9fe 	.word	0xfffff9fe
 800195c:	200003a0 	.word	0x200003a0
 8001960:	2000034c 	.word	0x2000034c
 8001964:	200003d4 	.word	0x200003d4
 8001968:	200003d0 	.word	0x200003d0
 800196c:	20000010 	.word	0x20000010
 8001970:	3d4ccccd 	.word	0x3d4ccccd
 8001974:	200004ac 	.word	0x200004ac
 8001978:	200004d0 	.word	0x200004d0
 800197c:	0800e3a8 	.word	0x0800e3a8
 8001980:	200004f4 	.word	0x200004f4

08001984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b094      	sub	sp, #80	; 0x50
 8001988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198a:	f107 0320 	add.w	r3, r7, #32
 800198e:	2230      	movs	r2, #48	; 0x30
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f009 fb4e 	bl	800b034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <SystemClock_Config+0xc8>)
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	4a26      	ldr	r2, [pc, #152]	; (8001a4c <SystemClock_Config+0xc8>)
 80019b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b6:	6413      	str	r3, [r2, #64]	; 0x40
 80019b8:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <SystemClock_Config+0xc8>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <SystemClock_Config+0xcc>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a20      	ldr	r2, [pc, #128]	; (8001a50 <SystemClock_Config+0xcc>)
 80019ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <SystemClock_Config+0xcc>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019e0:	2301      	movs	r3, #1
 80019e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ea:	2302      	movs	r3, #2
 80019ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80019f4:	2319      	movs	r3, #25
 80019f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80019f8:	23c0      	movs	r3, #192	; 0xc0
 80019fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019fc:	2302      	movs	r3, #2
 80019fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a00:	2304      	movs	r3, #4
 8001a02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a04:	f107 0320 	add.w	r3, r7, #32
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f004 fd7f 	bl	800650c <HAL_RCC_OscConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a14:	f000 f882 	bl	8001b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a18:	230f      	movs	r3, #15
 8001a1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	2103      	movs	r1, #3
 8001a34:	4618      	mov	r0, r3
 8001a36:	f004 ffe1 	bl	80069fc <HAL_RCC_ClockConfig>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a40:	f000 f86c 	bl	8001b1c <Error_Handler>
  }
}
 8001a44:	bf00      	nop
 8001a46:	3750      	adds	r7, #80	; 0x50
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40007000 	.word	0x40007000

08001a54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a5a:	4a13      	ldr	r2, [pc, #76]	; (8001aa8 <MX_I2C1_Init+0x54>)
 8001a5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a60:	4a12      	ldr	r2, [pc, #72]	; (8001aac <MX_I2C1_Init+0x58>)
 8001a62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a90:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <MX_I2C1_Init+0x50>)
 8001a92:	f000 fd6f 	bl	8002574 <HAL_I2C_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a9c:	f000 f83e 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2000034c 	.word	0x2000034c
 8001aa8:	40005400 	.word	0x40005400
 8001aac:	000186a0 	.word	0x000186a0

08001ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <MX_GPIO_Init+0x68>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a16      	ldr	r2, [pc, #88]	; (8001b18 <MX_GPIO_Init+0x68>)
 8001ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <MX_GPIO_Init+0x68>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <MX_GPIO_Init+0x68>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a0f      	ldr	r2, [pc, #60]	; (8001b18 <MX_GPIO_Init+0x68>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <MX_GPIO_Init+0x68>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <MX_GPIO_Init+0x68>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a08      	ldr	r2, [pc, #32]	; (8001b18 <MX_GPIO_Init+0x68>)
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <MX_GPIO_Init+0x68>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]

}
 8001b0a:	bf00      	nop
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800

08001b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b20:	b672      	cpsid	i
}
 8001b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <Error_Handler+0x8>
	...

08001b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <HAL_MspInit+0x4c>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	4a0f      	ldr	r2, [pc, #60]	; (8001b74 <HAL_MspInit+0x4c>)
 8001b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <HAL_MspInit+0x4c>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	603b      	str	r3, [r7, #0]
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_MspInit+0x4c>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	4a08      	ldr	r2, [pc, #32]	; (8001b74 <HAL_MspInit+0x4c>)
 8001b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b58:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_MspInit+0x4c>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800

08001b78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a21      	ldr	r2, [pc, #132]	; (8001c1c <HAL_I2C_MspInit+0xa4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d13b      	bne.n	8001c12 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <HAL_I2C_MspInit+0xa8>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a1f      	ldr	r2, [pc, #124]	; (8001c20 <HAL_I2C_MspInit+0xa8>)
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <HAL_I2C_MspInit+0xa8>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bb6:	23c0      	movs	r3, #192	; 0xc0
 8001bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bba:	2312      	movs	r3, #18
 8001bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4814      	ldr	r0, [pc, #80]	; (8001c24 <HAL_I2C_MspInit+0xac>)
 8001bd2:	f000 fb4b 	bl	800226c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <HAL_I2C_MspInit+0xa8>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	4a10      	ldr	r2, [pc, #64]	; (8001c20 <HAL_I2C_MspInit+0xa8>)
 8001be0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001be4:	6413      	str	r3, [r2, #64]	; 0x40
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <HAL_I2C_MspInit+0xa8>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	201f      	movs	r0, #31
 8001bf8:	f000 fad1 	bl	800219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001bfc:	201f      	movs	r0, #31
 8001bfe:	f000 faea 	bl	80021d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2100      	movs	r1, #0
 8001c06:	2020      	movs	r0, #32
 8001c08:	f000 fac9 	bl	800219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001c0c:	2020      	movs	r0, #32
 8001c0e:	f000 fae2 	bl	80021d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c12:	bf00      	nop
 8001c14:	3728      	adds	r7, #40	; 0x28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40005400 	.word	0x40005400
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40020400 	.word	0x40020400

08001c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <NMI_Handler+0x4>

08001c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c32:	e7fe      	b.n	8001c32 <HardFault_Handler+0x4>

08001c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c38:	e7fe      	b.n	8001c38 <MemManage_Handler+0x4>

08001c3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c3e:	e7fe      	b.n	8001c3e <BusFault_Handler+0x4>

08001c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <UsageFault_Handler+0x4>

08001c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c74:	f000 f974 	bl	8001f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <I2C1_EV_IRQHandler+0x10>)
 8001c82:	f001 f999 	bl	8002fb8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000034c 	.word	0x2000034c

08001c90 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <I2C1_ER_IRQHandler+0x10>)
 8001c96:	f001 fb00 	bl	800329a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2000034c 	.word	0x2000034c

08001ca4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <OTG_FS_IRQHandler+0x10>)
 8001caa:	f003 fb01 	bl	80052b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20001a10 	.word	0x20001a10

08001cb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
	return 1;
 8001cbc:	2301      	movs	r3, #1
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <_kill>:

int _kill(int pid, int sig)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cd2:	f009 f985 	bl	800afe0 <__errno>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2216      	movs	r2, #22
 8001cda:	601a      	str	r2, [r3, #0]
	return -1;
 8001cdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <_exit>:

void _exit (int status)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff ffe7 	bl	8001cc8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cfa:	e7fe      	b.n	8001cfa <_exit+0x12>

08001cfc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	e00a      	b.n	8001d24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d0e:	f3af 8000 	nop.w
 8001d12:	4601      	mov	r1, r0
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	60ba      	str	r2, [r7, #8]
 8001d1a:	b2ca      	uxtb	r2, r1
 8001d1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	3301      	adds	r3, #1
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	dbf0      	blt.n	8001d0e <_read+0x12>
	}

return len;
 8001d2c:	687b      	ldr	r3, [r7, #4]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	60f8      	str	r0, [r7, #12]
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	e009      	b.n	8001d5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	60ba      	str	r2, [r7, #8]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	dbf1      	blt.n	8001d48 <_write+0x12>
	}
	return len;
 8001d64:	687b      	ldr	r3, [r7, #4]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <_close>:

int _close(int file)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
	return -1;
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d96:	605a      	str	r2, [r3, #4]
	return 0;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <_isatty>:

int _isatty(int file)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
	return 1;
 8001dae:	2301      	movs	r3, #1
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
	return 0;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de0:	4a14      	ldr	r2, [pc, #80]	; (8001e34 <_sbrk+0x5c>)
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <_sbrk+0x60>)
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dec:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <_sbrk+0x64>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d102      	bne.n	8001dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <_sbrk+0x64>)
 8001df6:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <_sbrk+0x68>)
 8001df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <_sbrk+0x64>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d207      	bcs.n	8001e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e08:	f009 f8ea 	bl	800afe0 <__errno>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	220c      	movs	r2, #12
 8001e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295
 8001e16:	e009      	b.n	8001e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <_sbrk+0x64>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1e:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <_sbrk+0x64>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	4a05      	ldr	r2, [pc, #20]	; (8001e3c <_sbrk+0x64>)
 8001e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20020000 	.word	0x20020000
 8001e38:	00000400 	.word	0x00000400
 8001e3c:	20000528 	.word	0x20000528
 8001e40:	20002150 	.word	0x20002150

08001e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <SystemInit+0x20>)
 8001e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4e:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <SystemInit+0x20>)
 8001e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e6c:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e6e:	490e      	ldr	r1, [pc, #56]	; (8001ea8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e70:	4a0e      	ldr	r2, [pc, #56]	; (8001eac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e74:	e002      	b.n	8001e7c <LoopCopyDataInit>

08001e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7a:	3304      	adds	r3, #4

08001e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e80:	d3f9      	bcc.n	8001e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e82:	4a0b      	ldr	r2, [pc, #44]	; (8001eb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e84:	4c0b      	ldr	r4, [pc, #44]	; (8001eb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e88:	e001      	b.n	8001e8e <LoopFillZerobss>

08001e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e8c:	3204      	adds	r2, #4

08001e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e90:	d3fb      	bcc.n	8001e8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e92:	f7ff ffd7 	bl	8001e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e96:	f009 f8a9 	bl	800afec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e9a:	f7ff fce7 	bl	800186c <main>
  bx  lr    
 8001e9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ea0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea8:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8001eac:	0800e844 	.word	0x0800e844
  ldr r2, =_sbss
 8001eb0:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8001eb4:	2000214c 	.word	0x2000214c

08001eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb8:	e7fe      	b.n	8001eb8 <ADC_IRQHandler>
	...

08001ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <HAL_Init+0x40>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	; (8001efc <HAL_Init+0x40>)
 8001ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_Init+0x40>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <HAL_Init+0x40>)
 8001ed2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <HAL_Init+0x40>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a07      	ldr	r2, [pc, #28]	; (8001efc <HAL_Init+0x40>)
 8001ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee4:	2003      	movs	r0, #3
 8001ee6:	f000 f94f 	bl	8002188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eea:	200f      	movs	r0, #15
 8001eec:	f000 f808 	bl	8001f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef0:	f7ff fe1a 	bl	8001b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023c00 	.word	0x40023c00

08001f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_InitTick+0x54>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_InitTick+0x58>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 f967 	bl	80021f2 <HAL_SYSTICK_Config>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e00e      	b.n	8001f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b0f      	cmp	r3, #15
 8001f32:	d80a      	bhi.n	8001f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f34:	2200      	movs	r2, #0
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	f000 f92f 	bl	800219e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f40:	4a06      	ldr	r2, [pc, #24]	; (8001f5c <HAL_InitTick+0x5c>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e000      	b.n	8001f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000014 	.word	0x20000014
 8001f58:	2000001c 	.word	0x2000001c
 8001f5c:	20000018 	.word	0x20000018

08001f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_IncTick+0x20>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_IncTick+0x24>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <HAL_IncTick+0x24>)
 8001f72:	6013      	str	r3, [r2, #0]
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	2000001c 	.word	0x2000001c
 8001f84:	2000052c 	.word	0x2000052c

08001f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <HAL_GetTick+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	2000052c 	.word	0x2000052c

08001fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa8:	f7ff ffee 	bl	8001f88 <HAL_GetTick>
 8001fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb8:	d005      	beq.n	8001fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fba:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <HAL_Delay+0x44>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fc6:	bf00      	nop
 8001fc8:	f7ff ffde 	bl	8001f88 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d8f7      	bhi.n	8001fc8 <HAL_Delay+0x28>
  {
  }
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	2000001c 	.word	0x2000001c

08001fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002004:	4013      	ands	r3, r2
 8002006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201a:	4a04      	ldr	r2, [pc, #16]	; (800202c <__NVIC_SetPriorityGrouping+0x44>)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	60d3      	str	r3, [r2, #12]
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <__NVIC_GetPriorityGrouping+0x18>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	f003 0307 	and.w	r3, r3, #7
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	2b00      	cmp	r3, #0
 800205c:	db0b      	blt.n	8002076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	f003 021f 	and.w	r2, r3, #31
 8002064:	4907      	ldr	r1, [pc, #28]	; (8002084 <__NVIC_EnableIRQ+0x38>)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	2001      	movs	r0, #1
 800206e:	fa00 f202 	lsl.w	r2, r0, r2
 8002072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000e100 	.word	0xe000e100

08002088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	6039      	str	r1, [r7, #0]
 8002092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	2b00      	cmp	r3, #0
 800209a:	db0a      	blt.n	80020b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	490c      	ldr	r1, [pc, #48]	; (80020d4 <__NVIC_SetPriority+0x4c>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	0112      	lsls	r2, r2, #4
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	440b      	add	r3, r1
 80020ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b0:	e00a      	b.n	80020c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4908      	ldr	r1, [pc, #32]	; (80020d8 <__NVIC_SetPriority+0x50>)
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	3b04      	subs	r3, #4
 80020c0:	0112      	lsls	r2, r2, #4
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	440b      	add	r3, r1
 80020c6:	761a      	strb	r2, [r3, #24]
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000e100 	.word	0xe000e100
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b089      	sub	sp, #36	; 0x24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f1c3 0307 	rsb	r3, r3, #7
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	bf28      	it	cs
 80020fa:	2304      	movcs	r3, #4
 80020fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3304      	adds	r3, #4
 8002102:	2b06      	cmp	r3, #6
 8002104:	d902      	bls.n	800210c <NVIC_EncodePriority+0x30>
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3b03      	subs	r3, #3
 800210a:	e000      	b.n	800210e <NVIC_EncodePriority+0x32>
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	f04f 32ff 	mov.w	r2, #4294967295
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43da      	mvns	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	401a      	ands	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002124:	f04f 31ff 	mov.w	r1, #4294967295
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	43d9      	mvns	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	4313      	orrs	r3, r2
         );
}
 8002136:	4618      	mov	r0, r3
 8002138:	3724      	adds	r7, #36	; 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3b01      	subs	r3, #1
 8002150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002154:	d301      	bcc.n	800215a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002156:	2301      	movs	r3, #1
 8002158:	e00f      	b.n	800217a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215a:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <SysTick_Config+0x40>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002162:	210f      	movs	r1, #15
 8002164:	f04f 30ff 	mov.w	r0, #4294967295
 8002168:	f7ff ff8e 	bl	8002088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <SysTick_Config+0x40>)
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002172:	4b04      	ldr	r3, [pc, #16]	; (8002184 <SysTick_Config+0x40>)
 8002174:	2207      	movs	r2, #7
 8002176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	e000e010 	.word	0xe000e010

08002188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ff29 	bl	8001fe8 <__NVIC_SetPriorityGrouping>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b0:	f7ff ff3e 	bl	8002030 <__NVIC_GetPriorityGrouping>
 80021b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	6978      	ldr	r0, [r7, #20]
 80021bc:	f7ff ff8e 	bl	80020dc <NVIC_EncodePriority>
 80021c0:	4602      	mov	r2, r0
 80021c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff5d 	bl	8002088 <__NVIC_SetPriority>
}
 80021ce:	bf00      	nop
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff31 	bl	800204c <__NVIC_EnableIRQ>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff ffa2 	bl	8002144 <SysTick_Config>
 8002200:	4603      	mov	r3, r0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d004      	beq.n	8002228 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2280      	movs	r2, #128	; 0x80
 8002222:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e00c      	b.n	8002242 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2205      	movs	r2, #5
 800222c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800225c:	b2db      	uxtb	r3, r3
}
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	; 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	e159      	b.n	800253c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002288:	2201      	movs	r2, #1
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4013      	ands	r3, r2
 800229a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	f040 8148 	bne.w	8002536 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d005      	beq.n	80022be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d130      	bne.n	8002320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022f4:	2201      	movs	r2, #1
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	091b      	lsrs	r3, r3, #4
 800230a:	f003 0201 	and.w	r2, r3, #1
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b03      	cmp	r3, #3
 800232a:	d017      	beq.n	800235c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	2203      	movs	r2, #3
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d123      	bne.n	80023b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	08da      	lsrs	r2, r3, #3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3208      	adds	r2, #8
 8002370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	220f      	movs	r2, #15
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	08da      	lsrs	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3208      	adds	r2, #8
 80023aa:	69b9      	ldr	r1, [r7, #24]
 80023ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	2203      	movs	r2, #3
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0203 	and.w	r2, r3, #3
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80a2 	beq.w	8002536 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	4b57      	ldr	r3, [pc, #348]	; (8002554 <HAL_GPIO_Init+0x2e8>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	4a56      	ldr	r2, [pc, #344]	; (8002554 <HAL_GPIO_Init+0x2e8>)
 80023fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002400:	6453      	str	r3, [r2, #68]	; 0x44
 8002402:	4b54      	ldr	r3, [pc, #336]	; (8002554 <HAL_GPIO_Init+0x2e8>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800240e:	4a52      	ldr	r2, [pc, #328]	; (8002558 <HAL_GPIO_Init+0x2ec>)
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	089b      	lsrs	r3, r3, #2
 8002414:	3302      	adds	r3, #2
 8002416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	220f      	movs	r2, #15
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a49      	ldr	r2, [pc, #292]	; (800255c <HAL_GPIO_Init+0x2f0>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d019      	beq.n	800246e <HAL_GPIO_Init+0x202>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a48      	ldr	r2, [pc, #288]	; (8002560 <HAL_GPIO_Init+0x2f4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d013      	beq.n	800246a <HAL_GPIO_Init+0x1fe>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a47      	ldr	r2, [pc, #284]	; (8002564 <HAL_GPIO_Init+0x2f8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d00d      	beq.n	8002466 <HAL_GPIO_Init+0x1fa>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a46      	ldr	r2, [pc, #280]	; (8002568 <HAL_GPIO_Init+0x2fc>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d007      	beq.n	8002462 <HAL_GPIO_Init+0x1f6>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a45      	ldr	r2, [pc, #276]	; (800256c <HAL_GPIO_Init+0x300>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d101      	bne.n	800245e <HAL_GPIO_Init+0x1f2>
 800245a:	2304      	movs	r3, #4
 800245c:	e008      	b.n	8002470 <HAL_GPIO_Init+0x204>
 800245e:	2307      	movs	r3, #7
 8002460:	e006      	b.n	8002470 <HAL_GPIO_Init+0x204>
 8002462:	2303      	movs	r3, #3
 8002464:	e004      	b.n	8002470 <HAL_GPIO_Init+0x204>
 8002466:	2302      	movs	r3, #2
 8002468:	e002      	b.n	8002470 <HAL_GPIO_Init+0x204>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <HAL_GPIO_Init+0x204>
 800246e:	2300      	movs	r3, #0
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	f002 0203 	and.w	r2, r2, #3
 8002476:	0092      	lsls	r2, r2, #2
 8002478:	4093      	lsls	r3, r2
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002480:	4935      	ldr	r1, [pc, #212]	; (8002558 <HAL_GPIO_Init+0x2ec>)
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	089b      	lsrs	r3, r3, #2
 8002486:	3302      	adds	r3, #2
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800248e:	4b38      	ldr	r3, [pc, #224]	; (8002570 <HAL_GPIO_Init+0x304>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024b2:	4a2f      	ldr	r2, [pc, #188]	; (8002570 <HAL_GPIO_Init+0x304>)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b8:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <HAL_GPIO_Init+0x304>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024dc:	4a24      	ldr	r2, [pc, #144]	; (8002570 <HAL_GPIO_Init+0x304>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024e2:	4b23      	ldr	r3, [pc, #140]	; (8002570 <HAL_GPIO_Init+0x304>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002506:	4a1a      	ldr	r2, [pc, #104]	; (8002570 <HAL_GPIO_Init+0x304>)
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800250c:	4b18      	ldr	r3, [pc, #96]	; (8002570 <HAL_GPIO_Init+0x304>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002530:	4a0f      	ldr	r2, [pc, #60]	; (8002570 <HAL_GPIO_Init+0x304>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3301      	adds	r3, #1
 800253a:	61fb      	str	r3, [r7, #28]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	2b0f      	cmp	r3, #15
 8002540:	f67f aea2 	bls.w	8002288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3724      	adds	r7, #36	; 0x24
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800
 8002558:	40013800 	.word	0x40013800
 800255c:	40020000 	.word	0x40020000
 8002560:	40020400 	.word	0x40020400
 8002564:	40020800 	.word	0x40020800
 8002568:	40020c00 	.word	0x40020c00
 800256c:	40021000 	.word	0x40021000
 8002570:	40013c00 	.word	0x40013c00

08002574 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e12b      	b.n	80027de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d106      	bne.n	80025a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff faec 	bl	8001b78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2224      	movs	r2, #36	; 0x24
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0201 	bic.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025d8:	f004 fbc8 	bl	8006d6c <HAL_RCC_GetPCLK1Freq>
 80025dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4a81      	ldr	r2, [pc, #516]	; (80027e8 <HAL_I2C_Init+0x274>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d807      	bhi.n	80025f8 <HAL_I2C_Init+0x84>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4a80      	ldr	r2, [pc, #512]	; (80027ec <HAL_I2C_Init+0x278>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	bf94      	ite	ls
 80025f0:	2301      	movls	r3, #1
 80025f2:	2300      	movhi	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	e006      	b.n	8002606 <HAL_I2C_Init+0x92>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4a7d      	ldr	r2, [pc, #500]	; (80027f0 <HAL_I2C_Init+0x27c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	bf94      	ite	ls
 8002600:	2301      	movls	r3, #1
 8002602:	2300      	movhi	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0e7      	b.n	80027de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4a78      	ldr	r2, [pc, #480]	; (80027f4 <HAL_I2C_Init+0x280>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	0c9b      	lsrs	r3, r3, #18
 8002618:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	430a      	orrs	r2, r1
 800262c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	4a6a      	ldr	r2, [pc, #424]	; (80027e8 <HAL_I2C_Init+0x274>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d802      	bhi.n	8002648 <HAL_I2C_Init+0xd4>
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	3301      	adds	r3, #1
 8002646:	e009      	b.n	800265c <HAL_I2C_Init+0xe8>
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800264e:	fb02 f303 	mul.w	r3, r2, r3
 8002652:	4a69      	ldr	r2, [pc, #420]	; (80027f8 <HAL_I2C_Init+0x284>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	099b      	lsrs	r3, r3, #6
 800265a:	3301      	adds	r3, #1
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	430b      	orrs	r3, r1
 8002662:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800266e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	495c      	ldr	r1, [pc, #368]	; (80027e8 <HAL_I2C_Init+0x274>)
 8002678:	428b      	cmp	r3, r1
 800267a:	d819      	bhi.n	80026b0 <HAL_I2C_Init+0x13c>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1e59      	subs	r1, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	fbb1 f3f3 	udiv	r3, r1, r3
 800268a:	1c59      	adds	r1, r3, #1
 800268c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002690:	400b      	ands	r3, r1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_I2C_Init+0x138>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1e59      	subs	r1, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026a4:	3301      	adds	r3, #1
 80026a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026aa:	e051      	b.n	8002750 <HAL_I2C_Init+0x1dc>
 80026ac:	2304      	movs	r3, #4
 80026ae:	e04f      	b.n	8002750 <HAL_I2C_Init+0x1dc>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d111      	bne.n	80026dc <HAL_I2C_Init+0x168>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1e58      	subs	r0, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6859      	ldr	r1, [r3, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	440b      	add	r3, r1
 80026c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ca:	3301      	adds	r3, #1
 80026cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bf0c      	ite	eq
 80026d4:	2301      	moveq	r3, #1
 80026d6:	2300      	movne	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	e012      	b.n	8002702 <HAL_I2C_Init+0x18e>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1e58      	subs	r0, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6859      	ldr	r1, [r3, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	0099      	lsls	r1, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f2:	3301      	adds	r3, #1
 80026f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	bf0c      	ite	eq
 80026fc:	2301      	moveq	r3, #1
 80026fe:	2300      	movne	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_I2C_Init+0x196>
 8002706:	2301      	movs	r3, #1
 8002708:	e022      	b.n	8002750 <HAL_I2C_Init+0x1dc>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10e      	bne.n	8002730 <HAL_I2C_Init+0x1bc>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1e58      	subs	r0, r3, #1
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6859      	ldr	r1, [r3, #4]
 800271a:	460b      	mov	r3, r1
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	440b      	add	r3, r1
 8002720:	fbb0 f3f3 	udiv	r3, r0, r3
 8002724:	3301      	adds	r3, #1
 8002726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800272a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800272e:	e00f      	b.n	8002750 <HAL_I2C_Init+0x1dc>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1e58      	subs	r0, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	0099      	lsls	r1, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	fbb0 f3f3 	udiv	r3, r0, r3
 8002746:	3301      	adds	r3, #1
 8002748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800274c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	6809      	ldr	r1, [r1, #0]
 8002754:	4313      	orrs	r3, r2
 8002756:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69da      	ldr	r2, [r3, #28]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800277e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6911      	ldr	r1, [r2, #16]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68d2      	ldr	r2, [r2, #12]
 800278a:	4311      	orrs	r1, r2
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	430b      	orrs	r3, r1
 8002792:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	000186a0 	.word	0x000186a0
 80027ec:	001e847f 	.word	0x001e847f
 80027f0:	003d08ff 	.word	0x003d08ff
 80027f4:	431bde83 	.word	0x431bde83
 80027f8:	10624dd3 	.word	0x10624dd3

080027fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af02      	add	r7, sp, #8
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	4608      	mov	r0, r1
 8002806:	4611      	mov	r1, r2
 8002808:	461a      	mov	r2, r3
 800280a:	4603      	mov	r3, r0
 800280c:	817b      	strh	r3, [r7, #10]
 800280e:	460b      	mov	r3, r1
 8002810:	813b      	strh	r3, [r7, #8]
 8002812:	4613      	mov	r3, r2
 8002814:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002816:	f7ff fbb7 	bl	8001f88 <HAL_GetTick>
 800281a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b20      	cmp	r3, #32
 8002826:	f040 80d9 	bne.w	80029dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	2319      	movs	r3, #25
 8002830:	2201      	movs	r2, #1
 8002832:	496d      	ldr	r1, [pc, #436]	; (80029e8 <HAL_I2C_Mem_Write+0x1ec>)
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f002 f9c1 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002840:	2302      	movs	r3, #2
 8002842:	e0cc      	b.n	80029de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_I2C_Mem_Write+0x56>
 800284e:	2302      	movs	r3, #2
 8002850:	e0c5      	b.n	80029de <HAL_I2C_Mem_Write+0x1e2>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b01      	cmp	r3, #1
 8002866:	d007      	beq.n	8002878 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002886:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2221      	movs	r2, #33	; 0x21
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2240      	movs	r2, #64	; 0x40
 8002894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a3a      	ldr	r2, [r7, #32]
 80028a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4a4d      	ldr	r2, [pc, #308]	; (80029ec <HAL_I2C_Mem_Write+0x1f0>)
 80028b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028ba:	88f8      	ldrh	r0, [r7, #6]
 80028bc:	893a      	ldrh	r2, [r7, #8]
 80028be:	8979      	ldrh	r1, [r7, #10]
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	9301      	str	r3, [sp, #4]
 80028c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	4603      	mov	r3, r0
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f001 ff50 	bl	8004770 <I2C_RequestMemoryWrite>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d052      	beq.n	800297c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e081      	b.n	80029de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f002 fa42 	bl	8004d68 <I2C_WaitOnTXEFlagUntilTimeout>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00d      	beq.n	8002906 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d107      	bne.n	8002902 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002900:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e06b      	b.n	80029de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	781a      	ldrb	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b04      	cmp	r3, #4
 8002942:	d11b      	bne.n	800297c <HAL_I2C_Mem_Write+0x180>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002948:	2b00      	cmp	r3, #0
 800294a:	d017      	beq.n	800297c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	781a      	ldrb	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002972:	b29b      	uxth	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1aa      	bne.n	80028da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f002 fa2e 	bl	8004dea <I2C_WaitOnBTFFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00d      	beq.n	80029b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	2b04      	cmp	r3, #4
 800299a:	d107      	bne.n	80029ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e016      	b.n	80029de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	e000      	b.n	80029de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029dc:	2302      	movs	r3, #2
  }
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	00100002 	.word	0x00100002
 80029ec:	ffff0000 	.word	0xffff0000

080029f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08c      	sub	sp, #48	; 0x30
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	4608      	mov	r0, r1
 80029fa:	4611      	mov	r1, r2
 80029fc:	461a      	mov	r2, r3
 80029fe:	4603      	mov	r3, r0
 8002a00:	817b      	strh	r3, [r7, #10]
 8002a02:	460b      	mov	r3, r1
 8002a04:	813b      	strh	r3, [r7, #8]
 8002a06:	4613      	mov	r3, r2
 8002a08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a0a:	f7ff fabd 	bl	8001f88 <HAL_GetTick>
 8002a0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	f040 8208 	bne.w	8002e2e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	2319      	movs	r3, #25
 8002a24:	2201      	movs	r2, #1
 8002a26:	497b      	ldr	r1, [pc, #492]	; (8002c14 <HAL_I2C_Mem_Read+0x224>)
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f002 f8c7 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
 8002a36:	e1fb      	b.n	8002e30 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_I2C_Mem_Read+0x56>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e1f4      	b.n	8002e30 <HAL_I2C_Mem_Read+0x440>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d007      	beq.n	8002a6c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2222      	movs	r2, #34	; 0x22
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2240      	movs	r2, #64	; 0x40
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4a5b      	ldr	r2, [pc, #364]	; (8002c18 <HAL_I2C_Mem_Read+0x228>)
 8002aac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aae:	88f8      	ldrh	r0, [r7, #6]
 8002ab0:	893a      	ldrh	r2, [r7, #8]
 8002ab2:	8979      	ldrh	r1, [r7, #10]
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	9301      	str	r3, [sp, #4]
 8002ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	4603      	mov	r3, r0
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f001 feec 	bl	800489c <I2C_RequestMemoryRead>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e1b0      	b.n	8002e30 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d113      	bne.n	8002afe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	623b      	str	r3, [r7, #32]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	623b      	str	r3, [r7, #32]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	623b      	str	r3, [r7, #32]
 8002aea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	e184      	b.n	8002e08 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d11b      	bne.n	8002b3e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	61fb      	str	r3, [r7, #28]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	61fb      	str	r3, [r7, #28]
 8002b2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	e164      	b.n	8002e08 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d11b      	bne.n	8002b7e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b54:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	61bb      	str	r3, [r7, #24]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	61bb      	str	r3, [r7, #24]
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	e144      	b.n	8002e08 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b94:	e138      	b.n	8002e08 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	f200 80f1 	bhi.w	8002d82 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d123      	bne.n	8002bf0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002baa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f002 f98f 	bl	8004ed0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e139      	b.n	8002e30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bee:	e10b      	b.n	8002e08 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d14e      	bne.n	8002c96 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfe:	2200      	movs	r2, #0
 8002c00:	4906      	ldr	r1, [pc, #24]	; (8002c1c <HAL_I2C_Mem_Read+0x22c>)
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f001 ffda 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d008      	beq.n	8002c20 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e10e      	b.n	8002e30 <HAL_I2C_Mem_Read+0x440>
 8002c12:	bf00      	nop
 8002c14:	00100002 	.word	0x00100002
 8002c18:	ffff0000 	.word	0xffff0000
 8002c1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c94:	e0b8      	b.n	8002e08 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	4966      	ldr	r1, [pc, #408]	; (8002e38 <HAL_I2C_Mem_Read+0x448>)
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f001 ff8b 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0bf      	b.n	8002e30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	691a      	ldr	r2, [r3, #16]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	494f      	ldr	r1, [pc, #316]	; (8002e38 <HAL_I2C_Mem_Read+0x448>)
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f001 ff5d 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e091      	b.n	8002e30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691a      	ldr	r2, [r3, #16]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d80:	e042      	b.n	8002e08 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f002 f8a2 	bl	8004ed0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e04c      	b.n	8002e30 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d118      	bne.n	8002e08 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	1c5a      	adds	r2, r3, #1
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f47f aec2 	bne.w	8002b96 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e000      	b.n	8002e30 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002e2e:	2302      	movs	r3, #2
  }
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3728      	adds	r7, #40	; 0x28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	00010004 	.word	0x00010004

08002e3c <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	4608      	mov	r0, r1
 8002e46:	4611      	mov	r1, r2
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	817b      	strh	r3, [r7, #10]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	813b      	strh	r3, [r7, #8]
 8002e52:	4613      	mov	r3, r2
 8002e54:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	f040 809a 	bne.w	8002f9c <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e68:	4b50      	ldr	r3, [pc, #320]	; (8002fac <HAL_I2C_Mem_Read_IT+0x170>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	08db      	lsrs	r3, r3, #3
 8002e6e:	4a50      	ldr	r2, [pc, #320]	; (8002fb0 <HAL_I2C_Mem_Read_IT+0x174>)
 8002e70:	fba2 2303 	umull	r2, r3, r2, r3
 8002e74:	0a1a      	lsrs	r2, r3, #8
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009a      	lsls	r2, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d116      	bne.n	8002ebc <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f043 0220 	orr.w	r2, r3, #32
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e070      	b.n	8002f9e <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d0db      	beq.n	8002e82 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_I2C_Mem_Read_IT+0x9c>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e062      	b.n	8002f9e <HAL_I2C_Mem_Read_IT+0x162>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d007      	beq.n	8002efe <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0201 	orr.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f0c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2222      	movs	r2, #34	; 0x22
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2240      	movs	r2, #64	; 0x40
 8002f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a3a      	ldr	r2, [r7, #32]
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4a1d      	ldr	r2, [pc, #116]	; (8002fb4 <HAL_I2C_Mem_Read_IT+0x178>)
 8002f3e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002f40:	897a      	ldrh	r2, [r7, #10]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8002f46:	893a      	ldrh	r2, [r7, #8]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002f4c:	88fa      	ldrh	r2, [r7, #6]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f66:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f76:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d007      	beq.n	8002f98 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002f96:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	e000      	b.n	8002f9e <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8002f9c:	2302      	movs	r3, #2
  }
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	371c      	adds	r7, #28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	20000014 	.word	0x20000014
 8002fb0:	14f8b589 	.word	0x14f8b589
 8002fb4:	ffff0000 	.word	0xffff0000

08002fb8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fd8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	d003      	beq.n	8002ff0 <HAL_I2C_EV_IRQHandler+0x38>
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	2b40      	cmp	r3, #64	; 0x40
 8002fec:	f040 80c1 	bne.w	8003172 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10d      	bne.n	8003026 <HAL_I2C_EV_IRQHandler+0x6e>
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003010:	d003      	beq.n	800301a <HAL_I2C_EV_IRQHandler+0x62>
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003018:	d101      	bne.n	800301e <HAL_I2C_EV_IRQHandler+0x66>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <HAL_I2C_EV_IRQHandler+0x68>
 800301e:	2300      	movs	r3, #0
 8003020:	2b01      	cmp	r3, #1
 8003022:	f000 8132 	beq.w	800328a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00c      	beq.n	800304a <HAL_I2C_EV_IRQHandler+0x92>
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	0a5b      	lsrs	r3, r3, #9
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d006      	beq.n	800304a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f001 ffcc 	bl	8004fda <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fd79 	bl	8003b3a <I2C_Master_SB>
 8003048:	e092      	b.n	8003170 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	08db      	lsrs	r3, r3, #3
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d009      	beq.n	800306a <HAL_I2C_EV_IRQHandler+0xb2>
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	0a5b      	lsrs	r3, r3, #9
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 fdef 	bl	8003c46 <I2C_Master_ADD10>
 8003068:	e082      	b.n	8003170 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	085b      	lsrs	r3, r3, #1
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <HAL_I2C_EV_IRQHandler+0xd2>
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	0a5b      	lsrs	r3, r3, #9
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fe09 	bl	8003c9a <I2C_Master_ADDR>
 8003088:	e072      	b.n	8003170 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	089b      	lsrs	r3, r3, #2
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d03b      	beq.n	800310e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030a4:	f000 80f3 	beq.w	800328e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	09db      	lsrs	r3, r3, #7
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00f      	beq.n	80030d4 <HAL_I2C_EV_IRQHandler+0x11c>
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	0a9b      	lsrs	r3, r3, #10
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d009      	beq.n	80030d4 <HAL_I2C_EV_IRQHandler+0x11c>
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	089b      	lsrs	r3, r3, #2
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d103      	bne.n	80030d4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f9e9 	bl	80034a4 <I2C_MasterTransmit_TXE>
 80030d2:	e04d      	b.n	8003170 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	089b      	lsrs	r3, r3, #2
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 80d6 	beq.w	800328e <HAL_I2C_EV_IRQHandler+0x2d6>
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	0a5b      	lsrs	r3, r3, #9
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 80cf 	beq.w	800328e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80030f0:	7bbb      	ldrb	r3, [r7, #14]
 80030f2:	2b21      	cmp	r3, #33	; 0x21
 80030f4:	d103      	bne.n	80030fe <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fa70 	bl	80035dc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030fc:	e0c7      	b.n	800328e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
 8003100:	2b40      	cmp	r3, #64	; 0x40
 8003102:	f040 80c4 	bne.w	800328e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fade 	bl	80036c8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800310c:	e0bf      	b.n	800328e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800311c:	f000 80b7 	beq.w	800328e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	099b      	lsrs	r3, r3, #6
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00f      	beq.n	800314c <HAL_I2C_EV_IRQHandler+0x194>
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	0a9b      	lsrs	r3, r3, #10
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d009      	beq.n	800314c <HAL_I2C_EV_IRQHandler+0x194>
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	089b      	lsrs	r3, r3, #2
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d103      	bne.n	800314c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fb53 	bl	80037f0 <I2C_MasterReceive_RXNE>
 800314a:	e011      	b.n	8003170 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	089b      	lsrs	r3, r3, #2
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 809a 	beq.w	800328e <HAL_I2C_EV_IRQHandler+0x2d6>
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	0a5b      	lsrs	r3, r3, #9
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 8093 	beq.w	800328e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 fbfc 	bl	8003966 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800316e:	e08e      	b.n	800328e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003170:	e08d      	b.n	800328e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	2b00      	cmp	r3, #0
 8003178:	d004      	beq.n	8003184 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	e007      	b.n	8003194 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	085b      	lsrs	r3, r3, #1
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d012      	beq.n	80031c6 <HAL_I2C_EV_IRQHandler+0x20e>
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	0a5b      	lsrs	r3, r3, #9
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00c      	beq.n	80031c6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80031bc:	69b9      	ldr	r1, [r7, #24]
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 ffba 	bl	8004138 <I2C_Slave_ADDR>
 80031c4:	e066      	b.n	8003294 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	091b      	lsrs	r3, r3, #4
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <HAL_I2C_EV_IRQHandler+0x22e>
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	0a5b      	lsrs	r3, r3, #9
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fff4 	bl	80041cc <I2C_Slave_STOPF>
 80031e4:	e056      	b.n	8003294 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031e6:	7bbb      	ldrb	r3, [r7, #14]
 80031e8:	2b21      	cmp	r3, #33	; 0x21
 80031ea:	d002      	beq.n	80031f2 <HAL_I2C_EV_IRQHandler+0x23a>
 80031ec:	7bbb      	ldrb	r3, [r7, #14]
 80031ee:	2b29      	cmp	r3, #41	; 0x29
 80031f0:	d125      	bne.n	800323e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	09db      	lsrs	r3, r3, #7
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00f      	beq.n	800321e <HAL_I2C_EV_IRQHandler+0x266>
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	0a9b      	lsrs	r3, r3, #10
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d009      	beq.n	800321e <HAL_I2C_EV_IRQHandler+0x266>
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	089b      	lsrs	r3, r3, #2
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d103      	bne.n	800321e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 fed0 	bl	8003fbc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800321c:	e039      	b.n	8003292 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d033      	beq.n	8003292 <HAL_I2C_EV_IRQHandler+0x2da>
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	0a5b      	lsrs	r3, r3, #9
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d02d      	beq.n	8003292 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 fefd 	bl	8004036 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800323c:	e029      	b.n	8003292 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	099b      	lsrs	r3, r3, #6
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00f      	beq.n	800326a <HAL_I2C_EV_IRQHandler+0x2b2>
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	0a9b      	lsrs	r3, r3, #10
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d009      	beq.n	800326a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	089b      	lsrs	r3, r3, #2
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 ff08 	bl	8004078 <I2C_SlaveReceive_RXNE>
 8003268:	e014      	b.n	8003294 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	089b      	lsrs	r3, r3, #2
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00e      	beq.n	8003294 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	0a5b      	lsrs	r3, r3, #9
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d008      	beq.n	8003294 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 ff36 	bl	80040f4 <I2C_SlaveReceive_BTF>
 8003288:	e004      	b.n	8003294 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800328a:	bf00      	nop
 800328c:	e002      	b.n	8003294 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800328e:	bf00      	nop
 8003290:	e000      	b.n	8003294 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003292:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003294:	3720      	adds	r7, #32
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b08a      	sub	sp, #40	; 0x28
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80032b2:	2300      	movs	r3, #0
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032bc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	0a1b      	lsrs	r3, r3, #8
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00e      	beq.n	80032e8 <HAL_I2C_ER_IRQHandler+0x4e>
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	0a1b      	lsrs	r3, r3, #8
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d008      	beq.n	80032e8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032e6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	0a5b      	lsrs	r3, r3, #9
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00e      	beq.n	8003312 <HAL_I2C_ER_IRQHandler+0x78>
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	f043 0302 	orr.w	r3, r3, #2
 8003306:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003310:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	0a9b      	lsrs	r3, r3, #10
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d03f      	beq.n	800339e <HAL_I2C_ER_IRQHandler+0x104>
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	0a1b      	lsrs	r3, r3, #8
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d039      	beq.n	800339e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800332a:	7efb      	ldrb	r3, [r7, #27]
 800332c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003332:	b29b      	uxth	r3, r3
 8003334:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003344:	7ebb      	ldrb	r3, [r7, #26]
 8003346:	2b20      	cmp	r3, #32
 8003348:	d112      	bne.n	8003370 <HAL_I2C_ER_IRQHandler+0xd6>
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10f      	bne.n	8003370 <HAL_I2C_ER_IRQHandler+0xd6>
 8003350:	7cfb      	ldrb	r3, [r7, #19]
 8003352:	2b21      	cmp	r3, #33	; 0x21
 8003354:	d008      	beq.n	8003368 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003356:	7cfb      	ldrb	r3, [r7, #19]
 8003358:	2b29      	cmp	r3, #41	; 0x29
 800335a:	d005      	beq.n	8003368 <HAL_I2C_ER_IRQHandler+0xce>
 800335c:	7cfb      	ldrb	r3, [r7, #19]
 800335e:	2b28      	cmp	r3, #40	; 0x28
 8003360:	d106      	bne.n	8003370 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2b21      	cmp	r3, #33	; 0x21
 8003366:	d103      	bne.n	8003370 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f001 f85f 	bl	800442c <I2C_Slave_AF>
 800336e:	e016      	b.n	800339e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003378:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	f043 0304 	orr.w	r3, r3, #4
 8003380:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003382:	7efb      	ldrb	r3, [r7, #27]
 8003384:	2b10      	cmp	r3, #16
 8003386:	d002      	beq.n	800338e <HAL_I2C_ER_IRQHandler+0xf4>
 8003388:	7efb      	ldrb	r3, [r7, #27]
 800338a:	2b40      	cmp	r3, #64	; 0x40
 800338c:	d107      	bne.n	800339e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800339c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	0adb      	lsrs	r3, r3, #11
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00e      	beq.n	80033c8 <HAL_I2C_ER_IRQHandler+0x12e>
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	0a1b      	lsrs	r3, r3, #8
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d008      	beq.n	80033c8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	f043 0308 	orr.w	r3, r3, #8
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80033c6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d008      	beq.n	80033e0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f001 f896 	bl	800450c <I2C_ITError>
  }
}
 80033e0:	bf00      	nop
 80033e2:	3728      	adds	r7, #40	; 0x28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	70fb      	strb	r3, [r7, #3]
 8003444:	4613      	mov	r3, r2
 8003446:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d150      	bne.n	800356c <I2C_MasterTransmit_TXE+0xc8>
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	2b21      	cmp	r3, #33	; 0x21
 80034ce:	d14d      	bne.n	800356c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d01d      	beq.n	8003512 <I2C_MasterTransmit_TXE+0x6e>
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d01a      	beq.n	8003512 <I2C_MasterTransmit_TXE+0x6e>
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034e2:	d016      	beq.n	8003512 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034f2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2211      	movs	r2, #17
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2220      	movs	r2, #32
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff ff6c 	bl	80033e8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003510:	e060      	b.n	80035d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003520:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003530:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b40      	cmp	r3, #64	; 0x40
 800354a:	d107      	bne.n	800355c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ff87 	bl	8003468 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800355a:	e03b      	b.n	80035d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ff3f 	bl	80033e8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800356a:	e033      	b.n	80035d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	2b21      	cmp	r3, #33	; 0x21
 8003570:	d005      	beq.n	800357e <I2C_MasterTransmit_TXE+0xda>
 8003572:	7bbb      	ldrb	r3, [r7, #14]
 8003574:	2b40      	cmp	r3, #64	; 0x40
 8003576:	d12d      	bne.n	80035d4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	2b22      	cmp	r3, #34	; 0x22
 800357c:	d12a      	bne.n	80035d4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d108      	bne.n	800359a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003596:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003598:	e01c      	b.n	80035d4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b40      	cmp	r3, #64	; 0x40
 80035a4:	d103      	bne.n	80035ae <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f88e 	bl	80036c8 <I2C_MemoryTransmit_TXE_BTF>
}
 80035ac:	e012      	b.n	80035d4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	781a      	ldrb	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035d2:	e7ff      	b.n	80035d4 <I2C_MasterTransmit_TXE+0x130>
 80035d4:	bf00      	nop
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b21      	cmp	r3, #33	; 0x21
 80035f4:	d164      	bne.n	80036c0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d012      	beq.n	8003626 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	781a      	ldrb	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003624:	e04c      	b.n	80036c0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2b08      	cmp	r3, #8
 800362a:	d01d      	beq.n	8003668 <I2C_MasterTransmit_BTF+0x8c>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b20      	cmp	r3, #32
 8003630:	d01a      	beq.n	8003668 <I2C_MasterTransmit_BTF+0x8c>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003638:	d016      	beq.n	8003668 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003648:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2211      	movs	r2, #17
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff fec1 	bl	80033e8 <HAL_I2C_MasterTxCpltCallback>
}
 8003666:	e02b      	b.n	80036c0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003676:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003686:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2220      	movs	r2, #32
 8003692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b40      	cmp	r3, #64	; 0x40
 80036a0:	d107      	bne.n	80036b2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff fedc 	bl	8003468 <HAL_I2C_MemTxCpltCallback>
}
 80036b0:	e006      	b.n	80036c0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff fe94 	bl	80033e8 <HAL_I2C_MasterTxCpltCallback>
}
 80036c0:	bf00      	nop
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d11d      	bne.n	800371c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d10b      	bne.n	8003700 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f8:	1c9a      	adds	r2, r3, #2
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80036fe:	e073      	b.n	80037e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003704:	b29b      	uxth	r3, r3
 8003706:	121b      	asrs	r3, r3, #8
 8003708:	b2da      	uxtb	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	651a      	str	r2, [r3, #80]	; 0x50
}
 800371a:	e065      	b.n	80037e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003720:	2b01      	cmp	r3, #1
 8003722:	d10b      	bne.n	800373c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003728:	b2da      	uxtb	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	651a      	str	r2, [r3, #80]	; 0x50
}
 800373a:	e055      	b.n	80037e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003740:	2b02      	cmp	r3, #2
 8003742:	d151      	bne.n	80037e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003744:	7bfb      	ldrb	r3, [r7, #15]
 8003746:	2b22      	cmp	r3, #34	; 0x22
 8003748:	d10d      	bne.n	8003766 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003758:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003764:	e040      	b.n	80037e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d015      	beq.n	800379c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	2b21      	cmp	r3, #33	; 0x21
 8003774:	d112      	bne.n	800379c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	781a      	ldrb	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003790:	b29b      	uxth	r3, r3
 8003792:	3b01      	subs	r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800379a:	e025      	b.n	80037e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d120      	bne.n	80037e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	2b21      	cmp	r3, #33	; 0x21
 80037aa:	d11d      	bne.n	80037e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037ba:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff fe40 	bl	8003468 <HAL_I2C_MemTxCpltCallback>
}
 80037e8:	bf00      	nop
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b22      	cmp	r3, #34	; 0x22
 8003802:	f040 80ac 	bne.w	800395e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d921      	bls.n	8003858 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003830:	b29b      	uxth	r3, r3
 8003832:	3b01      	subs	r3, #1
 8003834:	b29a      	uxth	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383e:	b29b      	uxth	r3, r3
 8003840:	2b03      	cmp	r3, #3
 8003842:	f040 808c 	bne.w	800395e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003854:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003856:	e082      	b.n	800395e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	2b02      	cmp	r3, #2
 800385e:	d075      	beq.n	800394c <I2C_MasterReceive_RXNE+0x15c>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d002      	beq.n	800386c <I2C_MasterReceive_RXNE+0x7c>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d16f      	bne.n	800394c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f001 fafd 	bl	8004e6c <I2C_WaitOnSTOPRequestThroughIT>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d142      	bne.n	80038fe <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003886:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003896:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691a      	ldr	r2, [r3, #16]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b40      	cmp	r3, #64	; 0x40
 80038d0:	d10a      	bne.n	80038e8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7fd feb1 	bl	8001648 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038e6:	e03a      	b.n	800395e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2212      	movs	r2, #18
 80038f4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff fd80 	bl	80033fc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038fc:	e02f      	b.n	800395e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800390c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff fd99 	bl	800347c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800394a:	e008      	b.n	800395e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800395a:	605a      	str	r2, [r3, #4]
}
 800395c:	e7ff      	b.n	800395e <I2C_MasterReceive_RXNE+0x16e>
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003972:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b04      	cmp	r3, #4
 800397c:	d11b      	bne.n	80039b6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800398c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80039b4:	e0bd      	b.n	8003b32 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d129      	bne.n	8003a14 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ce:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d00a      	beq.n	80039ec <I2C_MasterReceive_BTF+0x86>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d007      	beq.n	80039ec <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a12:	e08e      	b.n	8003b32 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d176      	bne.n	8003b0c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d002      	beq.n	8003a2a <I2C_MasterReceive_BTF+0xc4>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b10      	cmp	r3, #16
 8003a28:	d108      	bne.n	8003a3c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	e019      	b.n	8003a70 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d002      	beq.n	8003a48 <I2C_MasterReceive_BTF+0xe2>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d108      	bne.n	8003a5a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	e00a      	b.n	8003a70 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b10      	cmp	r3, #16
 8003a5e:	d007      	beq.n	8003a70 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003aca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b40      	cmp	r3, #64	; 0x40
 8003ade:	d10a      	bne.n	8003af6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fd fdaa 	bl	8001648 <HAL_I2C_MemRxCpltCallback>
}
 8003af4:	e01d      	b.n	8003b32 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2212      	movs	r2, #18
 8003b02:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff fc79 	bl	80033fc <HAL_I2C_MasterRxCpltCallback>
}
 8003b0a:	e012      	b.n	8003b32 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b32:	bf00      	nop
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b40      	cmp	r3, #64	; 0x40
 8003b4c:	d117      	bne.n	8003b7e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d109      	bne.n	8003b6a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b66:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003b68:	e067      	b.n	8003c3a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	611a      	str	r2, [r3, #16]
}
 8003b7c:	e05d      	b.n	8003c3a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b86:	d133      	bne.n	8003bf0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b21      	cmp	r3, #33	; 0x21
 8003b92:	d109      	bne.n	8003ba8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ba4:	611a      	str	r2, [r3, #16]
 8003ba6:	e008      	b.n	8003bba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d004      	beq.n	8003bcc <I2C_Master_SB+0x92>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d108      	bne.n	8003bde <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d032      	beq.n	8003c3a <I2C_Master_SB+0x100>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d02d      	beq.n	8003c3a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bec:	605a      	str	r2, [r3, #4]
}
 8003bee:	e024      	b.n	8003c3a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10e      	bne.n	8003c16 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	11db      	asrs	r3, r3, #7
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f003 0306 	and.w	r3, r3, #6
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	f063 030f 	orn	r3, r3, #15
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	611a      	str	r2, [r3, #16]
}
 8003c14:	e011      	b.n	8003c3a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d10d      	bne.n	8003c3a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	11db      	asrs	r3, r3, #7
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	f003 0306 	and.w	r3, r3, #6
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	f063 030e 	orn	r3, r3, #14
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	611a      	str	r2, [r3, #16]
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d004      	beq.n	8003c6c <I2C_Master_ADD10+0x26>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d108      	bne.n	8003c7e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00c      	beq.n	8003c8e <I2C_Master_ADD10+0x48>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d007      	beq.n	8003c8e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c8c:	605a      	str	r2, [r3, #4]
  }
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b091      	sub	sp, #68	; 0x44
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ca8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b22      	cmp	r3, #34	; 0x22
 8003cc2:	f040 8169 	bne.w	8003f98 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10f      	bne.n	8003cee <I2C_Master_ADDR+0x54>
 8003cce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003cd2:	2b40      	cmp	r3, #64	; 0x40
 8003cd4:	d10b      	bne.n	8003cee <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	633b      	str	r3, [r7, #48]	; 0x30
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	633b      	str	r3, [r7, #48]	; 0x30
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	e160      	b.n	8003fb0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d11d      	bne.n	8003d32 <I2C_Master_ADDR+0x98>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003cfe:	d118      	bne.n	8003d32 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d00:	2300      	movs	r3, #0
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d24:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	651a      	str	r2, [r3, #80]	; 0x50
 8003d30:	e13e      	b.n	8003fb0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d113      	bne.n	8003d64 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d50:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	e115      	b.n	8003f90 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	f040 808a 	bne.w	8003e84 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d76:	d137      	bne.n	8003de8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d86:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d96:	d113      	bne.n	8003dc0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da8:	2300      	movs	r3, #0
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	e0e7      	b.n	8003f90 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	623b      	str	r3, [r7, #32]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	623b      	str	r3, [r7, #32]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	623b      	str	r3, [r7, #32]
 8003dd4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	e0d3      	b.n	8003f90 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d02e      	beq.n	8003e4c <I2C_Master_ADDR+0x1b2>
 8003dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	d02b      	beq.n	8003e4c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df6:	2b12      	cmp	r3, #18
 8003df8:	d102      	bne.n	8003e00 <I2C_Master_ADDR+0x166>
 8003dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d125      	bne.n	8003e4c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d00e      	beq.n	8003e24 <I2C_Master_ADDR+0x18a>
 8003e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d00b      	beq.n	8003e24 <I2C_Master_ADDR+0x18a>
 8003e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0e:	2b10      	cmp	r3, #16
 8003e10:	d008      	beq.n	8003e24 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	e007      	b.n	8003e34 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e32:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e34:	2300      	movs	r3, #0
 8003e36:	61fb      	str	r3, [r7, #28]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	61fb      	str	r3, [r7, #28]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	61fb      	str	r3, [r7, #28]
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	e0a1      	b.n	8003f90 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e5a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61bb      	str	r3, [r7, #24]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	61bb      	str	r3, [r7, #24]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	61bb      	str	r3, [r7, #24]
 8003e70:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	e085      	b.n	8003f90 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d14d      	bne.n	8003f2a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d016      	beq.n	8003ec2 <I2C_Master_ADDR+0x228>
 8003e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d013      	beq.n	8003ec2 <I2C_Master_ADDR+0x228>
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9c:	2b10      	cmp	r3, #16
 8003e9e:	d010      	beq.n	8003ec2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eae:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	e007      	b.n	8003ed2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ed0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee0:	d117      	bne.n	8003f12 <I2C_Master_ADDR+0x278>
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ee8:	d00b      	beq.n	8003f02 <I2C_Master_ADDR+0x268>
 8003eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d008      	beq.n	8003f02 <I2C_Master_ADDR+0x268>
 8003ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d005      	beq.n	8003f02 <I2C_Master_ADDR+0x268>
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	2b10      	cmp	r3, #16
 8003efa:	d002      	beq.n	8003f02 <I2C_Master_ADDR+0x268>
 8003efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	d107      	bne.n	8003f12 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f10:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	e032      	b.n	8003f90 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f38:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f48:	d117      	bne.n	8003f7a <I2C_Master_ADDR+0x2e0>
 8003f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f50:	d00b      	beq.n	8003f6a <I2C_Master_ADDR+0x2d0>
 8003f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d008      	beq.n	8003f6a <I2C_Master_ADDR+0x2d0>
 8003f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d005      	beq.n	8003f6a <I2C_Master_ADDR+0x2d0>
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f60:	2b10      	cmp	r3, #16
 8003f62:	d002      	beq.n	8003f6a <I2C_Master_ADDR+0x2d0>
 8003f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	d107      	bne.n	8003f7a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f78:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003f96:	e00b      	b.n	8003fb0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
}
 8003fae:	e7ff      	b.n	8003fb0 <I2C_Master_ADDR+0x316>
 8003fb0:	bf00      	nop
 8003fb2:	3744      	adds	r7, #68	; 0x44
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d02b      	beq.n	800402e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	781a      	ldrb	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d114      	bne.n	800402e <I2C_SlaveTransmit_TXE+0x72>
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	2b29      	cmp	r3, #41	; 0x29
 8004008:	d111      	bne.n	800402e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004018:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2221      	movs	r2, #33	; 0x21
 800401e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2228      	movs	r2, #40	; 0x28
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff f9f1 	bl	8003410 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d011      	beq.n	800406c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	781a      	ldrb	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004086:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d02c      	beq.n	80040ec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d114      	bne.n	80040ec <I2C_SlaveReceive_RXNE+0x74>
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	2b2a      	cmp	r3, #42	; 0x2a
 80040c6:	d111      	bne.n	80040ec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040d6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2222      	movs	r2, #34	; 0x22
 80040dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2228      	movs	r2, #40	; 0x28
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff f99c 	bl	8003424 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040ec:	bf00      	nop
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d012      	beq.n	800412c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004142:	2300      	movs	r3, #0
 8004144:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004152:	2b28      	cmp	r3, #40	; 0x28
 8004154:	d127      	bne.n	80041a6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004164:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	089b      	lsrs	r3, r3, #2
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004172:	2301      	movs	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	09db      	lsrs	r3, r3, #7
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d103      	bne.n	800418a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	81bb      	strh	r3, [r7, #12]
 8004188:	e002      	b.n	8004190 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004198:	89ba      	ldrh	r2, [r7, #12]
 800419a:	7bfb      	ldrb	r3, [r7, #15]
 800419c:	4619      	mov	r1, r3
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7ff f94a 	bl	8003438 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80041a4:	e00e      	b.n	80041c4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a6:	2300      	movs	r3, #0
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	60bb      	str	r3, [r7, #8]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	60bb      	str	r3, [r7, #8]
 80041ba:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80041c4:	bf00      	nop
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041da:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041ea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80041ec:	2300      	movs	r3, #0
 80041ee:	60bb      	str	r3, [r7, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	60bb      	str	r3, [r7, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004218:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004228:	d172      	bne.n	8004310 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800422a:	7bfb      	ldrb	r3, [r7, #15]
 800422c:	2b22      	cmp	r3, #34	; 0x22
 800422e:	d002      	beq.n	8004236 <I2C_Slave_STOPF+0x6a>
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	2b2a      	cmp	r3, #42	; 0x2a
 8004234:	d135      	bne.n	80042a2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	b29a      	uxth	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f043 0204 	orr.w	r2, r3, #4
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004268:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	4618      	mov	r0, r3
 8004270:	f7fd ffed 	bl	800224e <HAL_DMA_GetState>
 8004274:	4603      	mov	r3, r0
 8004276:	2b01      	cmp	r3, #1
 8004278:	d049      	beq.n	800430e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	4a69      	ldr	r2, [pc, #420]	; (8004424 <I2C_Slave_STOPF+0x258>)
 8004280:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004286:	4618      	mov	r0, r3
 8004288:	f7fd ffbf 	bl	800220a <HAL_DMA_Abort_IT>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d03d      	beq.n	800430e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800429c:	4610      	mov	r0, r2
 800429e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042a0:	e035      	b.n	800430e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f043 0204 	orr.w	r2, r3, #4
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fd ffb7 	bl	800224e <HAL_DMA_GetState>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d014      	beq.n	8004310 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ea:	4a4e      	ldr	r2, [pc, #312]	; (8004424 <I2C_Slave_STOPF+0x258>)
 80042ec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fd ff89 	bl	800220a <HAL_DMA_Abort_IT>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d008      	beq.n	8004310 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004308:	4610      	mov	r0, r2
 800430a:	4798      	blx	r3
 800430c:	e000      	b.n	8004310 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800430e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d03e      	beq.n	8004398 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b04      	cmp	r3, #4
 8004326:	d112      	bne.n	800434e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004358:	2b40      	cmp	r3, #64	; 0x40
 800435a:	d112      	bne.n	8004382 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	f043 0204 	orr.w	r2, r3, #4
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f8b3 	bl	800450c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80043a6:	e039      	b.n	800441c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	2b2a      	cmp	r3, #42	; 0x2a
 80043ac:	d109      	bne.n	80043c2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2228      	movs	r2, #40	; 0x28
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff f831 	bl	8003424 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b28      	cmp	r3, #40	; 0x28
 80043cc:	d111      	bne.n	80043f2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a15      	ldr	r2, [pc, #84]	; (8004428 <I2C_Slave_STOPF+0x25c>)
 80043d2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7ff f832 	bl	8003454 <HAL_I2C_ListenCpltCallback>
}
 80043f0:	e014      	b.n	800441c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f6:	2b22      	cmp	r3, #34	; 0x22
 80043f8:	d002      	beq.n	8004400 <I2C_Slave_STOPF+0x234>
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
 80043fc:	2b22      	cmp	r3, #34	; 0x22
 80043fe:	d10d      	bne.n	800441c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff f804 	bl	8003424 <HAL_I2C_SlaveRxCpltCallback>
}
 800441c:	bf00      	nop
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	08004a6d 	.word	0x08004a6d
 8004428:	ffff0000 	.word	0xffff0000

0800442c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2b08      	cmp	r3, #8
 8004446:	d002      	beq.n	800444e <I2C_Slave_AF+0x22>
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b20      	cmp	r3, #32
 800444c:	d129      	bne.n	80044a2 <I2C_Slave_AF+0x76>
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	2b28      	cmp	r3, #40	; 0x28
 8004452:	d126      	bne.n	80044a2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a2c      	ldr	r2, [pc, #176]	; (8004508 <I2C_Slave_AF+0xdc>)
 8004458:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004468:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004472:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004482:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2220      	movs	r2, #32
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fe ffda 	bl	8003454 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80044a0:	e02e      	b.n	8004500 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	2b21      	cmp	r3, #33	; 0x21
 80044a6:	d126      	bne.n	80044f6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a17      	ldr	r2, [pc, #92]	; (8004508 <I2C_Slave_AF+0xdc>)
 80044ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2221      	movs	r2, #33	; 0x21
 80044b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044d2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044dc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ec:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fe ff8e 	bl	8003410 <HAL_I2C_SlaveTxCpltCallback>
}
 80044f4:	e004      	b.n	8004500 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044fe:	615a      	str	r2, [r3, #20]
}
 8004500:	bf00      	nop
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	ffff0000 	.word	0xffff0000

0800450c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004522:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004524:	7bbb      	ldrb	r3, [r7, #14]
 8004526:	2b10      	cmp	r3, #16
 8004528:	d002      	beq.n	8004530 <I2C_ITError+0x24>
 800452a:	7bbb      	ldrb	r3, [r7, #14]
 800452c:	2b40      	cmp	r3, #64	; 0x40
 800452e:	d10a      	bne.n	8004546 <I2C_ITError+0x3a>
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	2b22      	cmp	r3, #34	; 0x22
 8004534:	d107      	bne.n	8004546 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004544:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004546:	7bfb      	ldrb	r3, [r7, #15]
 8004548:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800454c:	2b28      	cmp	r3, #40	; 0x28
 800454e:	d107      	bne.n	8004560 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2228      	movs	r2, #40	; 0x28
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800455e:	e015      	b.n	800458c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800456a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800456e:	d00a      	beq.n	8004586 <I2C_ITError+0x7a>
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	2b60      	cmp	r3, #96	; 0x60
 8004574:	d007      	beq.n	8004586 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800459a:	d162      	bne.n	8004662 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045aa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d020      	beq.n	80045fc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045be:	4a6a      	ldr	r2, [pc, #424]	; (8004768 <I2C_ITError+0x25c>)
 80045c0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fd fe1f 	bl	800220a <HAL_DMA_Abort_IT>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 8089 	beq.w	80046e6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0201 	bic.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045f6:	4610      	mov	r0, r2
 80045f8:	4798      	blx	r3
 80045fa:	e074      	b.n	80046e6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004600:	4a59      	ldr	r2, [pc, #356]	; (8004768 <I2C_ITError+0x25c>)
 8004602:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004608:	4618      	mov	r0, r3
 800460a:	f7fd fdfe 	bl	800220a <HAL_DMA_Abort_IT>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d068      	beq.n	80046e6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461e:	2b40      	cmp	r3, #64	; 0x40
 8004620:	d10b      	bne.n	800463a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0201 	bic.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800465c:	4610      	mov	r0, r2
 800465e:	4798      	blx	r3
 8004660:	e041      	b.n	80046e6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b60      	cmp	r3, #96	; 0x60
 800466c:	d125      	bne.n	80046ba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004686:	2b40      	cmp	r3, #64	; 0x40
 8004688:	d10b      	bne.n	80046a2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	1c5a      	adds	r2, r3, #1
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0201 	bic.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fe feec 	bl	8003490 <HAL_I2C_AbortCpltCallback>
 80046b8:	e015      	b.n	80046e6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c4:	2b40      	cmp	r3, #64	; 0x40
 80046c6:	d10b      	bne.n	80046e0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691a      	ldr	r2, [r3, #16]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7fe fecb 	bl	800347c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10e      	bne.n	8004714 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d109      	bne.n	8004714 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004706:	2b00      	cmp	r3, #0
 8004708:	d104      	bne.n	8004714 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004710:	2b00      	cmp	r3, #0
 8004712:	d007      	beq.n	8004724 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004722:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b04      	cmp	r3, #4
 8004736:	d113      	bne.n	8004760 <I2C_ITError+0x254>
 8004738:	7bfb      	ldrb	r3, [r7, #15]
 800473a:	2b28      	cmp	r3, #40	; 0x28
 800473c:	d110      	bne.n	8004760 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a0a      	ldr	r2, [pc, #40]	; (800476c <I2C_ITError+0x260>)
 8004742:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2220      	movs	r2, #32
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7fe fe7a 	bl	8003454 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004760:	bf00      	nop
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	08004a6d 	.word	0x08004a6d
 800476c:	ffff0000 	.word	0xffff0000

08004770 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af02      	add	r7, sp, #8
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	4608      	mov	r0, r1
 800477a:	4611      	mov	r1, r2
 800477c:	461a      	mov	r2, r3
 800477e:	4603      	mov	r3, r0
 8004780:	817b      	strh	r3, [r7, #10]
 8004782:	460b      	mov	r3, r1
 8004784:	813b      	strh	r3, [r7, #8]
 8004786:	4613      	mov	r3, r2
 8004788:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004798:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 fa08 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00d      	beq.n	80047ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c0:	d103      	bne.n	80047ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e05f      	b.n	800488e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047ce:	897b      	ldrh	r3, [r7, #10]
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	461a      	mov	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	6a3a      	ldr	r2, [r7, #32]
 80047e2:	492d      	ldr	r1, [pc, #180]	; (8004898 <I2C_RequestMemoryWrite+0x128>)
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 fa40 	bl	8004c6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e04c      	b.n	800488e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800480a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480c:	6a39      	ldr	r1, [r7, #32]
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 faaa 	bl	8004d68 <I2C_WaitOnTXEFlagUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00d      	beq.n	8004836 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	2b04      	cmp	r3, #4
 8004820:	d107      	bne.n	8004832 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004830:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e02b      	b.n	800488e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004836:	88fb      	ldrh	r3, [r7, #6]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d105      	bne.n	8004848 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800483c:	893b      	ldrh	r3, [r7, #8]
 800483e:	b2da      	uxtb	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	611a      	str	r2, [r3, #16]
 8004846:	e021      	b.n	800488c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004848:	893b      	ldrh	r3, [r7, #8]
 800484a:	0a1b      	lsrs	r3, r3, #8
 800484c:	b29b      	uxth	r3, r3
 800484e:	b2da      	uxtb	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004858:	6a39      	ldr	r1, [r7, #32]
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 fa84 	bl	8004d68 <I2C_WaitOnTXEFlagUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00d      	beq.n	8004882 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	2b04      	cmp	r3, #4
 800486c:	d107      	bne.n	800487e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800487c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e005      	b.n	800488e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004882:	893b      	ldrh	r3, [r7, #8]
 8004884:	b2da      	uxtb	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	00010002 	.word	0x00010002

0800489c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	4608      	mov	r0, r1
 80048a6:	4611      	mov	r1, r2
 80048a8:	461a      	mov	r2, r3
 80048aa:	4603      	mov	r3, r0
 80048ac:	817b      	strh	r3, [r7, #10]
 80048ae:	460b      	mov	r3, r1
 80048b0:	813b      	strh	r3, [r7, #8]
 80048b2:	4613      	mov	r3, r2
 80048b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	2200      	movs	r2, #0
 80048de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f96a 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00d      	beq.n	800490a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048fc:	d103      	bne.n	8004906 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004904:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e0aa      	b.n	8004a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800490a:	897b      	ldrh	r3, [r7, #10]
 800490c:	b2db      	uxtb	r3, r3
 800490e:	461a      	mov	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004918:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	6a3a      	ldr	r2, [r7, #32]
 800491e:	4952      	ldr	r1, [pc, #328]	; (8004a68 <I2C_RequestMemoryRead+0x1cc>)
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f9a2 	bl	8004c6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e097      	b.n	8004a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004948:	6a39      	ldr	r1, [r7, #32]
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 fa0c 	bl	8004d68 <I2C_WaitOnTXEFlagUntilTimeout>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00d      	beq.n	8004972 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	2b04      	cmp	r3, #4
 800495c:	d107      	bne.n	800496e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800496c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e076      	b.n	8004a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004972:	88fb      	ldrh	r3, [r7, #6]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d105      	bne.n	8004984 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004978:	893b      	ldrh	r3, [r7, #8]
 800497a:	b2da      	uxtb	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	611a      	str	r2, [r3, #16]
 8004982:	e021      	b.n	80049c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004984:	893b      	ldrh	r3, [r7, #8]
 8004986:	0a1b      	lsrs	r3, r3, #8
 8004988:	b29b      	uxth	r3, r3
 800498a:	b2da      	uxtb	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004994:	6a39      	ldr	r1, [r7, #32]
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 f9e6 	bl	8004d68 <I2C_WaitOnTXEFlagUntilTimeout>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00d      	beq.n	80049be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d107      	bne.n	80049ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e050      	b.n	8004a60 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049be:	893b      	ldrh	r3, [r7, #8]
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ca:	6a39      	ldr	r1, [r7, #32]
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f9cb 	bl	8004d68 <I2C_WaitOnTXEFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00d      	beq.n	80049f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d107      	bne.n	80049f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e035      	b.n	8004a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 f8d3 	bl	8004bbc <I2C_WaitOnFlagUntilTimeout>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00d      	beq.n	8004a38 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a2a:	d103      	bne.n	8004a34 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e013      	b.n	8004a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a38:	897b      	ldrh	r3, [r7, #10]
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	6a3a      	ldr	r2, [r7, #32]
 8004a4c:	4906      	ldr	r1, [pc, #24]	; (8004a68 <I2C_RequestMemoryRead+0x1cc>)
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 f90b 	bl	8004c6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	00010002 	.word	0x00010002

08004a6c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a84:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a86:	4b4b      	ldr	r3, [pc, #300]	; (8004bb4 <I2C_DMAAbort+0x148>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	08db      	lsrs	r3, r3, #3
 8004a8c:	4a4a      	ldr	r2, [pc, #296]	; (8004bb8 <I2C_DMAAbort+0x14c>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	0a1a      	lsrs	r2, r3, #8
 8004a94:	4613      	mov	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	00da      	lsls	r2, r3, #3
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d106      	bne.n	8004ab4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	f043 0220 	orr.w	r2, r3, #32
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004ab2:	e00a      	b.n	8004aca <I2C_DMAAbort+0x5e>
    }
    count--;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ac8:	d0ea      	beq.n	8004aa0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2200      	movs	r2, #0
 8004afe:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 0201 	bic.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b60      	cmp	r3, #96	; 0x60
 8004b3a:	d10e      	bne.n	8004b5a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b52:	6978      	ldr	r0, [r7, #20]
 8004b54:	f7fe fc9c 	bl	8003490 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b58:	e027      	b.n	8004baa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b5a:	7cfb      	ldrb	r3, [r7, #19]
 8004b5c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b60:	2b28      	cmp	r3, #40	; 0x28
 8004b62:	d117      	bne.n	8004b94 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b82:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	2200      	movs	r2, #0
 8004b88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2228      	movs	r2, #40	; 0x28
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b92:	e007      	b.n	8004ba4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004ba4:	6978      	ldr	r0, [r7, #20]
 8004ba6:	f7fe fc69 	bl	800347c <HAL_I2C_ErrorCallback>
}
 8004baa:	bf00      	nop
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000014 	.word	0x20000014
 8004bb8:	14f8b589 	.word	0x14f8b589

08004bbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	603b      	str	r3, [r7, #0]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bcc:	e025      	b.n	8004c1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd4:	d021      	beq.n	8004c1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd6:	f7fd f9d7 	bl	8001f88 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d302      	bcc.n	8004bec <I2C_WaitOnFlagUntilTimeout+0x30>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d116      	bne.n	8004c1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	f043 0220 	orr.w	r2, r3, #32
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e023      	b.n	8004c62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	0c1b      	lsrs	r3, r3, #16
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d10d      	bne.n	8004c40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	43da      	mvns	r2, r3
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	bf0c      	ite	eq
 8004c36:	2301      	moveq	r3, #1
 8004c38:	2300      	movne	r3, #0
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	e00c      	b.n	8004c5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	43da      	mvns	r2, r3
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	bf0c      	ite	eq
 8004c52:	2301      	moveq	r3, #1
 8004c54:	2300      	movne	r3, #0
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	461a      	mov	r2, r3
 8004c5a:	79fb      	ldrb	r3, [r7, #7]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d0b6      	beq.n	8004bce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
 8004c76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c78:	e051      	b.n	8004d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c88:	d123      	bne.n	8004cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ca2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f043 0204 	orr.w	r2, r3, #4
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e046      	b.n	8004d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd8:	d021      	beq.n	8004d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cda:	f7fd f955 	bl	8001f88 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d302      	bcc.n	8004cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d116      	bne.n	8004d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	f043 0220 	orr.w	r2, r3, #32
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e020      	b.n	8004d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	0c1b      	lsrs	r3, r3, #16
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d10c      	bne.n	8004d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	43da      	mvns	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4013      	ands	r3, r2
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	bf14      	ite	ne
 8004d3a:	2301      	movne	r3, #1
 8004d3c:	2300      	moveq	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	e00b      	b.n	8004d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	43da      	mvns	r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	bf14      	ite	ne
 8004d54:	2301      	movne	r3, #1
 8004d56:	2300      	moveq	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d18d      	bne.n	8004c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d74:	e02d      	b.n	8004dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 f900 	bl	8004f7c <I2C_IsAcknowledgeFailed>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e02d      	b.n	8004de2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8c:	d021      	beq.n	8004dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d8e:	f7fd f8fb 	bl	8001f88 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d302      	bcc.n	8004da4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d116      	bne.n	8004dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	f043 0220 	orr.w	r2, r3, #32
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e007      	b.n	8004de2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ddc:	2b80      	cmp	r3, #128	; 0x80
 8004dde:	d1ca      	bne.n	8004d76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b084      	sub	sp, #16
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004df6:	e02d      	b.n	8004e54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 f8bf 	bl	8004f7c <I2C_IsAcknowledgeFailed>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e02d      	b.n	8004e64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0e:	d021      	beq.n	8004e54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e10:	f7fd f8ba 	bl	8001f88 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d302      	bcc.n	8004e26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d116      	bne.n	8004e54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	f043 0220 	orr.w	r2, r3, #32
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e007      	b.n	8004e64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d1ca      	bne.n	8004df8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e78:	4b13      	ldr	r3, [pc, #76]	; (8004ec8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	08db      	lsrs	r3, r3, #3
 8004e7e:	4a13      	ldr	r2, [pc, #76]	; (8004ecc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004e80:	fba2 2303 	umull	r2, r3, r2, r3
 8004e84:	0a1a      	lsrs	r2, r3, #8
 8004e86:	4613      	mov	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3b01      	subs	r3, #1
 8004e92:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d107      	bne.n	8004eaa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	f043 0220 	orr.w	r2, r3, #32
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e008      	b.n	8004ebc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb8:	d0e9      	beq.n	8004e8e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	20000014 	.word	0x20000014
 8004ecc:	14f8b589 	.word	0x14f8b589

08004ed0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004edc:	e042      	b.n	8004f64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	2b10      	cmp	r3, #16
 8004eea:	d119      	bne.n	8004f20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0210 	mvn.w	r2, #16
 8004ef4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e029      	b.n	8004f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f20:	f7fd f832 	bl	8001f88 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d302      	bcc.n	8004f36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d116      	bne.n	8004f64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f50:	f043 0220 	orr.w	r2, r3, #32
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e007      	b.n	8004f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6e:	2b40      	cmp	r3, #64	; 0x40
 8004f70:	d1b5      	bne.n	8004ede <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f92:	d11b      	bne.n	8004fcc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb8:	f043 0204 	orr.w	r2, r3, #4
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e000      	b.n	8004fce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004fea:	d103      	bne.n	8004ff4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004ff2:	e007      	b.n	8005004 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004ffc:	d102      	bne.n	8005004 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2208      	movs	r2, #8
 8005002:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005012:	b08f      	sub	sp, #60	; 0x3c
 8005014:	af0a      	add	r7, sp, #40	; 0x28
 8005016:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e10f      	b.n	8005242 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d106      	bne.n	8005042 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f005 fcc5 	bl	800a9cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2203      	movs	r2, #3
 8005046:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005052:	2b00      	cmp	r3, #0
 8005054:	d102      	bne.n	800505c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f001 ffac 	bl	8006fbe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	603b      	str	r3, [r7, #0]
 800506c:	687e      	ldr	r6, [r7, #4]
 800506e:	466d      	mov	r5, sp
 8005070:	f106 0410 	add.w	r4, r6, #16
 8005074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005078:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800507a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800507c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005080:	e885 0003 	stmia.w	r5, {r0, r1}
 8005084:	1d33      	adds	r3, r6, #4
 8005086:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005088:	6838      	ldr	r0, [r7, #0]
 800508a:	f001 fe83 	bl	8006d94 <USB_CoreInit>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d005      	beq.n	80050a0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e0d0      	b.n	8005242 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2100      	movs	r1, #0
 80050a6:	4618      	mov	r0, r3
 80050a8:	f001 ff9a 	bl	8006fe0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050ac:	2300      	movs	r3, #0
 80050ae:	73fb      	strb	r3, [r7, #15]
 80050b0:	e04a      	b.n	8005148 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80050b2:	7bfa      	ldrb	r2, [r7, #15]
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	4613      	mov	r3, r2
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	440b      	add	r3, r1
 80050c0:	333d      	adds	r3, #61	; 0x3d
 80050c2:	2201      	movs	r2, #1
 80050c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80050c6:	7bfa      	ldrb	r2, [r7, #15]
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	4613      	mov	r3, r2
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	440b      	add	r3, r1
 80050d4:	333c      	adds	r3, #60	; 0x3c
 80050d6:	7bfa      	ldrb	r2, [r7, #15]
 80050d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050da:	7bfa      	ldrb	r2, [r7, #15]
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
 80050de:	b298      	uxth	r0, r3
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	4613      	mov	r3, r2
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	4413      	add	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	440b      	add	r3, r1
 80050ec:	3344      	adds	r3, #68	; 0x44
 80050ee:	4602      	mov	r2, r0
 80050f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050f2:	7bfa      	ldrb	r2, [r7, #15]
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	4613      	mov	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	4413      	add	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	3340      	adds	r3, #64	; 0x40
 8005102:	2200      	movs	r2, #0
 8005104:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005106:	7bfa      	ldrb	r2, [r7, #15]
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	4613      	mov	r3, r2
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	4413      	add	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	440b      	add	r3, r1
 8005114:	3348      	adds	r3, #72	; 0x48
 8005116:	2200      	movs	r2, #0
 8005118:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800511a:	7bfa      	ldrb	r2, [r7, #15]
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	4413      	add	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	440b      	add	r3, r1
 8005128:	334c      	adds	r3, #76	; 0x4c
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800512e:	7bfa      	ldrb	r2, [r7, #15]
 8005130:	6879      	ldr	r1, [r7, #4]
 8005132:	4613      	mov	r3, r2
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	440b      	add	r3, r1
 800513c:	3354      	adds	r3, #84	; 0x54
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005142:	7bfb      	ldrb	r3, [r7, #15]
 8005144:	3301      	adds	r3, #1
 8005146:	73fb      	strb	r3, [r7, #15]
 8005148:	7bfa      	ldrb	r2, [r7, #15]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	429a      	cmp	r2, r3
 8005150:	d3af      	bcc.n	80050b2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005152:	2300      	movs	r3, #0
 8005154:	73fb      	strb	r3, [r7, #15]
 8005156:	e044      	b.n	80051e2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005158:	7bfa      	ldrb	r2, [r7, #15]
 800515a:	6879      	ldr	r1, [r7, #4]
 800515c:	4613      	mov	r3, r2
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	4413      	add	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	440b      	add	r3, r1
 8005166:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800516a:	2200      	movs	r2, #0
 800516c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800516e:	7bfa      	ldrb	r2, [r7, #15]
 8005170:	6879      	ldr	r1, [r7, #4]
 8005172:	4613      	mov	r3, r2
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	4413      	add	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	440b      	add	r3, r1
 800517c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005180:	7bfa      	ldrb	r2, [r7, #15]
 8005182:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005184:	7bfa      	ldrb	r2, [r7, #15]
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	4613      	mov	r3, r2
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	440b      	add	r3, r1
 8005192:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005196:	2200      	movs	r2, #0
 8005198:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800519a:	7bfa      	ldrb	r2, [r7, #15]
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80051ac:	2200      	movs	r2, #0
 80051ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80051b0:	7bfa      	ldrb	r2, [r7, #15]
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	4613      	mov	r3, r2
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	4413      	add	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051c6:	7bfa      	ldrb	r2, [r7, #15]
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	4613      	mov	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	4413      	add	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	440b      	add	r3, r1
 80051d4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	3301      	adds	r3, #1
 80051e0:	73fb      	strb	r3, [r7, #15]
 80051e2:	7bfa      	ldrb	r2, [r7, #15]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d3b5      	bcc.n	8005158 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	603b      	str	r3, [r7, #0]
 80051f2:	687e      	ldr	r6, [r7, #4]
 80051f4:	466d      	mov	r5, sp
 80051f6:	f106 0410 	add.w	r4, r6, #16
 80051fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005202:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005206:	e885 0003 	stmia.w	r5, {r0, r1}
 800520a:	1d33      	adds	r3, r6, #4
 800520c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800520e:	6838      	ldr	r0, [r7, #0]
 8005210:	f001 ff32 	bl	8007078 <USB_DevInit>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d005      	beq.n	8005226 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2202      	movs	r2, #2
 800521e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e00d      	b.n	8005242 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4618      	mov	r0, r3
 800523c:	f003 f881 	bl	8008342 <USB_DevDisconnect>

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800524a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b084      	sub	sp, #16
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800525e:	2b01      	cmp	r3, #1
 8005260:	d101      	bne.n	8005266 <HAL_PCD_Start+0x1c>
 8005262:	2302      	movs	r3, #2
 8005264:	e020      	b.n	80052a8 <HAL_PCD_Start+0x5e>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005272:	2b01      	cmp	r3, #1
 8005274:	d109      	bne.n	800528a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800527a:	2b01      	cmp	r3, #1
 800527c:	d005      	beq.n	800528a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005282:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4618      	mov	r0, r3
 8005290:	f001 fe84 	bl	8006f9c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4618      	mov	r0, r3
 800529a:	f003 f831 	bl	8008300 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80052b0:	b590      	push	{r4, r7, lr}
 80052b2:	b08d      	sub	sp, #52	; 0x34
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f003 f8ef 	bl	80084aa <USB_GetMode>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f040 848a 	bne.w	8005be8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4618      	mov	r0, r3
 80052da:	f003 f853 	bl	8008384 <USB_ReadInterrupts>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 8480 	beq.w	8005be6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	0a1b      	lsrs	r3, r3, #8
 80052f0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4618      	mov	r0, r3
 8005300:	f003 f840 	bl	8008384 <USB_ReadInterrupts>
 8005304:	4603      	mov	r3, r0
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b02      	cmp	r3, #2
 800530c:	d107      	bne.n	800531e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695a      	ldr	r2, [r3, #20]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f002 0202 	and.w	r2, r2, #2
 800531c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f003 f82e 	bl	8008384 <USB_ReadInterrupts>
 8005328:	4603      	mov	r3, r0
 800532a:	f003 0310 	and.w	r3, r3, #16
 800532e:	2b10      	cmp	r3, #16
 8005330:	d161      	bne.n	80053f6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	699a      	ldr	r2, [r3, #24]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 0210 	bic.w	r2, r2, #16
 8005340:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	f003 020f 	and.w	r2, r3, #15
 800534e:	4613      	mov	r3, r2
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	4413      	add	r3, r2
 800535e:	3304      	adds	r3, #4
 8005360:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	0c5b      	lsrs	r3, r3, #17
 8005366:	f003 030f 	and.w	r3, r3, #15
 800536a:	2b02      	cmp	r3, #2
 800536c:	d124      	bne.n	80053b8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005374:	4013      	ands	r3, r2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d035      	beq.n	80053e6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	091b      	lsrs	r3, r3, #4
 8005382:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005384:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005388:	b29b      	uxth	r3, r3
 800538a:	461a      	mov	r2, r3
 800538c:	6a38      	ldr	r0, [r7, #32]
 800538e:	f002 fe65 	bl	800805c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	691a      	ldr	r2, [r3, #16]
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	091b      	lsrs	r3, r3, #4
 800539a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800539e:	441a      	add	r2, r3
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	6a1a      	ldr	r2, [r3, #32]
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	091b      	lsrs	r3, r3, #4
 80053ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053b0:	441a      	add	r2, r3
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	621a      	str	r2, [r3, #32]
 80053b6:	e016      	b.n	80053e6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	0c5b      	lsrs	r3, r3, #17
 80053bc:	f003 030f 	and.w	r3, r3, #15
 80053c0:	2b06      	cmp	r3, #6
 80053c2:	d110      	bne.n	80053e6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80053ca:	2208      	movs	r2, #8
 80053cc:	4619      	mov	r1, r3
 80053ce:	6a38      	ldr	r0, [r7, #32]
 80053d0:	f002 fe44 	bl	800805c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	6a1a      	ldr	r2, [r3, #32]
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	091b      	lsrs	r3, r3, #4
 80053dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053e0:	441a      	add	r2, r3
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	699a      	ldr	r2, [r3, #24]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f042 0210 	orr.w	r2, r2, #16
 80053f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f002 ffc2 	bl	8008384 <USB_ReadInterrupts>
 8005400:	4603      	mov	r3, r0
 8005402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005406:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800540a:	f040 80a7 	bne.w	800555c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f002 ffc7 	bl	80083aa <USB_ReadDevAllOutEpInterrupt>
 800541c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800541e:	e099      	b.n	8005554 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 808e 	beq.w	8005548 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	4611      	mov	r1, r2
 8005436:	4618      	mov	r0, r3
 8005438:	f002 ffeb 	bl	8008412 <USB_ReadDevOutEPInterrupt>
 800543c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00c      	beq.n	8005462 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005454:	461a      	mov	r2, r3
 8005456:	2301      	movs	r3, #1
 8005458:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800545a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fec3 	bl	80061e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f003 0308 	and.w	r3, r3, #8
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00c      	beq.n	8005486 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005478:	461a      	mov	r2, r3
 800547a:	2308      	movs	r3, #8
 800547c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800547e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 ff99 	bl	80063b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	2b00      	cmp	r3, #0
 800548e:	d008      	beq.n	80054a2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549c:	461a      	mov	r2, r3
 800549e:	2310      	movs	r3, #16
 80054a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d030      	beq.n	800550e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b4:	2b80      	cmp	r3, #128	; 0x80
 80054b6:	d109      	bne.n	80054cc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	69fa      	ldr	r2, [r7, #28]
 80054c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054ca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80054cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ce:	4613      	mov	r3, r2
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	4413      	add	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	4413      	add	r3, r2
 80054de:	3304      	adds	r3, #4
 80054e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	78db      	ldrb	r3, [r3, #3]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d108      	bne.n	80054fc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2200      	movs	r2, #0
 80054ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	4619      	mov	r1, r3
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f005 fb64 	bl	800abc4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005508:	461a      	mov	r2, r3
 800550a:	2302      	movs	r3, #2
 800550c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f003 0320 	and.w	r3, r3, #32
 8005514:	2b00      	cmp	r3, #0
 8005516:	d008      	beq.n	800552a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005524:	461a      	mov	r2, r3
 8005526:	2320      	movs	r3, #32
 8005528:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d009      	beq.n	8005548 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005540:	461a      	mov	r2, r3
 8005542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005546:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	3301      	adds	r3, #1
 800554c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005550:	085b      	lsrs	r3, r3, #1
 8005552:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005556:	2b00      	cmp	r3, #0
 8005558:	f47f af62 	bne.w	8005420 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4618      	mov	r0, r3
 8005562:	f002 ff0f 	bl	8008384 <USB_ReadInterrupts>
 8005566:	4603      	mov	r3, r0
 8005568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800556c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005570:	f040 80db 	bne.w	800572a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4618      	mov	r0, r3
 800557a:	f002 ff30 	bl	80083de <USB_ReadDevAllInEpInterrupt>
 800557e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005584:	e0cd      	b.n	8005722 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 80c2 	beq.w	8005716 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005598:	b2d2      	uxtb	r2, r2
 800559a:	4611      	mov	r1, r2
 800559c:	4618      	mov	r0, r3
 800559e:	f002 ff56 	bl	800844e <USB_ReadDevInEPInterrupt>
 80055a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d057      	beq.n	800565e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	f003 030f 	and.w	r3, r3, #15
 80055b4:	2201      	movs	r2, #1
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	43db      	mvns	r3, r3
 80055c8:	69f9      	ldr	r1, [r7, #28]
 80055ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055ce:	4013      	ands	r3, r2
 80055d0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055de:	461a      	mov	r2, r3
 80055e0:	2301      	movs	r3, #1
 80055e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d132      	bne.n	8005652 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80055ec:	6879      	ldr	r1, [r7, #4]
 80055ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f0:	4613      	mov	r3, r2
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	4413      	add	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	440b      	add	r3, r1
 80055fa:	334c      	adds	r3, #76	; 0x4c
 80055fc:	6819      	ldr	r1, [r3, #0]
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005602:	4613      	mov	r3, r2
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4403      	add	r3, r0
 800560c:	3348      	adds	r3, #72	; 0x48
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4419      	add	r1, r3
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005616:	4613      	mov	r3, r2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	4413      	add	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4403      	add	r3, r0
 8005620:	334c      	adds	r3, #76	; 0x4c
 8005622:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	2b00      	cmp	r3, #0
 8005628:	d113      	bne.n	8005652 <HAL_PCD_IRQHandler+0x3a2>
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562e:	4613      	mov	r3, r2
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	4413      	add	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	440b      	add	r3, r1
 8005638:	3354      	adds	r3, #84	; 0x54
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d108      	bne.n	8005652 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6818      	ldr	r0, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800564a:	461a      	mov	r2, r3
 800564c:	2101      	movs	r1, #1
 800564e:	f002 ff5d 	bl	800850c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	b2db      	uxtb	r3, r3
 8005656:	4619      	mov	r1, r3
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f005 fa38 	bl	800aace <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f003 0308 	and.w	r3, r3, #8
 8005664:	2b00      	cmp	r3, #0
 8005666:	d008      	beq.n	800567a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005674:	461a      	mov	r2, r3
 8005676:	2308      	movs	r3, #8
 8005678:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	2b00      	cmp	r3, #0
 8005682:	d008      	beq.n	8005696 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005690:	461a      	mov	r2, r3
 8005692:	2310      	movs	r3, #16
 8005694:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569c:	2b00      	cmp	r3, #0
 800569e:	d008      	beq.n	80056b2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ac:	461a      	mov	r2, r3
 80056ae:	2340      	movs	r3, #64	; 0x40
 80056b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d023      	beq.n	8005704 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80056bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056be:	6a38      	ldr	r0, [r7, #32]
 80056c0:	f001 fe3e 	bl	8007340 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80056c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c6:	4613      	mov	r3, r2
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	4413      	add	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	3338      	adds	r3, #56	; 0x38
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	4413      	add	r3, r2
 80056d4:	3304      	adds	r3, #4
 80056d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	78db      	ldrb	r3, [r3, #3]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d108      	bne.n	80056f2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2200      	movs	r2, #0
 80056e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f005 fa7b 	bl	800abe8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fe:	461a      	mov	r2, r3
 8005700:	2302      	movs	r3, #2
 8005702:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800570e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fcdb 	bl	80060cc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	3301      	adds	r3, #1
 800571a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	085b      	lsrs	r3, r3, #1
 8005720:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005724:	2b00      	cmp	r3, #0
 8005726:	f47f af2e 	bne.w	8005586 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4618      	mov	r0, r3
 8005730:	f002 fe28 	bl	8008384 <USB_ReadInterrupts>
 8005734:	4603      	mov	r3, r0
 8005736:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800573a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800573e:	d122      	bne.n	8005786 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	69fa      	ldr	r2, [r7, #28]
 800574a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800574e:	f023 0301 	bic.w	r3, r3, #1
 8005752:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800575a:	2b01      	cmp	r3, #1
 800575c:	d108      	bne.n	8005770 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005766:	2100      	movs	r1, #0
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fec3 	bl	80064f4 <HAL_PCDEx_LPM_Callback>
 800576e:	e002      	b.n	8005776 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f005 fa19 	bl	800aba8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695a      	ldr	r2, [r3, #20]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005784:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f002 fdfa 	bl	8008384 <USB_ReadInterrupts>
 8005790:	4603      	mov	r3, r0
 8005792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800579a:	d112      	bne.n	80057c2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d102      	bne.n	80057b2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f005 f9d5 	bl	800ab5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	695a      	ldr	r2, [r3, #20]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80057c0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f002 fddc 	bl	8008384 <USB_ReadInterrupts>
 80057cc:	4603      	mov	r3, r0
 80057ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d6:	f040 80b7 	bne.w	8005948 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	69fa      	ldr	r2, [r7, #28]
 80057e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057e8:	f023 0301 	bic.w	r3, r3, #1
 80057ec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2110      	movs	r1, #16
 80057f4:	4618      	mov	r0, r3
 80057f6:	f001 fda3 	bl	8007340 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057fa:	2300      	movs	r3, #0
 80057fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057fe:	e046      	b.n	800588e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580c:	461a      	mov	r2, r3
 800580e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005812:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005824:	0151      	lsls	r1, r2, #5
 8005826:	69fa      	ldr	r2, [r7, #28]
 8005828:	440a      	add	r2, r1
 800582a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800582e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005832:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005840:	461a      	mov	r2, r3
 8005842:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005846:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005858:	0151      	lsls	r1, r2, #5
 800585a:	69fa      	ldr	r2, [r7, #28]
 800585c:	440a      	add	r2, r1
 800585e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005862:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005866:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005878:	0151      	lsls	r1, r2, #5
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	440a      	add	r2, r1
 800587e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005882:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005886:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588a:	3301      	adds	r3, #1
 800588c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005894:	429a      	cmp	r2, r3
 8005896:	d3b3      	bcc.n	8005800 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	69fa      	ldr	r2, [r7, #28]
 80058a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80058aa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d016      	beq.n	80058e2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058be:	69fa      	ldr	r2, [r7, #28]
 80058c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058c4:	f043 030b 	orr.w	r3, r3, #11
 80058c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d4:	69fa      	ldr	r2, [r7, #28]
 80058d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058da:	f043 030b 	orr.w	r3, r3, #11
 80058de:	6453      	str	r3, [r2, #68]	; 0x44
 80058e0:	e015      	b.n	800590e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80058f4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80058f8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	69fa      	ldr	r2, [r7, #28]
 8005904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005908:	f043 030b 	orr.w	r3, r3, #11
 800590c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69fa      	ldr	r2, [r7, #28]
 8005918:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800591c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005920:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6818      	ldr	r0, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005932:	461a      	mov	r2, r3
 8005934:	f002 fdea 	bl	800850c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695a      	ldr	r2, [r3, #20]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005946:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4618      	mov	r0, r3
 800594e:	f002 fd19 	bl	8008384 <USB_ReadInterrupts>
 8005952:	4603      	mov	r3, r0
 8005954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800595c:	d124      	bne.n	80059a8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f002 fdaf 	bl	80084c6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4618      	mov	r0, r3
 800596e:	f001 fd64 	bl	800743a <USB_GetDevSpeed>
 8005972:	4603      	mov	r3, r0
 8005974:	461a      	mov	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681c      	ldr	r4, [r3, #0]
 800597e:	f001 f9e9 	bl	8006d54 <HAL_RCC_GetHCLKFreq>
 8005982:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005988:	b2db      	uxtb	r3, r3
 800598a:	461a      	mov	r2, r3
 800598c:	4620      	mov	r0, r4
 800598e:	f001 fa63 	bl	8006e58 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f005 f8c3 	bl	800ab1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	695a      	ldr	r2, [r3, #20]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80059a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f002 fce9 	bl	8008384 <USB_ReadInterrupts>
 80059b2:	4603      	mov	r3, r0
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d10a      	bne.n	80059d2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f005 f8a0 	bl	800ab02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695a      	ldr	r2, [r3, #20]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f002 0208 	and.w	r2, r2, #8
 80059d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f002 fcd4 	bl	8008384 <USB_ReadInterrupts>
 80059dc:	4603      	mov	r3, r0
 80059de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e2:	2b80      	cmp	r3, #128	; 0x80
 80059e4:	d122      	bne.n	8005a2c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059f2:	2301      	movs	r3, #1
 80059f4:	627b      	str	r3, [r7, #36]	; 0x24
 80059f6:	e014      	b.n	8005a22 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80059f8:	6879      	ldr	r1, [r7, #4]
 80059fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059fc:	4613      	mov	r3, r2
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	4413      	add	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	440b      	add	r3, r1
 8005a06:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d105      	bne.n	8005a1c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	4619      	mov	r1, r3
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fb27 	bl	800606a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	3301      	adds	r3, #1
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d3e5      	bcc.n	80059f8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f002 fca7 	bl	8008384 <USB_ReadInterrupts>
 8005a36:	4603      	mov	r3, r0
 8005a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a40:	d13b      	bne.n	8005aba <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a42:	2301      	movs	r3, #1
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
 8005a46:	e02b      	b.n	8005aa0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a58:	6879      	ldr	r1, [r7, #4]
 8005a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	4413      	add	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	440b      	add	r3, r1
 8005a66:	3340      	adds	r3, #64	; 0x40
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d115      	bne.n	8005a9a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005a6e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	da12      	bge.n	8005a9a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a78:	4613      	mov	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	440b      	add	r3, r1
 8005a82:	333f      	adds	r3, #63	; 0x3f
 8005a84:	2201      	movs	r2, #1
 8005a86:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	4619      	mov	r1, r3
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fae8 	bl	800606a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d3ce      	bcc.n	8005a48 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695a      	ldr	r2, [r3, #20]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005ab8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f002 fc60 	bl	8008384 <USB_ReadInterrupts>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ace:	d155      	bne.n	8005b7c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ad4:	e045      	b.n	8005b62 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ae6:	6879      	ldr	r1, [r7, #4]
 8005ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aea:	4613      	mov	r3, r2
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	4413      	add	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	440b      	add	r3, r1
 8005af4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d12e      	bne.n	8005b5c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005afe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	da2b      	bge.n	8005b5c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005b10:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d121      	bne.n	8005b5c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10a      	bne.n	8005b5c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	69fa      	ldr	r2, [r7, #28]
 8005b50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b58:	6053      	str	r3, [r2, #4]
            break;
 8005b5a:	e007      	b.n	8005b6c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	3301      	adds	r3, #1
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d3b4      	bcc.n	8005ad6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	695a      	ldr	r2, [r3, #20]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005b7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f002 fbff 	bl	8008384 <USB_ReadInterrupts>
 8005b86:	4603      	mov	r3, r0
 8005b88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b90:	d10a      	bne.n	8005ba8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f005 f83a 	bl	800ac0c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695a      	ldr	r2, [r3, #20]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005ba6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f002 fbe9 	bl	8008384 <USB_ReadInterrupts>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b04      	cmp	r3, #4
 8005bba:	d115      	bne.n	8005be8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	f003 0304 	and.w	r3, r3, #4
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f005 f82a 	bl	800ac28 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6859      	ldr	r1, [r3, #4]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	605a      	str	r2, [r3, #4]
 8005be4:	e000      	b.n	8005be8 <HAL_PCD_IRQHandler+0x938>
      return;
 8005be6:	bf00      	nop
    }
  }
}
 8005be8:	3734      	adds	r7, #52	; 0x34
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd90      	pop	{r4, r7, pc}

08005bee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b082      	sub	sp, #8
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d101      	bne.n	8005c08 <HAL_PCD_SetAddress+0x1a>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e013      	b.n	8005c30 <HAL_PCD_SetAddress+0x42>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	78fa      	ldrb	r2, [r7, #3]
 8005c14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	78fa      	ldrb	r2, [r7, #3]
 8005c1e:	4611      	mov	r1, r2
 8005c20:	4618      	mov	r0, r3
 8005c22:	f002 fb47 	bl	80082b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	4608      	mov	r0, r1
 8005c42:	4611      	mov	r1, r2
 8005c44:	461a      	mov	r2, r3
 8005c46:	4603      	mov	r3, r0
 8005c48:	70fb      	strb	r3, [r7, #3]
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	803b      	strh	r3, [r7, #0]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	da0f      	bge.n	8005c7e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	f003 020f 	and.w	r2, r3, #15
 8005c64:	4613      	mov	r3, r2
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	4413      	add	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	3338      	adds	r3, #56	; 0x38
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	4413      	add	r3, r2
 8005c72:	3304      	adds	r3, #4
 8005c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	705a      	strb	r2, [r3, #1]
 8005c7c:	e00f      	b.n	8005c9e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c7e:	78fb      	ldrb	r3, [r7, #3]
 8005c80:	f003 020f 	and.w	r2, r3, #15
 8005c84:	4613      	mov	r3, r2
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	4413      	add	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	4413      	add	r3, r2
 8005c94:	3304      	adds	r3, #4
 8005c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005c9e:	78fb      	ldrb	r3, [r7, #3]
 8005ca0:	f003 030f 	and.w	r3, r3, #15
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005caa:	883a      	ldrh	r2, [r7, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	78ba      	ldrb	r2, [r7, #2]
 8005cb4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	785b      	ldrb	r3, [r3, #1]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d004      	beq.n	8005cc8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005cc8:	78bb      	ldrb	r3, [r7, #2]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d102      	bne.n	8005cd4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d101      	bne.n	8005ce2 <HAL_PCD_EP_Open+0xaa>
 8005cde:	2302      	movs	r3, #2
 8005ce0:	e00e      	b.n	8005d00 <HAL_PCD_EP_Open+0xc8>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68f9      	ldr	r1, [r7, #12]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f001 fbc7 	bl	8007484 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005cfe:	7afb      	ldrb	r3, [r7, #11]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	460b      	mov	r3, r1
 8005d12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	da0f      	bge.n	8005d3c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d1c:	78fb      	ldrb	r3, [r7, #3]
 8005d1e:	f003 020f 	and.w	r2, r3, #15
 8005d22:	4613      	mov	r3, r2
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	4413      	add	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	3338      	adds	r3, #56	; 0x38
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	4413      	add	r3, r2
 8005d30:	3304      	adds	r3, #4
 8005d32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2201      	movs	r2, #1
 8005d38:	705a      	strb	r2, [r3, #1]
 8005d3a:	e00f      	b.n	8005d5c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d3c:	78fb      	ldrb	r3, [r7, #3]
 8005d3e:	f003 020f 	and.w	r2, r3, #15
 8005d42:	4613      	mov	r3, r2
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	4413      	add	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	4413      	add	r3, r2
 8005d52:	3304      	adds	r3, #4
 8005d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005d5c:	78fb      	ldrb	r3, [r7, #3]
 8005d5e:	f003 030f 	and.w	r3, r3, #15
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d101      	bne.n	8005d76 <HAL_PCD_EP_Close+0x6e>
 8005d72:	2302      	movs	r3, #2
 8005d74:	e00e      	b.n	8005d94 <HAL_PCD_EP_Close+0x8c>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68f9      	ldr	r1, [r7, #12]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f001 fc05 	bl	8007594 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	607a      	str	r2, [r7, #4]
 8005da6:	603b      	str	r3, [r7, #0]
 8005da8:	460b      	mov	r3, r1
 8005daa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005dac:	7afb      	ldrb	r3, [r7, #11]
 8005dae:	f003 020f 	and.w	r2, r3, #15
 8005db2:	4613      	mov	r3, r2
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	4413      	add	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dde:	7afb      	ldrb	r3, [r7, #11]
 8005de0:	f003 030f 	and.w	r3, r3, #15
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d102      	bne.n	8005df8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005df8:	7afb      	ldrb	r3, [r7, #11]
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6818      	ldr	r0, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	6979      	ldr	r1, [r7, #20]
 8005e10:	f001 fee4 	bl	8007bdc <USB_EP0StartXfer>
 8005e14:	e008      	b.n	8005e28 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	461a      	mov	r2, r3
 8005e22:	6979      	ldr	r1, [r7, #20]
 8005e24:	f001 fc92 	bl	800774c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b083      	sub	sp, #12
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005e3e:	78fb      	ldrb	r3, [r7, #3]
 8005e40:	f003 020f 	and.w	r2, r3, #15
 8005e44:	6879      	ldr	r1, [r7, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	440b      	add	r3, r1
 8005e50:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005e54:	681b      	ldr	r3, [r3, #0]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b086      	sub	sp, #24
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	603b      	str	r3, [r7, #0]
 8005e6e:	460b      	mov	r3, r1
 8005e70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e72:	7afb      	ldrb	r3, [r7, #11]
 8005e74:	f003 020f 	and.w	r2, r3, #15
 8005e78:	4613      	mov	r3, r2
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	4413      	add	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	3338      	adds	r3, #56	; 0x38
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4413      	add	r3, r2
 8005e86:	3304      	adds	r3, #4
 8005e88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ea2:	7afb      	ldrb	r3, [r7, #11]
 8005ea4:	f003 030f 	and.w	r3, r3, #15
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d102      	bne.n	8005ebc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ebc:	7afb      	ldrb	r3, [r7, #11]
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d109      	bne.n	8005eda <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	6979      	ldr	r1, [r7, #20]
 8005ed4:	f001 fe82 	bl	8007bdc <USB_EP0StartXfer>
 8005ed8:	e008      	b.n	8005eec <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6818      	ldr	r0, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	6979      	ldr	r1, [r7, #20]
 8005ee8:	f001 fc30 	bl	800774c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b084      	sub	sp, #16
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	460b      	mov	r3, r1
 8005f00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005f02:	78fb      	ldrb	r3, [r7, #3]
 8005f04:	f003 020f 	and.w	r2, r3, #15
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d901      	bls.n	8005f14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e050      	b.n	8005fb6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	da0f      	bge.n	8005f3c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	f003 020f 	and.w	r2, r3, #15
 8005f22:	4613      	mov	r3, r2
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	4413      	add	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	3338      	adds	r3, #56	; 0x38
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	4413      	add	r3, r2
 8005f30:	3304      	adds	r3, #4
 8005f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2201      	movs	r2, #1
 8005f38:	705a      	strb	r2, [r3, #1]
 8005f3a:	e00d      	b.n	8005f58 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005f3c:	78fa      	ldrb	r2, [r7, #3]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	00db      	lsls	r3, r3, #3
 8005f42:	4413      	add	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	3304      	adds	r3, #4
 8005f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	f003 030f 	and.w	r3, r3, #15
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d101      	bne.n	8005f78 <HAL_PCD_EP_SetStall+0x82>
 8005f74:	2302      	movs	r3, #2
 8005f76:	e01e      	b.n	8005fb6 <HAL_PCD_EP_SetStall+0xc0>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68f9      	ldr	r1, [r7, #12]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f002 f8c0 	bl	800810c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f8c:	78fb      	ldrb	r3, [r7, #3]
 8005f8e:	f003 030f 	and.w	r3, r3, #15
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10a      	bne.n	8005fac <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6818      	ldr	r0, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	b2d9      	uxtb	r1, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f002 fab0 	bl	800850c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005fca:	78fb      	ldrb	r3, [r7, #3]
 8005fcc:	f003 020f 	and.w	r2, r3, #15
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d901      	bls.n	8005fdc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e042      	b.n	8006062 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005fdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	da0f      	bge.n	8006004 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	f003 020f 	and.w	r2, r3, #15
 8005fea:	4613      	mov	r3, r2
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	3338      	adds	r3, #56	; 0x38
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2201      	movs	r2, #1
 8006000:	705a      	strb	r2, [r3, #1]
 8006002:	e00f      	b.n	8006024 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	f003 020f 	and.w	r2, r3, #15
 800600a:	4613      	mov	r3, r2
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	4413      	add	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	4413      	add	r3, r2
 800601a:	3304      	adds	r3, #4
 800601c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800602a:	78fb      	ldrb	r3, [r7, #3]
 800602c:	f003 030f 	and.w	r3, r3, #15
 8006030:	b2da      	uxtb	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_PCD_EP_ClrStall+0x86>
 8006040:	2302      	movs	r3, #2
 8006042:	e00e      	b.n	8006062 <HAL_PCD_EP_ClrStall+0xa4>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68f9      	ldr	r1, [r7, #12]
 8006052:	4618      	mov	r0, r3
 8006054:	f002 f8c8 	bl	80081e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b084      	sub	sp, #16
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
 8006072:	460b      	mov	r3, r1
 8006074:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800607a:	2b00      	cmp	r3, #0
 800607c:	da0c      	bge.n	8006098 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800607e:	78fb      	ldrb	r3, [r7, #3]
 8006080:	f003 020f 	and.w	r2, r3, #15
 8006084:	4613      	mov	r3, r2
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	4413      	add	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	3338      	adds	r3, #56	; 0x38
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	4413      	add	r3, r2
 8006092:	3304      	adds	r3, #4
 8006094:	60fb      	str	r3, [r7, #12]
 8006096:	e00c      	b.n	80060b2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	f003 020f 	and.w	r2, r3, #15
 800609e:	4613      	mov	r3, r2
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	4413      	add	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	4413      	add	r3, r2
 80060ae:	3304      	adds	r3, #4
 80060b0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68f9      	ldr	r1, [r7, #12]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f001 fee7 	bl	8007e8c <USB_EPStopXfer>
 80060be:	4603      	mov	r3, r0
 80060c0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80060c2:	7afb      	ldrb	r3, [r7, #11]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08a      	sub	sp, #40	; 0x28
 80060d0:	af02      	add	r7, sp, #8
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	4613      	mov	r3, r2
 80060e4:	00db      	lsls	r3, r3, #3
 80060e6:	4413      	add	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	3338      	adds	r3, #56	; 0x38
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	4413      	add	r3, r2
 80060f0:	3304      	adds	r3, #4
 80060f2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6a1a      	ldr	r2, [r3, #32]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d901      	bls.n	8006104 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e06c      	b.n	80061de <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	699a      	ldr	r2, [r3, #24]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	69fa      	ldr	r2, [r7, #28]
 8006116:	429a      	cmp	r2, r3
 8006118:	d902      	bls.n	8006120 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	3303      	adds	r3, #3
 8006124:	089b      	lsrs	r3, r3, #2
 8006126:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006128:	e02b      	b.n	8006182 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	699a      	ldr	r2, [r3, #24]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	69fa      	ldr	r2, [r7, #28]
 800613c:	429a      	cmp	r2, r3
 800613e:	d902      	bls.n	8006146 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	3303      	adds	r3, #3
 800614a:	089b      	lsrs	r3, r3, #2
 800614c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6919      	ldr	r1, [r3, #16]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	b2da      	uxtb	r2, r3
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800615e:	b2db      	uxtb	r3, r3
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	4603      	mov	r3, r0
 8006164:	6978      	ldr	r0, [r7, #20]
 8006166:	f001 ff3b 	bl	8007fe0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	691a      	ldr	r2, [r3, #16]
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	441a      	add	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a1a      	ldr	r2, [r3, #32]
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	441a      	add	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	b29b      	uxth	r3, r3
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	429a      	cmp	r2, r3
 8006196:	d809      	bhi.n	80061ac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6a1a      	ldr	r2, [r3, #32]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d203      	bcs.n	80061ac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1be      	bne.n	800612a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	699a      	ldr	r2, [r3, #24]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d811      	bhi.n	80061dc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	f003 030f 	and.w	r3, r3, #15
 80061be:	2201      	movs	r2, #1
 80061c0:	fa02 f303 	lsl.w	r3, r2, r3
 80061c4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	43db      	mvns	r3, r3
 80061d2:	6939      	ldr	r1, [r7, #16]
 80061d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061d8:	4013      	ands	r3, r2
 80061da:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3720      	adds	r7, #32
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b088      	sub	sp, #32
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	333c      	adds	r3, #60	; 0x3c
 8006200:	3304      	adds	r3, #4
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d17b      	bne.n	8006316 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f003 0308 	and.w	r3, r3, #8
 8006224:	2b00      	cmp	r3, #0
 8006226:	d015      	beq.n	8006254 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	4a61      	ldr	r2, [pc, #388]	; (80063b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800622c:	4293      	cmp	r3, r2
 800622e:	f240 80b9 	bls.w	80063a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 80b3 	beq.w	80063a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624a:	461a      	mov	r2, r3
 800624c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006250:	6093      	str	r3, [r2, #8]
 8006252:	e0a7      	b.n	80063a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f003 0320 	and.w	r3, r3, #32
 800625a:	2b00      	cmp	r3, #0
 800625c:	d009      	beq.n	8006272 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626a:	461a      	mov	r2, r3
 800626c:	2320      	movs	r3, #32
 800626e:	6093      	str	r3, [r2, #8]
 8006270:	e098      	b.n	80063a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006278:	2b00      	cmp	r3, #0
 800627a:	f040 8093 	bne.w	80063a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	4a4b      	ldr	r2, [pc, #300]	; (80063b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d90f      	bls.n	80062a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00a      	beq.n	80062a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800629c:	461a      	mov	r2, r3
 800629e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062a2:	6093      	str	r3, [r2, #8]
 80062a4:	e07e      	b.n	80063a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	4613      	mov	r3, r2
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	4413      	add	r3, r2
 80062b8:	3304      	adds	r3, #4
 80062ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	69da      	ldr	r2, [r3, #28]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	0159      	lsls	r1, r3, #5
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	440b      	add	r3, r1
 80062c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062d2:	1ad2      	subs	r2, r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d114      	bne.n	8006308 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d109      	bne.n	80062fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6818      	ldr	r0, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80062f0:	461a      	mov	r2, r3
 80062f2:	2101      	movs	r1, #1
 80062f4:	f002 f90a 	bl	800850c <USB_EP0_OutStart>
 80062f8:	e006      	b.n	8006308 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	691a      	ldr	r2, [r3, #16]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	441a      	add	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	b2db      	uxtb	r3, r3
 800630c:	4619      	mov	r1, r3
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f004 fbc2 	bl	800aa98 <HAL_PCD_DataOutStageCallback>
 8006314:	e046      	b.n	80063a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	4a26      	ldr	r2, [pc, #152]	; (80063b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d124      	bne.n	8006368 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00a      	beq.n	800633e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006334:	461a      	mov	r2, r3
 8006336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800633a:	6093      	str	r3, [r2, #8]
 800633c:	e032      	b.n	80063a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f003 0320 	and.w	r3, r3, #32
 8006344:	2b00      	cmp	r3, #0
 8006346:	d008      	beq.n	800635a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006354:	461a      	mov	r2, r3
 8006356:	2320      	movs	r3, #32
 8006358:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	4619      	mov	r1, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f004 fb99 	bl	800aa98 <HAL_PCD_DataOutStageCallback>
 8006366:	e01d      	b.n	80063a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d114      	bne.n	8006398 <PCD_EP_OutXfrComplete_int+0x1b0>
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	4613      	mov	r3, r2
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	4413      	add	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	440b      	add	r3, r1
 800637c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d108      	bne.n	8006398 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6818      	ldr	r0, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006390:	461a      	mov	r2, r3
 8006392:	2100      	movs	r1, #0
 8006394:	f002 f8ba 	bl	800850c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	b2db      	uxtb	r3, r3
 800639c:	4619      	mov	r1, r3
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f004 fb7a 	bl	800aa98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3720      	adds	r7, #32
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	4f54300a 	.word	0x4f54300a
 80063b4:	4f54310a 	.word	0x4f54310a

080063b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	333c      	adds	r3, #60	; 0x3c
 80063d0:	3304      	adds	r3, #4
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	4a15      	ldr	r2, [pc, #84]	; (8006440 <PCD_EP_OutSetupPacket_int+0x88>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d90e      	bls.n	800640c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d009      	beq.n	800640c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006404:	461a      	mov	r2, r3
 8006406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800640a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f004 fb31 	bl	800aa74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	4a0a      	ldr	r2, [pc, #40]	; (8006440 <PCD_EP_OutSetupPacket_int+0x88>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d90c      	bls.n	8006434 <PCD_EP_OutSetupPacket_int+0x7c>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d108      	bne.n	8006434 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6818      	ldr	r0, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800642c:	461a      	mov	r2, r3
 800642e:	2101      	movs	r1, #1
 8006430:	f002 f86c 	bl	800850c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	4f54300a 	.word	0x4f54300a

08006444 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	460b      	mov	r3, r1
 800644e:	70fb      	strb	r3, [r7, #3]
 8006450:	4613      	mov	r3, r2
 8006452:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800645c:	78fb      	ldrb	r3, [r7, #3]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d107      	bne.n	8006472 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006462:	883b      	ldrh	r3, [r7, #0]
 8006464:	0419      	lsls	r1, r3, #16
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	430a      	orrs	r2, r1
 800646e:	629a      	str	r2, [r3, #40]	; 0x28
 8006470:	e028      	b.n	80064c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006478:	0c1b      	lsrs	r3, r3, #16
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	4413      	add	r3, r2
 800647e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006480:	2300      	movs	r3, #0
 8006482:	73fb      	strb	r3, [r7, #15]
 8006484:	e00d      	b.n	80064a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	7bfb      	ldrb	r3, [r7, #15]
 800648c:	3340      	adds	r3, #64	; 0x40
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	0c1b      	lsrs	r3, r3, #16
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	4413      	add	r3, r2
 800649a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800649c:	7bfb      	ldrb	r3, [r7, #15]
 800649e:	3301      	adds	r3, #1
 80064a0:	73fb      	strb	r3, [r7, #15]
 80064a2:	7bfa      	ldrb	r2, [r7, #15]
 80064a4:	78fb      	ldrb	r3, [r7, #3]
 80064a6:	3b01      	subs	r3, #1
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d3ec      	bcc.n	8006486 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80064ac:	883b      	ldrh	r3, [r7, #0]
 80064ae:	0418      	lsls	r0, r3, #16
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6819      	ldr	r1, [r3, #0]
 80064b4:	78fb      	ldrb	r3, [r7, #3]
 80064b6:	3b01      	subs	r3, #1
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	4302      	orrs	r2, r0
 80064bc:	3340      	adds	r3, #64	; 0x40
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	440b      	add	r3, r1
 80064c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b083      	sub	sp, #12
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	460b      	mov	r3, r1
 80064dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	887a      	ldrh	r2, [r7, #2]
 80064e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	460b      	mov	r3, r1
 80064fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e267      	b.n	80069ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	d075      	beq.n	8006616 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800652a:	4b88      	ldr	r3, [pc, #544]	; (800674c <HAL_RCC_OscConfig+0x240>)
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f003 030c 	and.w	r3, r3, #12
 8006532:	2b04      	cmp	r3, #4
 8006534:	d00c      	beq.n	8006550 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006536:	4b85      	ldr	r3, [pc, #532]	; (800674c <HAL_RCC_OscConfig+0x240>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800653e:	2b08      	cmp	r3, #8
 8006540:	d112      	bne.n	8006568 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006542:	4b82      	ldr	r3, [pc, #520]	; (800674c <HAL_RCC_OscConfig+0x240>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800654a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800654e:	d10b      	bne.n	8006568 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006550:	4b7e      	ldr	r3, [pc, #504]	; (800674c <HAL_RCC_OscConfig+0x240>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d05b      	beq.n	8006614 <HAL_RCC_OscConfig+0x108>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d157      	bne.n	8006614 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e242      	b.n	80069ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006570:	d106      	bne.n	8006580 <HAL_RCC_OscConfig+0x74>
 8006572:	4b76      	ldr	r3, [pc, #472]	; (800674c <HAL_RCC_OscConfig+0x240>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a75      	ldr	r2, [pc, #468]	; (800674c <HAL_RCC_OscConfig+0x240>)
 8006578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	e01d      	b.n	80065bc <HAL_RCC_OscConfig+0xb0>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006588:	d10c      	bne.n	80065a4 <HAL_RCC_OscConfig+0x98>
 800658a:	4b70      	ldr	r3, [pc, #448]	; (800674c <HAL_RCC_OscConfig+0x240>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a6f      	ldr	r2, [pc, #444]	; (800674c <HAL_RCC_OscConfig+0x240>)
 8006590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	4b6d      	ldr	r3, [pc, #436]	; (800674c <HAL_RCC_OscConfig+0x240>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a6c      	ldr	r2, [pc, #432]	; (800674c <HAL_RCC_OscConfig+0x240>)
 800659c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065a0:	6013      	str	r3, [r2, #0]
 80065a2:	e00b      	b.n	80065bc <HAL_RCC_OscConfig+0xb0>
 80065a4:	4b69      	ldr	r3, [pc, #420]	; (800674c <HAL_RCC_OscConfig+0x240>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a68      	ldr	r2, [pc, #416]	; (800674c <HAL_RCC_OscConfig+0x240>)
 80065aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ae:	6013      	str	r3, [r2, #0]
 80065b0:	4b66      	ldr	r3, [pc, #408]	; (800674c <HAL_RCC_OscConfig+0x240>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a65      	ldr	r2, [pc, #404]	; (800674c <HAL_RCC_OscConfig+0x240>)
 80065b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d013      	beq.n	80065ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065c4:	f7fb fce0 	bl	8001f88 <HAL_GetTick>
 80065c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ca:	e008      	b.n	80065de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065cc:	f7fb fcdc 	bl	8001f88 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b64      	cmp	r3, #100	; 0x64
 80065d8:	d901      	bls.n	80065de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e207      	b.n	80069ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065de:	4b5b      	ldr	r3, [pc, #364]	; (800674c <HAL_RCC_OscConfig+0x240>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d0f0      	beq.n	80065cc <HAL_RCC_OscConfig+0xc0>
 80065ea:	e014      	b.n	8006616 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ec:	f7fb fccc 	bl	8001f88 <HAL_GetTick>
 80065f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065f2:	e008      	b.n	8006606 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065f4:	f7fb fcc8 	bl	8001f88 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b64      	cmp	r3, #100	; 0x64
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e1f3      	b.n	80069ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006606:	4b51      	ldr	r3, [pc, #324]	; (800674c <HAL_RCC_OscConfig+0x240>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1f0      	bne.n	80065f4 <HAL_RCC_OscConfig+0xe8>
 8006612:	e000      	b.n	8006616 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d063      	beq.n	80066ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006622:	4b4a      	ldr	r3, [pc, #296]	; (800674c <HAL_RCC_OscConfig+0x240>)
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f003 030c 	and.w	r3, r3, #12
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00b      	beq.n	8006646 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800662e:	4b47      	ldr	r3, [pc, #284]	; (800674c <HAL_RCC_OscConfig+0x240>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006636:	2b08      	cmp	r3, #8
 8006638:	d11c      	bne.n	8006674 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800663a:	4b44      	ldr	r3, [pc, #272]	; (800674c <HAL_RCC_OscConfig+0x240>)
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d116      	bne.n	8006674 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006646:	4b41      	ldr	r3, [pc, #260]	; (800674c <HAL_RCC_OscConfig+0x240>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d005      	beq.n	800665e <HAL_RCC_OscConfig+0x152>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d001      	beq.n	800665e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e1c7      	b.n	80069ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800665e:	4b3b      	ldr	r3, [pc, #236]	; (800674c <HAL_RCC_OscConfig+0x240>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	00db      	lsls	r3, r3, #3
 800666c:	4937      	ldr	r1, [pc, #220]	; (800674c <HAL_RCC_OscConfig+0x240>)
 800666e:	4313      	orrs	r3, r2
 8006670:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006672:	e03a      	b.n	80066ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d020      	beq.n	80066be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800667c:	4b34      	ldr	r3, [pc, #208]	; (8006750 <HAL_RCC_OscConfig+0x244>)
 800667e:	2201      	movs	r2, #1
 8006680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006682:	f7fb fc81 	bl	8001f88 <HAL_GetTick>
 8006686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006688:	e008      	b.n	800669c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800668a:	f7fb fc7d 	bl	8001f88 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d901      	bls.n	800669c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e1a8      	b.n	80069ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800669c:	4b2b      	ldr	r3, [pc, #172]	; (800674c <HAL_RCC_OscConfig+0x240>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0f0      	beq.n	800668a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a8:	4b28      	ldr	r3, [pc, #160]	; (800674c <HAL_RCC_OscConfig+0x240>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	4925      	ldr	r1, [pc, #148]	; (800674c <HAL_RCC_OscConfig+0x240>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	600b      	str	r3, [r1, #0]
 80066bc:	e015      	b.n	80066ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066be:	4b24      	ldr	r3, [pc, #144]	; (8006750 <HAL_RCC_OscConfig+0x244>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c4:	f7fb fc60 	bl	8001f88 <HAL_GetTick>
 80066c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066ca:	e008      	b.n	80066de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066cc:	f7fb fc5c 	bl	8001f88 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e187      	b.n	80069ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066de:	4b1b      	ldr	r3, [pc, #108]	; (800674c <HAL_RCC_OscConfig+0x240>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1f0      	bne.n	80066cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d036      	beq.n	8006764 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d016      	beq.n	800672c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066fe:	4b15      	ldr	r3, [pc, #84]	; (8006754 <HAL_RCC_OscConfig+0x248>)
 8006700:	2201      	movs	r2, #1
 8006702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006704:	f7fb fc40 	bl	8001f88 <HAL_GetTick>
 8006708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800670a:	e008      	b.n	800671e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800670c:	f7fb fc3c 	bl	8001f88 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e167      	b.n	80069ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800671e:	4b0b      	ldr	r3, [pc, #44]	; (800674c <HAL_RCC_OscConfig+0x240>)
 8006720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0f0      	beq.n	800670c <HAL_RCC_OscConfig+0x200>
 800672a:	e01b      	b.n	8006764 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800672c:	4b09      	ldr	r3, [pc, #36]	; (8006754 <HAL_RCC_OscConfig+0x248>)
 800672e:	2200      	movs	r2, #0
 8006730:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006732:	f7fb fc29 	bl	8001f88 <HAL_GetTick>
 8006736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006738:	e00e      	b.n	8006758 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800673a:	f7fb fc25 	bl	8001f88 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	2b02      	cmp	r3, #2
 8006746:	d907      	bls.n	8006758 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e150      	b.n	80069ee <HAL_RCC_OscConfig+0x4e2>
 800674c:	40023800 	.word	0x40023800
 8006750:	42470000 	.word	0x42470000
 8006754:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006758:	4b88      	ldr	r3, [pc, #544]	; (800697c <HAL_RCC_OscConfig+0x470>)
 800675a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675c:	f003 0302 	and.w	r3, r3, #2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1ea      	bne.n	800673a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 8097 	beq.w	80068a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006772:	2300      	movs	r3, #0
 8006774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006776:	4b81      	ldr	r3, [pc, #516]	; (800697c <HAL_RCC_OscConfig+0x470>)
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10f      	bne.n	80067a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006782:	2300      	movs	r3, #0
 8006784:	60bb      	str	r3, [r7, #8]
 8006786:	4b7d      	ldr	r3, [pc, #500]	; (800697c <HAL_RCC_OscConfig+0x470>)
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	4a7c      	ldr	r2, [pc, #496]	; (800697c <HAL_RCC_OscConfig+0x470>)
 800678c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006790:	6413      	str	r3, [r2, #64]	; 0x40
 8006792:	4b7a      	ldr	r3, [pc, #488]	; (800697c <HAL_RCC_OscConfig+0x470>)
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800679a:	60bb      	str	r3, [r7, #8]
 800679c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800679e:	2301      	movs	r3, #1
 80067a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067a2:	4b77      	ldr	r3, [pc, #476]	; (8006980 <HAL_RCC_OscConfig+0x474>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d118      	bne.n	80067e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067ae:	4b74      	ldr	r3, [pc, #464]	; (8006980 <HAL_RCC_OscConfig+0x474>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a73      	ldr	r2, [pc, #460]	; (8006980 <HAL_RCC_OscConfig+0x474>)
 80067b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067ba:	f7fb fbe5 	bl	8001f88 <HAL_GetTick>
 80067be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067c0:	e008      	b.n	80067d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067c2:	f7fb fbe1 	bl	8001f88 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d901      	bls.n	80067d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e10c      	b.n	80069ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067d4:	4b6a      	ldr	r3, [pc, #424]	; (8006980 <HAL_RCC_OscConfig+0x474>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0f0      	beq.n	80067c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d106      	bne.n	80067f6 <HAL_RCC_OscConfig+0x2ea>
 80067e8:	4b64      	ldr	r3, [pc, #400]	; (800697c <HAL_RCC_OscConfig+0x470>)
 80067ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ec:	4a63      	ldr	r2, [pc, #396]	; (800697c <HAL_RCC_OscConfig+0x470>)
 80067ee:	f043 0301 	orr.w	r3, r3, #1
 80067f2:	6713      	str	r3, [r2, #112]	; 0x70
 80067f4:	e01c      	b.n	8006830 <HAL_RCC_OscConfig+0x324>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	2b05      	cmp	r3, #5
 80067fc:	d10c      	bne.n	8006818 <HAL_RCC_OscConfig+0x30c>
 80067fe:	4b5f      	ldr	r3, [pc, #380]	; (800697c <HAL_RCC_OscConfig+0x470>)
 8006800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006802:	4a5e      	ldr	r2, [pc, #376]	; (800697c <HAL_RCC_OscConfig+0x470>)
 8006804:	f043 0304 	orr.w	r3, r3, #4
 8006808:	6713      	str	r3, [r2, #112]	; 0x70
 800680a:	4b5c      	ldr	r3, [pc, #368]	; (800697c <HAL_RCC_OscConfig+0x470>)
 800680c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680e:	4a5b      	ldr	r2, [pc, #364]	; (800697c <HAL_RCC_OscConfig+0x470>)
 8006810:	f043 0301 	orr.w	r3, r3, #1
 8006814:	6713      	str	r3, [r2, #112]	; 0x70
 8006816:	e00b      	b.n	8006830 <HAL_RCC_OscConfig+0x324>
 8006818:	4b58      	ldr	r3, [pc, #352]	; (800697c <HAL_RCC_OscConfig+0x470>)
 800681a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681c:	4a57      	ldr	r2, [pc, #348]	; (800697c <HAL_RCC_OscConfig+0x470>)
 800681e:	f023 0301 	bic.w	r3, r3, #1
 8006822:	6713      	str	r3, [r2, #112]	; 0x70
 8006824:	4b55      	ldr	r3, [pc, #340]	; (800697c <HAL_RCC_OscConfig+0x470>)
 8006826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006828:	4a54      	ldr	r2, [pc, #336]	; (800697c <HAL_RCC_OscConfig+0x470>)
 800682a:	f023 0304 	bic.w	r3, r3, #4
 800682e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d015      	beq.n	8006864 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006838:	f7fb fba6 	bl	8001f88 <HAL_GetTick>
 800683c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800683e:	e00a      	b.n	8006856 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006840:	f7fb fba2 	bl	8001f88 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	f241 3288 	movw	r2, #5000	; 0x1388
 800684e:	4293      	cmp	r3, r2
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e0cb      	b.n	80069ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006856:	4b49      	ldr	r3, [pc, #292]	; (800697c <HAL_RCC_OscConfig+0x470>)
 8006858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d0ee      	beq.n	8006840 <HAL_RCC_OscConfig+0x334>
 8006862:	e014      	b.n	800688e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006864:	f7fb fb90 	bl	8001f88 <HAL_GetTick>
 8006868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800686a:	e00a      	b.n	8006882 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800686c:	f7fb fb8c 	bl	8001f88 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	f241 3288 	movw	r2, #5000	; 0x1388
 800687a:	4293      	cmp	r3, r2
 800687c:	d901      	bls.n	8006882 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e0b5      	b.n	80069ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006882:	4b3e      	ldr	r3, [pc, #248]	; (800697c <HAL_RCC_OscConfig+0x470>)
 8006884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1ee      	bne.n	800686c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800688e:	7dfb      	ldrb	r3, [r7, #23]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d105      	bne.n	80068a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006894:	4b39      	ldr	r3, [pc, #228]	; (800697c <HAL_RCC_OscConfig+0x470>)
 8006896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006898:	4a38      	ldr	r2, [pc, #224]	; (800697c <HAL_RCC_OscConfig+0x470>)
 800689a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800689e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 80a1 	beq.w	80069ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068aa:	4b34      	ldr	r3, [pc, #208]	; (800697c <HAL_RCC_OscConfig+0x470>)
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f003 030c 	and.w	r3, r3, #12
 80068b2:	2b08      	cmp	r3, #8
 80068b4:	d05c      	beq.n	8006970 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d141      	bne.n	8006942 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068be:	4b31      	ldr	r3, [pc, #196]	; (8006984 <HAL_RCC_OscConfig+0x478>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c4:	f7fb fb60 	bl	8001f88 <HAL_GetTick>
 80068c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068ca:	e008      	b.n	80068de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068cc:	f7fb fb5c 	bl	8001f88 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d901      	bls.n	80068de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e087      	b.n	80069ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068de:	4b27      	ldr	r3, [pc, #156]	; (800697c <HAL_RCC_OscConfig+0x470>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1f0      	bne.n	80068cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	69da      	ldr	r2, [r3, #28]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	431a      	orrs	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f8:	019b      	lsls	r3, r3, #6
 80068fa:	431a      	orrs	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006900:	085b      	lsrs	r3, r3, #1
 8006902:	3b01      	subs	r3, #1
 8006904:	041b      	lsls	r3, r3, #16
 8006906:	431a      	orrs	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690c:	061b      	lsls	r3, r3, #24
 800690e:	491b      	ldr	r1, [pc, #108]	; (800697c <HAL_RCC_OscConfig+0x470>)
 8006910:	4313      	orrs	r3, r2
 8006912:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006914:	4b1b      	ldr	r3, [pc, #108]	; (8006984 <HAL_RCC_OscConfig+0x478>)
 8006916:	2201      	movs	r2, #1
 8006918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800691a:	f7fb fb35 	bl	8001f88 <HAL_GetTick>
 800691e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006920:	e008      	b.n	8006934 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006922:	f7fb fb31 	bl	8001f88 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d901      	bls.n	8006934 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e05c      	b.n	80069ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006934:	4b11      	ldr	r3, [pc, #68]	; (800697c <HAL_RCC_OscConfig+0x470>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0f0      	beq.n	8006922 <HAL_RCC_OscConfig+0x416>
 8006940:	e054      	b.n	80069ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006942:	4b10      	ldr	r3, [pc, #64]	; (8006984 <HAL_RCC_OscConfig+0x478>)
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006948:	f7fb fb1e 	bl	8001f88 <HAL_GetTick>
 800694c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800694e:	e008      	b.n	8006962 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006950:	f7fb fb1a 	bl	8001f88 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	2b02      	cmp	r3, #2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e045      	b.n	80069ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006962:	4b06      	ldr	r3, [pc, #24]	; (800697c <HAL_RCC_OscConfig+0x470>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1f0      	bne.n	8006950 <HAL_RCC_OscConfig+0x444>
 800696e:	e03d      	b.n	80069ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d107      	bne.n	8006988 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e038      	b.n	80069ee <HAL_RCC_OscConfig+0x4e2>
 800697c:	40023800 	.word	0x40023800
 8006980:	40007000 	.word	0x40007000
 8006984:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006988:	4b1b      	ldr	r3, [pc, #108]	; (80069f8 <HAL_RCC_OscConfig+0x4ec>)
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d028      	beq.n	80069e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d121      	bne.n	80069e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d11a      	bne.n	80069e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80069b8:	4013      	ands	r3, r2
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80069be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d111      	bne.n	80069e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ce:	085b      	lsrs	r3, r3, #1
 80069d0:	3b01      	subs	r3, #1
 80069d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d107      	bne.n	80069e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d001      	beq.n	80069ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e000      	b.n	80069ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	40023800 	.word	0x40023800

080069fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e0cc      	b.n	8006baa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a10:	4b68      	ldr	r3, [pc, #416]	; (8006bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0307 	and.w	r3, r3, #7
 8006a18:	683a      	ldr	r2, [r7, #0]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d90c      	bls.n	8006a38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a1e:	4b65      	ldr	r3, [pc, #404]	; (8006bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a20:	683a      	ldr	r2, [r7, #0]
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a26:	4b63      	ldr	r3, [pc, #396]	; (8006bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0307 	and.w	r3, r3, #7
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d001      	beq.n	8006a38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e0b8      	b.n	8006baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d020      	beq.n	8006a86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d005      	beq.n	8006a5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a50:	4b59      	ldr	r3, [pc, #356]	; (8006bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	4a58      	ldr	r2, [pc, #352]	; (8006bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0308 	and.w	r3, r3, #8
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d005      	beq.n	8006a74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a68:	4b53      	ldr	r3, [pc, #332]	; (8006bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	4a52      	ldr	r2, [pc, #328]	; (8006bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a74:	4b50      	ldr	r3, [pc, #320]	; (8006bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	494d      	ldr	r1, [pc, #308]	; (8006bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d044      	beq.n	8006b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d107      	bne.n	8006aaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a9a:	4b47      	ldr	r3, [pc, #284]	; (8006bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d119      	bne.n	8006ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e07f      	b.n	8006baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d003      	beq.n	8006aba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	d107      	bne.n	8006aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aba:	4b3f      	ldr	r3, [pc, #252]	; (8006bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d109      	bne.n	8006ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e06f      	b.n	8006baa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aca:	4b3b      	ldr	r3, [pc, #236]	; (8006bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e067      	b.n	8006baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ada:	4b37      	ldr	r3, [pc, #220]	; (8006bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f023 0203 	bic.w	r2, r3, #3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	4934      	ldr	r1, [pc, #208]	; (8006bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006aec:	f7fb fa4c 	bl	8001f88 <HAL_GetTick>
 8006af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006af2:	e00a      	b.n	8006b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006af4:	f7fb fa48 	bl	8001f88 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d901      	bls.n	8006b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e04f      	b.n	8006baa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b0a:	4b2b      	ldr	r3, [pc, #172]	; (8006bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f003 020c 	and.w	r2, r3, #12
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d1eb      	bne.n	8006af4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b1c:	4b25      	ldr	r3, [pc, #148]	; (8006bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0307 	and.w	r3, r3, #7
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d20c      	bcs.n	8006b44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b2a:	4b22      	ldr	r3, [pc, #136]	; (8006bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b2c:	683a      	ldr	r2, [r7, #0]
 8006b2e:	b2d2      	uxtb	r2, r2
 8006b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b32:	4b20      	ldr	r3, [pc, #128]	; (8006bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0307 	and.w	r3, r3, #7
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d001      	beq.n	8006b44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e032      	b.n	8006baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0304 	and.w	r3, r3, #4
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d008      	beq.n	8006b62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b50:	4b19      	ldr	r3, [pc, #100]	; (8006bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	4916      	ldr	r1, [pc, #88]	; (8006bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0308 	and.w	r3, r3, #8
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d009      	beq.n	8006b82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b6e:	4b12      	ldr	r3, [pc, #72]	; (8006bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	490e      	ldr	r1, [pc, #56]	; (8006bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b82:	f000 f821 	bl	8006bc8 <HAL_RCC_GetSysClockFreq>
 8006b86:	4602      	mov	r2, r0
 8006b88:	4b0b      	ldr	r3, [pc, #44]	; (8006bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	091b      	lsrs	r3, r3, #4
 8006b8e:	f003 030f 	and.w	r3, r3, #15
 8006b92:	490a      	ldr	r1, [pc, #40]	; (8006bbc <HAL_RCC_ClockConfig+0x1c0>)
 8006b94:	5ccb      	ldrb	r3, [r1, r3]
 8006b96:	fa22 f303 	lsr.w	r3, r2, r3
 8006b9a:	4a09      	ldr	r2, [pc, #36]	; (8006bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b9e:	4b09      	ldr	r3, [pc, #36]	; (8006bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7fb f9ac 	bl	8001f00 <HAL_InitTick>

  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	40023c00 	.word	0x40023c00
 8006bb8:	40023800 	.word	0x40023800
 8006bbc:	0800e40c 	.word	0x0800e40c
 8006bc0:	20000014 	.word	0x20000014
 8006bc4:	20000018 	.word	0x20000018

08006bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bcc:	b090      	sub	sp, #64	; 0x40
 8006bce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bd8:	2300      	movs	r3, #0
 8006bda:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006be0:	4b59      	ldr	r3, [pc, #356]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f003 030c 	and.w	r3, r3, #12
 8006be8:	2b08      	cmp	r3, #8
 8006bea:	d00d      	beq.n	8006c08 <HAL_RCC_GetSysClockFreq+0x40>
 8006bec:	2b08      	cmp	r3, #8
 8006bee:	f200 80a1 	bhi.w	8006d34 <HAL_RCC_GetSysClockFreq+0x16c>
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d002      	beq.n	8006bfc <HAL_RCC_GetSysClockFreq+0x34>
 8006bf6:	2b04      	cmp	r3, #4
 8006bf8:	d003      	beq.n	8006c02 <HAL_RCC_GetSysClockFreq+0x3a>
 8006bfa:	e09b      	b.n	8006d34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006bfc:	4b53      	ldr	r3, [pc, #332]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x184>)
 8006bfe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006c00:	e09b      	b.n	8006d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c02:	4b53      	ldr	r3, [pc, #332]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006c06:	e098      	b.n	8006d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c08:	4b4f      	ldr	r3, [pc, #316]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c10:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c12:	4b4d      	ldr	r3, [pc, #308]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d028      	beq.n	8006c70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c1e:	4b4a      	ldr	r3, [pc, #296]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	099b      	lsrs	r3, r3, #6
 8006c24:	2200      	movs	r2, #0
 8006c26:	623b      	str	r3, [r7, #32]
 8006c28:	627a      	str	r2, [r7, #36]	; 0x24
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006c30:	2100      	movs	r1, #0
 8006c32:	4b47      	ldr	r3, [pc, #284]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c34:	fb03 f201 	mul.w	r2, r3, r1
 8006c38:	2300      	movs	r3, #0
 8006c3a:	fb00 f303 	mul.w	r3, r0, r3
 8006c3e:	4413      	add	r3, r2
 8006c40:	4a43      	ldr	r2, [pc, #268]	; (8006d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c42:	fba0 1202 	umull	r1, r2, r0, r2
 8006c46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c48:	460a      	mov	r2, r1
 8006c4a:	62ba      	str	r2, [r7, #40]	; 0x28
 8006c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c4e:	4413      	add	r3, r2
 8006c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c54:	2200      	movs	r2, #0
 8006c56:	61bb      	str	r3, [r7, #24]
 8006c58:	61fa      	str	r2, [r7, #28]
 8006c5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006c62:	f7f9 ffa9 	bl	8000bb8 <__aeabi_uldivmod>
 8006c66:	4602      	mov	r2, r0
 8006c68:	460b      	mov	r3, r1
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c6e:	e053      	b.n	8006d18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c70:	4b35      	ldr	r3, [pc, #212]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	099b      	lsrs	r3, r3, #6
 8006c76:	2200      	movs	r2, #0
 8006c78:	613b      	str	r3, [r7, #16]
 8006c7a:	617a      	str	r2, [r7, #20]
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006c82:	f04f 0b00 	mov.w	fp, #0
 8006c86:	4652      	mov	r2, sl
 8006c88:	465b      	mov	r3, fp
 8006c8a:	f04f 0000 	mov.w	r0, #0
 8006c8e:	f04f 0100 	mov.w	r1, #0
 8006c92:	0159      	lsls	r1, r3, #5
 8006c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c98:	0150      	lsls	r0, r2, #5
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	ebb2 080a 	subs.w	r8, r2, sl
 8006ca2:	eb63 090b 	sbc.w	r9, r3, fp
 8006ca6:	f04f 0200 	mov.w	r2, #0
 8006caa:	f04f 0300 	mov.w	r3, #0
 8006cae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006cb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006cb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006cba:	ebb2 0408 	subs.w	r4, r2, r8
 8006cbe:	eb63 0509 	sbc.w	r5, r3, r9
 8006cc2:	f04f 0200 	mov.w	r2, #0
 8006cc6:	f04f 0300 	mov.w	r3, #0
 8006cca:	00eb      	lsls	r3, r5, #3
 8006ccc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cd0:	00e2      	lsls	r2, r4, #3
 8006cd2:	4614      	mov	r4, r2
 8006cd4:	461d      	mov	r5, r3
 8006cd6:	eb14 030a 	adds.w	r3, r4, sl
 8006cda:	603b      	str	r3, [r7, #0]
 8006cdc:	eb45 030b 	adc.w	r3, r5, fp
 8006ce0:	607b      	str	r3, [r7, #4]
 8006ce2:	f04f 0200 	mov.w	r2, #0
 8006ce6:	f04f 0300 	mov.w	r3, #0
 8006cea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006cee:	4629      	mov	r1, r5
 8006cf0:	028b      	lsls	r3, r1, #10
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	028a      	lsls	r2, r1, #10
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d02:	2200      	movs	r2, #0
 8006d04:	60bb      	str	r3, [r7, #8]
 8006d06:	60fa      	str	r2, [r7, #12]
 8006d08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d0c:	f7f9 ff54 	bl	8000bb8 <__aeabi_uldivmod>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4613      	mov	r3, r2
 8006d16:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d18:	4b0b      	ldr	r3, [pc, #44]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	0c1b      	lsrs	r3, r3, #16
 8006d1e:	f003 0303 	and.w	r3, r3, #3
 8006d22:	3301      	adds	r3, #1
 8006d24:	005b      	lsls	r3, r3, #1
 8006d26:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006d28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006d32:	e002      	b.n	8006d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d34:	4b05      	ldr	r3, [pc, #20]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x184>)
 8006d36:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3740      	adds	r7, #64	; 0x40
 8006d40:	46bd      	mov	sp, r7
 8006d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d46:	bf00      	nop
 8006d48:	40023800 	.word	0x40023800
 8006d4c:	00f42400 	.word	0x00f42400
 8006d50:	017d7840 	.word	0x017d7840

08006d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d54:	b480      	push	{r7}
 8006d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d58:	4b03      	ldr	r3, [pc, #12]	; (8006d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	20000014 	.word	0x20000014

08006d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d70:	f7ff fff0 	bl	8006d54 <HAL_RCC_GetHCLKFreq>
 8006d74:	4602      	mov	r2, r0
 8006d76:	4b05      	ldr	r3, [pc, #20]	; (8006d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	0a9b      	lsrs	r3, r3, #10
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	4903      	ldr	r1, [pc, #12]	; (8006d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d82:	5ccb      	ldrb	r3, [r1, r3]
 8006d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	40023800 	.word	0x40023800
 8006d90:	0800e41c 	.word	0x0800e41c

08006d94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d94:	b084      	sub	sp, #16
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b084      	sub	sp, #16
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	f107 001c 	add.w	r0, r7, #28
 8006da2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d122      	bne.n	8006df2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d105      	bne.n	8006de6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f001 fbee 	bl	80085c8 <USB_CoreReset>
 8006dec:	4603      	mov	r3, r0
 8006dee:	73fb      	strb	r3, [r7, #15]
 8006df0:	e01a      	b.n	8006e28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f001 fbe2 	bl	80085c8 <USB_CoreReset>
 8006e04:	4603      	mov	r3, r0
 8006e06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d106      	bne.n	8006e1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	639a      	str	r2, [r3, #56]	; 0x38
 8006e1a:	e005      	b.n	8006e28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d10b      	bne.n	8006e46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f043 0206 	orr.w	r2, r3, #6
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f043 0220 	orr.w	r2, r3, #32
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e52:	b004      	add	sp, #16
 8006e54:	4770      	bx	lr
	...

08006e58 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b087      	sub	sp, #28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	4613      	mov	r3, r2
 8006e64:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006e66:	79fb      	ldrb	r3, [r7, #7]
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d165      	bne.n	8006f38 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	4a41      	ldr	r2, [pc, #260]	; (8006f74 <USB_SetTurnaroundTime+0x11c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d906      	bls.n	8006e82 <USB_SetTurnaroundTime+0x2a>
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	4a40      	ldr	r2, [pc, #256]	; (8006f78 <USB_SetTurnaroundTime+0x120>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d202      	bcs.n	8006e82 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006e7c:	230f      	movs	r3, #15
 8006e7e:	617b      	str	r3, [r7, #20]
 8006e80:	e062      	b.n	8006f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	4a3c      	ldr	r2, [pc, #240]	; (8006f78 <USB_SetTurnaroundTime+0x120>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d306      	bcc.n	8006e98 <USB_SetTurnaroundTime+0x40>
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	4a3b      	ldr	r2, [pc, #236]	; (8006f7c <USB_SetTurnaroundTime+0x124>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d202      	bcs.n	8006e98 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006e92:	230e      	movs	r3, #14
 8006e94:	617b      	str	r3, [r7, #20]
 8006e96:	e057      	b.n	8006f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	4a38      	ldr	r2, [pc, #224]	; (8006f7c <USB_SetTurnaroundTime+0x124>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d306      	bcc.n	8006eae <USB_SetTurnaroundTime+0x56>
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	4a37      	ldr	r2, [pc, #220]	; (8006f80 <USB_SetTurnaroundTime+0x128>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d202      	bcs.n	8006eae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006ea8:	230d      	movs	r3, #13
 8006eaa:	617b      	str	r3, [r7, #20]
 8006eac:	e04c      	b.n	8006f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	4a33      	ldr	r2, [pc, #204]	; (8006f80 <USB_SetTurnaroundTime+0x128>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d306      	bcc.n	8006ec4 <USB_SetTurnaroundTime+0x6c>
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	4a32      	ldr	r2, [pc, #200]	; (8006f84 <USB_SetTurnaroundTime+0x12c>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d802      	bhi.n	8006ec4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006ebe:	230c      	movs	r3, #12
 8006ec0:	617b      	str	r3, [r7, #20]
 8006ec2:	e041      	b.n	8006f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	4a2f      	ldr	r2, [pc, #188]	; (8006f84 <USB_SetTurnaroundTime+0x12c>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d906      	bls.n	8006eda <USB_SetTurnaroundTime+0x82>
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	4a2e      	ldr	r2, [pc, #184]	; (8006f88 <USB_SetTurnaroundTime+0x130>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d802      	bhi.n	8006eda <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006ed4:	230b      	movs	r3, #11
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	e036      	b.n	8006f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	4a2a      	ldr	r2, [pc, #168]	; (8006f88 <USB_SetTurnaroundTime+0x130>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d906      	bls.n	8006ef0 <USB_SetTurnaroundTime+0x98>
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	4a29      	ldr	r2, [pc, #164]	; (8006f8c <USB_SetTurnaroundTime+0x134>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d802      	bhi.n	8006ef0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006eea:	230a      	movs	r3, #10
 8006eec:	617b      	str	r3, [r7, #20]
 8006eee:	e02b      	b.n	8006f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	4a26      	ldr	r2, [pc, #152]	; (8006f8c <USB_SetTurnaroundTime+0x134>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d906      	bls.n	8006f06 <USB_SetTurnaroundTime+0xae>
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	4a25      	ldr	r2, [pc, #148]	; (8006f90 <USB_SetTurnaroundTime+0x138>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d202      	bcs.n	8006f06 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006f00:	2309      	movs	r3, #9
 8006f02:	617b      	str	r3, [r7, #20]
 8006f04:	e020      	b.n	8006f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	4a21      	ldr	r2, [pc, #132]	; (8006f90 <USB_SetTurnaroundTime+0x138>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d306      	bcc.n	8006f1c <USB_SetTurnaroundTime+0xc4>
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	4a20      	ldr	r2, [pc, #128]	; (8006f94 <USB_SetTurnaroundTime+0x13c>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d802      	bhi.n	8006f1c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006f16:	2308      	movs	r3, #8
 8006f18:	617b      	str	r3, [r7, #20]
 8006f1a:	e015      	b.n	8006f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	4a1d      	ldr	r2, [pc, #116]	; (8006f94 <USB_SetTurnaroundTime+0x13c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d906      	bls.n	8006f32 <USB_SetTurnaroundTime+0xda>
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	4a1c      	ldr	r2, [pc, #112]	; (8006f98 <USB_SetTurnaroundTime+0x140>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d202      	bcs.n	8006f32 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006f2c:	2307      	movs	r3, #7
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	e00a      	b.n	8006f48 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006f32:	2306      	movs	r3, #6
 8006f34:	617b      	str	r3, [r7, #20]
 8006f36:	e007      	b.n	8006f48 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006f38:	79fb      	ldrb	r3, [r7, #7]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d102      	bne.n	8006f44 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006f3e:	2309      	movs	r3, #9
 8006f40:	617b      	str	r3, [r7, #20]
 8006f42:	e001      	b.n	8006f48 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006f44:	2309      	movs	r3, #9
 8006f46:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	68da      	ldr	r2, [r3, #12]
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	029b      	lsls	r3, r3, #10
 8006f5c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006f60:	431a      	orrs	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	371c      	adds	r7, #28
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr
 8006f74:	00d8acbf 	.word	0x00d8acbf
 8006f78:	00e4e1c0 	.word	0x00e4e1c0
 8006f7c:	00f42400 	.word	0x00f42400
 8006f80:	01067380 	.word	0x01067380
 8006f84:	011a499f 	.word	0x011a499f
 8006f88:	01312cff 	.word	0x01312cff
 8006f8c:	014ca43f 	.word	0x014ca43f
 8006f90:	016e3600 	.word	0x016e3600
 8006f94:	01a6ab1f 	.word	0x01a6ab1f
 8006f98:	01e84800 	.word	0x01e84800

08006f9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f043 0201 	orr.w	r2, r3, #1
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b083      	sub	sp, #12
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f023 0201 	bic.w	r2, r3, #1
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ffc:	78fb      	ldrb	r3, [r7, #3]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d115      	bne.n	800702e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800700e:	2001      	movs	r0, #1
 8007010:	f7fa ffc6 	bl	8001fa0 <HAL_Delay>
      ms++;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	3301      	adds	r3, #1
 8007018:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f001 fa45 	bl	80084aa <USB_GetMode>
 8007020:	4603      	mov	r3, r0
 8007022:	2b01      	cmp	r3, #1
 8007024:	d01e      	beq.n	8007064 <USB_SetCurrentMode+0x84>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2b31      	cmp	r3, #49	; 0x31
 800702a:	d9f0      	bls.n	800700e <USB_SetCurrentMode+0x2e>
 800702c:	e01a      	b.n	8007064 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800702e:	78fb      	ldrb	r3, [r7, #3]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d115      	bne.n	8007060 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007040:	2001      	movs	r0, #1
 8007042:	f7fa ffad 	bl	8001fa0 <HAL_Delay>
      ms++;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	3301      	adds	r3, #1
 800704a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f001 fa2c 	bl	80084aa <USB_GetMode>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d005      	beq.n	8007064 <USB_SetCurrentMode+0x84>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2b31      	cmp	r3, #49	; 0x31
 800705c:	d9f0      	bls.n	8007040 <USB_SetCurrentMode+0x60>
 800705e:	e001      	b.n	8007064 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e005      	b.n	8007070 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b32      	cmp	r3, #50	; 0x32
 8007068:	d101      	bne.n	800706e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e000      	b.n	8007070 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007078:	b084      	sub	sp, #16
 800707a:	b580      	push	{r7, lr}
 800707c:	b086      	sub	sp, #24
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007086:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007092:	2300      	movs	r3, #0
 8007094:	613b      	str	r3, [r7, #16]
 8007096:	e009      	b.n	80070ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	3340      	adds	r3, #64	; 0x40
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	2200      	movs	r2, #0
 80070a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	3301      	adds	r3, #1
 80070aa:	613b      	str	r3, [r7, #16]
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	2b0e      	cmp	r3, #14
 80070b0:	d9f2      	bls.n	8007098 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80070b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d11c      	bne.n	80070f2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070c6:	f043 0302 	orr.w	r3, r3, #2
 80070ca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070dc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	639a      	str	r2, [r3, #56]	; 0x38
 80070f0:	e00b      	b.n	800710a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007102:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007110:	461a      	mov	r2, r3
 8007112:	2300      	movs	r3, #0
 8007114:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711c:	4619      	mov	r1, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007124:	461a      	mov	r2, r3
 8007126:	680b      	ldr	r3, [r1, #0]
 8007128:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800712a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712c:	2b01      	cmp	r3, #1
 800712e:	d10c      	bne.n	800714a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007132:	2b00      	cmp	r3, #0
 8007134:	d104      	bne.n	8007140 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007136:	2100      	movs	r1, #0
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f965 	bl	8007408 <USB_SetDevSpeed>
 800713e:	e008      	b.n	8007152 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007140:	2101      	movs	r1, #1
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f960 	bl	8007408 <USB_SetDevSpeed>
 8007148:	e003      	b.n	8007152 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800714a:	2103      	movs	r1, #3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f95b 	bl	8007408 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007152:	2110      	movs	r1, #16
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f8f3 	bl	8007340 <USB_FlushTxFifo>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f91f 	bl	80073a8 <USB_FlushRxFifo>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800717a:	461a      	mov	r2, r3
 800717c:	2300      	movs	r3, #0
 800717e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007186:	461a      	mov	r2, r3
 8007188:	2300      	movs	r3, #0
 800718a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007192:	461a      	mov	r2, r3
 8007194:	2300      	movs	r3, #0
 8007196:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007198:	2300      	movs	r3, #0
 800719a:	613b      	str	r3, [r7, #16]
 800719c:	e043      	b.n	8007226 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071b4:	d118      	bne.n	80071e8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10a      	bne.n	80071d2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c8:	461a      	mov	r2, r3
 80071ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80071ce:	6013      	str	r3, [r2, #0]
 80071d0:	e013      	b.n	80071fa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071de:	461a      	mov	r2, r3
 80071e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80071e4:	6013      	str	r3, [r2, #0]
 80071e6:	e008      	b.n	80071fa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	015a      	lsls	r2, r3, #5
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4413      	add	r3, r2
 80071f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f4:	461a      	mov	r2, r3
 80071f6:	2300      	movs	r3, #0
 80071f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	4413      	add	r3, r2
 8007202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007206:	461a      	mov	r2, r3
 8007208:	2300      	movs	r3, #0
 800720a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	015a      	lsls	r2, r3, #5
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	4413      	add	r3, r2
 8007214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007218:	461a      	mov	r2, r3
 800721a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800721e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	3301      	adds	r3, #1
 8007224:	613b      	str	r3, [r7, #16]
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	429a      	cmp	r2, r3
 800722c:	d3b7      	bcc.n	800719e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800722e:	2300      	movs	r3, #0
 8007230:	613b      	str	r3, [r7, #16]
 8007232:	e043      	b.n	80072bc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007246:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800724a:	d118      	bne.n	800727e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10a      	bne.n	8007268 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	015a      	lsls	r2, r3, #5
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	4413      	add	r3, r2
 800725a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725e:	461a      	mov	r2, r3
 8007260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007264:	6013      	str	r3, [r2, #0]
 8007266:	e013      	b.n	8007290 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007274:	461a      	mov	r2, r3
 8007276:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800727a:	6013      	str	r3, [r2, #0]
 800727c:	e008      	b.n	8007290 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	4413      	add	r3, r2
 8007286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728a:	461a      	mov	r2, r3
 800728c:	2300      	movs	r3, #0
 800728e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4413      	add	r3, r2
 8007298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729c:	461a      	mov	r2, r3
 800729e:	2300      	movs	r3, #0
 80072a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	015a      	lsls	r2, r3, #5
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ae:	461a      	mov	r2, r3
 80072b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	3301      	adds	r3, #1
 80072ba:	613b      	str	r3, [r7, #16]
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d3b7      	bcc.n	8007234 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80072e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80072e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d105      	bne.n	80072f8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	f043 0210 	orr.w	r2, r3, #16
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	699a      	ldr	r2, [r3, #24]
 80072fc:	4b0f      	ldr	r3, [pc, #60]	; (800733c <USB_DevInit+0x2c4>)
 80072fe:	4313      	orrs	r3, r2
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007306:	2b00      	cmp	r3, #0
 8007308:	d005      	beq.n	8007316 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	f043 0208 	orr.w	r2, r3, #8
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007318:	2b01      	cmp	r3, #1
 800731a:	d107      	bne.n	800732c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007324:	f043 0304 	orr.w	r3, r3, #4
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800732c:	7dfb      	ldrb	r3, [r7, #23]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3718      	adds	r7, #24
 8007332:	46bd      	mov	sp, r7
 8007334:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007338:	b004      	add	sp, #16
 800733a:	4770      	bx	lr
 800733c:	803c3800 	.word	0x803c3800

08007340 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800734a:	2300      	movs	r3, #0
 800734c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3301      	adds	r3, #1
 8007352:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4a13      	ldr	r2, [pc, #76]	; (80073a4 <USB_FlushTxFifo+0x64>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d901      	bls.n	8007360 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e01b      	b.n	8007398 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	2b00      	cmp	r3, #0
 8007366:	daf2      	bge.n	800734e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	019b      	lsls	r3, r3, #6
 8007370:	f043 0220 	orr.w	r2, r3, #32
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	3301      	adds	r3, #1
 800737c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	4a08      	ldr	r2, [pc, #32]	; (80073a4 <USB_FlushTxFifo+0x64>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d901      	bls.n	800738a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e006      	b.n	8007398 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	f003 0320 	and.w	r3, r3, #32
 8007392:	2b20      	cmp	r3, #32
 8007394:	d0f0      	beq.n	8007378 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr
 80073a4:	00030d40 	.word	0x00030d40

080073a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	3301      	adds	r3, #1
 80073b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	4a11      	ldr	r2, [pc, #68]	; (8007404 <USB_FlushRxFifo+0x5c>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d901      	bls.n	80073c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e018      	b.n	80073f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	daf2      	bge.n	80073b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2210      	movs	r2, #16
 80073d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	3301      	adds	r3, #1
 80073dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	4a08      	ldr	r2, [pc, #32]	; (8007404 <USB_FlushRxFifo+0x5c>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d901      	bls.n	80073ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e006      	b.n	80073f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	f003 0310 	and.w	r3, r3, #16
 80073f2:	2b10      	cmp	r3, #16
 80073f4:	d0f0      	beq.n	80073d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	00030d40 	.word	0x00030d40

08007408 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	78fb      	ldrb	r3, [r7, #3]
 8007422:	68f9      	ldr	r1, [r7, #12]
 8007424:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007428:	4313      	orrs	r3, r2
 800742a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3714      	adds	r7, #20
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800743a:	b480      	push	{r7}
 800743c:	b087      	sub	sp, #28
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f003 0306 	and.w	r3, r3, #6
 8007452:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d102      	bne.n	8007460 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800745a:	2300      	movs	r3, #0
 800745c:	75fb      	strb	r3, [r7, #23]
 800745e:	e00a      	b.n	8007476 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2b02      	cmp	r3, #2
 8007464:	d002      	beq.n	800746c <USB_GetDevSpeed+0x32>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2b06      	cmp	r3, #6
 800746a:	d102      	bne.n	8007472 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800746c:	2302      	movs	r3, #2
 800746e:	75fb      	strb	r3, [r7, #23]
 8007470:	e001      	b.n	8007476 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007472:	230f      	movs	r3, #15
 8007474:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007476:	7dfb      	ldrb	r3, [r7, #23]
}
 8007478:	4618      	mov	r0, r3
 800747a:	371c      	adds	r7, #28
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	785b      	ldrb	r3, [r3, #1]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d13a      	bne.n	8007516 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a6:	69da      	ldr	r2, [r3, #28]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	f003 030f 	and.w	r3, r3, #15
 80074b0:	2101      	movs	r1, #1
 80074b2:	fa01 f303 	lsl.w	r3, r1, r3
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	68f9      	ldr	r1, [r7, #12]
 80074ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074be:	4313      	orrs	r3, r2
 80074c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d155      	bne.n	8007584 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	791b      	ldrb	r3, [r3, #4]
 80074f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80074f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	059b      	lsls	r3, r3, #22
 80074fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80074fc:	4313      	orrs	r3, r2
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	0151      	lsls	r1, r2, #5
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	440a      	add	r2, r1
 8007506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800750a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800750e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007512:	6013      	str	r3, [r2, #0]
 8007514:	e036      	b.n	8007584 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800751c:	69da      	ldr	r2, [r3, #28]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	f003 030f 	and.w	r3, r3, #15
 8007526:	2101      	movs	r1, #1
 8007528:	fa01 f303 	lsl.w	r3, r1, r3
 800752c:	041b      	lsls	r3, r3, #16
 800752e:	68f9      	ldr	r1, [r7, #12]
 8007530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007534:	4313      	orrs	r3, r2
 8007536:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4413      	add	r3, r2
 8007540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d11a      	bne.n	8007584 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	015a      	lsls	r2, r3, #5
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	4413      	add	r3, r2
 8007556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	791b      	ldrb	r3, [r3, #4]
 8007568:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800756a:	430b      	orrs	r3, r1
 800756c:	4313      	orrs	r3, r2
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	0151      	lsls	r1, r2, #5
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	440a      	add	r2, r1
 8007576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800757a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800757e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007582:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
	...

08007594 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	785b      	ldrb	r3, [r3, #1]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d161      	bne.n	8007674 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075c6:	d11f      	bne.n	8007608 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	0151      	lsls	r1, r2, #5
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	440a      	add	r2, r1
 80075de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80075e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	015a      	lsls	r2, r3, #5
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	0151      	lsls	r1, r2, #5
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	440a      	add	r2, r1
 80075fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007602:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007606:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800760e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	f003 030f 	and.w	r3, r3, #15
 8007618:	2101      	movs	r1, #1
 800761a:	fa01 f303 	lsl.w	r3, r1, r3
 800761e:	b29b      	uxth	r3, r3
 8007620:	43db      	mvns	r3, r3
 8007622:	68f9      	ldr	r1, [r7, #12]
 8007624:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007628:	4013      	ands	r3, r2
 800762a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007632:	69da      	ldr	r2, [r3, #28]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	f003 030f 	and.w	r3, r3, #15
 800763c:	2101      	movs	r1, #1
 800763e:	fa01 f303 	lsl.w	r3, r1, r3
 8007642:	b29b      	uxth	r3, r3
 8007644:	43db      	mvns	r3, r3
 8007646:	68f9      	ldr	r1, [r7, #12]
 8007648:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800764c:	4013      	ands	r3, r2
 800764e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	0159      	lsls	r1, r3, #5
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	440b      	add	r3, r1
 8007666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766a:	4619      	mov	r1, r3
 800766c:	4b35      	ldr	r3, [pc, #212]	; (8007744 <USB_DeactivateEndpoint+0x1b0>)
 800766e:	4013      	ands	r3, r2
 8007670:	600b      	str	r3, [r1, #0]
 8007672:	e060      	b.n	8007736 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	4413      	add	r3, r2
 800767c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007686:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800768a:	d11f      	bne.n	80076cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	015a      	lsls	r2, r3, #5
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	4413      	add	r3, r2
 8007694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	0151      	lsls	r1, r2, #5
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	440a      	add	r2, r1
 80076a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	0151      	lsls	r1, r2, #5
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	440a      	add	r2, r1
 80076c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	f003 030f 	and.w	r3, r3, #15
 80076dc:	2101      	movs	r1, #1
 80076de:	fa01 f303 	lsl.w	r3, r1, r3
 80076e2:	041b      	lsls	r3, r3, #16
 80076e4:	43db      	mvns	r3, r3
 80076e6:	68f9      	ldr	r1, [r7, #12]
 80076e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076ec:	4013      	ands	r3, r2
 80076ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076f6:	69da      	ldr	r2, [r3, #28]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	f003 030f 	and.w	r3, r3, #15
 8007700:	2101      	movs	r1, #1
 8007702:	fa01 f303 	lsl.w	r3, r1, r3
 8007706:	041b      	lsls	r3, r3, #16
 8007708:	43db      	mvns	r3, r3
 800770a:	68f9      	ldr	r1, [r7, #12]
 800770c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007710:	4013      	ands	r3, r2
 8007712:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	0159      	lsls	r1, r3, #5
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	440b      	add	r3, r1
 800772a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772e:	4619      	mov	r1, r3
 8007730:	4b05      	ldr	r3, [pc, #20]	; (8007748 <USB_DeactivateEndpoint+0x1b4>)
 8007732:	4013      	ands	r3, r2
 8007734:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3714      	adds	r7, #20
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	ec337800 	.word	0xec337800
 8007748:	eff37800 	.word	0xeff37800

0800774c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08a      	sub	sp, #40	; 0x28
 8007750:	af02      	add	r7, sp, #8
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	4613      	mov	r3, r2
 8007758:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	785b      	ldrb	r3, [r3, #1]
 8007768:	2b01      	cmp	r3, #1
 800776a:	f040 815c 	bne.w	8007a26 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d132      	bne.n	80077dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	015a      	lsls	r2, r3, #5
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	4413      	add	r3, r2
 800777e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	69ba      	ldr	r2, [r7, #24]
 8007786:	0151      	lsls	r1, r2, #5
 8007788:	69fa      	ldr	r2, [r7, #28]
 800778a:	440a      	add	r2, r1
 800778c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007790:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007794:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007798:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	0151      	lsls	r1, r2, #5
 80077ac:	69fa      	ldr	r2, [r7, #28]
 80077ae:	440a      	add	r2, r1
 80077b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	015a      	lsls	r2, r3, #5
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	4413      	add	r3, r2
 80077c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	0151      	lsls	r1, r2, #5
 80077cc:	69fa      	ldr	r2, [r7, #28]
 80077ce:	440a      	add	r2, r1
 80077d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077d4:	0cdb      	lsrs	r3, r3, #19
 80077d6:	04db      	lsls	r3, r3, #19
 80077d8:	6113      	str	r3, [r2, #16]
 80077da:	e074      	b.n	80078c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	015a      	lsls	r2, r3, #5
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	4413      	add	r3, r2
 80077e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	69ba      	ldr	r2, [r7, #24]
 80077ec:	0151      	lsls	r1, r2, #5
 80077ee:	69fa      	ldr	r2, [r7, #28]
 80077f0:	440a      	add	r2, r1
 80077f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077f6:	0cdb      	lsrs	r3, r3, #19
 80077f8:	04db      	lsls	r3, r3, #19
 80077fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	015a      	lsls	r2, r3, #5
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	4413      	add	r3, r2
 8007804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	69ba      	ldr	r2, [r7, #24]
 800780c:	0151      	lsls	r1, r2, #5
 800780e:	69fa      	ldr	r2, [r7, #28]
 8007810:	440a      	add	r2, r1
 8007812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007816:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800781a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800781e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	4413      	add	r3, r2
 8007828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800782c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	6999      	ldr	r1, [r3, #24]
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	440b      	add	r3, r1
 8007838:	1e59      	subs	r1, r3, #1
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007842:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007844:	4b9d      	ldr	r3, [pc, #628]	; (8007abc <USB_EPStartXfer+0x370>)
 8007846:	400b      	ands	r3, r1
 8007848:	69b9      	ldr	r1, [r7, #24]
 800784a:	0148      	lsls	r0, r1, #5
 800784c:	69f9      	ldr	r1, [r7, #28]
 800784e:	4401      	add	r1, r0
 8007850:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007854:	4313      	orrs	r3, r2
 8007856:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	4413      	add	r3, r2
 8007860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007864:	691a      	ldr	r2, [r3, #16]
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800786e:	69b9      	ldr	r1, [r7, #24]
 8007870:	0148      	lsls	r0, r1, #5
 8007872:	69f9      	ldr	r1, [r7, #28]
 8007874:	4401      	add	r1, r0
 8007876:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800787a:	4313      	orrs	r3, r2
 800787c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	791b      	ldrb	r3, [r3, #4]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d11f      	bne.n	80078c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	015a      	lsls	r2, r3, #5
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	4413      	add	r3, r2
 800788e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	69ba      	ldr	r2, [r7, #24]
 8007896:	0151      	lsls	r1, r2, #5
 8007898:	69fa      	ldr	r2, [r7, #28]
 800789a:	440a      	add	r2, r1
 800789c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80078a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	015a      	lsls	r2, r3, #5
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	4413      	add	r3, r2
 80078ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	0151      	lsls	r1, r2, #5
 80078b8:	69fa      	ldr	r2, [r7, #28]
 80078ba:	440a      	add	r2, r1
 80078bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80078c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80078c6:	79fb      	ldrb	r3, [r7, #7]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d14b      	bne.n	8007964 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	695b      	ldr	r3, [r3, #20]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d009      	beq.n	80078e8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e0:	461a      	mov	r2, r3
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	791b      	ldrb	r3, [r3, #4]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d128      	bne.n	8007942 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d110      	bne.n	8007922 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	4413      	add	r3, r2
 8007908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	69ba      	ldr	r2, [r7, #24]
 8007910:	0151      	lsls	r1, r2, #5
 8007912:	69fa      	ldr	r2, [r7, #28]
 8007914:	440a      	add	r2, r1
 8007916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800791a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800791e:	6013      	str	r3, [r2, #0]
 8007920:	e00f      	b.n	8007942 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	015a      	lsls	r2, r3, #5
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	4413      	add	r3, r2
 800792a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	69ba      	ldr	r2, [r7, #24]
 8007932:	0151      	lsls	r1, r2, #5
 8007934:	69fa      	ldr	r2, [r7, #28]
 8007936:	440a      	add	r2, r1
 8007938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800793c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007940:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	015a      	lsls	r2, r3, #5
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	4413      	add	r3, r2
 800794a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	69ba      	ldr	r2, [r7, #24]
 8007952:	0151      	lsls	r1, r2, #5
 8007954:	69fa      	ldr	r2, [r7, #28]
 8007956:	440a      	add	r2, r1
 8007958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800795c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	e133      	b.n	8007bcc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	4413      	add	r3, r2
 800796c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	69ba      	ldr	r2, [r7, #24]
 8007974:	0151      	lsls	r1, r2, #5
 8007976:	69fa      	ldr	r2, [r7, #28]
 8007978:	440a      	add	r2, r1
 800797a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800797e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007982:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	791b      	ldrb	r3, [r3, #4]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d015      	beq.n	80079b8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 811b 	beq.w	8007bcc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800799c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	f003 030f 	and.w	r3, r3, #15
 80079a6:	2101      	movs	r1, #1
 80079a8:	fa01 f303 	lsl.w	r3, r1, r3
 80079ac:	69f9      	ldr	r1, [r7, #28]
 80079ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079b2:	4313      	orrs	r3, r2
 80079b4:	634b      	str	r3, [r1, #52]	; 0x34
 80079b6:	e109      	b.n	8007bcc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d110      	bne.n	80079ea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	015a      	lsls	r2, r3, #5
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	69ba      	ldr	r2, [r7, #24]
 80079d8:	0151      	lsls	r1, r2, #5
 80079da:	69fa      	ldr	r2, [r7, #28]
 80079dc:	440a      	add	r2, r1
 80079de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079e6:	6013      	str	r3, [r2, #0]
 80079e8:	e00f      	b.n	8007a0a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	015a      	lsls	r2, r3, #5
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	4413      	add	r3, r2
 80079f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	69ba      	ldr	r2, [r7, #24]
 80079fa:	0151      	lsls	r1, r2, #5
 80079fc:	69fa      	ldr	r2, [r7, #28]
 80079fe:	440a      	add	r2, r1
 8007a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a08:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	6919      	ldr	r1, [r3, #16]
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	781a      	ldrb	r2, [r3, #0]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	b298      	uxth	r0, r3
 8007a18:	79fb      	ldrb	r3, [r7, #7]
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f000 fade 	bl	8007fe0 <USB_WritePacket>
 8007a24:	e0d2      	b.n	8007bcc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	015a      	lsls	r2, r3, #5
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	0151      	lsls	r1, r2, #5
 8007a38:	69fa      	ldr	r2, [r7, #28]
 8007a3a:	440a      	add	r2, r1
 8007a3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a40:	0cdb      	lsrs	r3, r3, #19
 8007a42:	04db      	lsls	r3, r3, #19
 8007a44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	015a      	lsls	r2, r3, #5
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	69ba      	ldr	r2, [r7, #24]
 8007a56:	0151      	lsls	r1, r2, #5
 8007a58:	69fa      	ldr	r2, [r7, #28]
 8007a5a:	440a      	add	r2, r1
 8007a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a68:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d126      	bne.n	8007ac0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a7e:	691a      	ldr	r2, [r3, #16]
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a88:	69b9      	ldr	r1, [r7, #24]
 8007a8a:	0148      	lsls	r0, r1, #5
 8007a8c:	69f9      	ldr	r1, [r7, #28]
 8007a8e:	4401      	add	r1, r0
 8007a90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a94:	4313      	orrs	r3, r2
 8007a96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	69ba      	ldr	r2, [r7, #24]
 8007aa8:	0151      	lsls	r1, r2, #5
 8007aaa:	69fa      	ldr	r2, [r7, #28]
 8007aac:	440a      	add	r2, r1
 8007aae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ab2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ab6:	6113      	str	r3, [r2, #16]
 8007ab8:	e03a      	b.n	8007b30 <USB_EPStartXfer+0x3e4>
 8007aba:	bf00      	nop
 8007abc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	699a      	ldr	r2, [r3, #24]
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	4413      	add	r3, r2
 8007aca:	1e5a      	subs	r2, r3, #1
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ad4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	8afa      	ldrh	r2, [r7, #22]
 8007adc:	fb03 f202 	mul.w	r2, r3, r2
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	015a      	lsls	r2, r3, #5
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	4413      	add	r3, r2
 8007aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af0:	691a      	ldr	r2, [r3, #16]
 8007af2:	8afb      	ldrh	r3, [r7, #22]
 8007af4:	04d9      	lsls	r1, r3, #19
 8007af6:	4b38      	ldr	r3, [pc, #224]	; (8007bd8 <USB_EPStartXfer+0x48c>)
 8007af8:	400b      	ands	r3, r1
 8007afa:	69b9      	ldr	r1, [r7, #24]
 8007afc:	0148      	lsls	r0, r1, #5
 8007afe:	69f9      	ldr	r1, [r7, #28]
 8007b00:	4401      	add	r1, r0
 8007b02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b06:	4313      	orrs	r3, r2
 8007b08:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	015a      	lsls	r2, r3, #5
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	4413      	add	r3, r2
 8007b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b16:	691a      	ldr	r2, [r3, #16]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b20:	69b9      	ldr	r1, [r7, #24]
 8007b22:	0148      	lsls	r0, r1, #5
 8007b24:	69f9      	ldr	r1, [r7, #28]
 8007b26:	4401      	add	r1, r0
 8007b28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d10d      	bne.n	8007b52 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d009      	beq.n	8007b52 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	6919      	ldr	r1, [r3, #16]
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	015a      	lsls	r2, r3, #5
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	4413      	add	r3, r2
 8007b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b4e:	460a      	mov	r2, r1
 8007b50:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	791b      	ldrb	r3, [r3, #4]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d128      	bne.n	8007bac <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d110      	bne.n	8007b8c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	015a      	lsls	r2, r3, #5
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	4413      	add	r3, r2
 8007b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	69ba      	ldr	r2, [r7, #24]
 8007b7a:	0151      	lsls	r1, r2, #5
 8007b7c:	69fa      	ldr	r2, [r7, #28]
 8007b7e:	440a      	add	r2, r1
 8007b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b88:	6013      	str	r3, [r2, #0]
 8007b8a:	e00f      	b.n	8007bac <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	015a      	lsls	r2, r3, #5
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	4413      	add	r3, r2
 8007b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	69ba      	ldr	r2, [r7, #24]
 8007b9c:	0151      	lsls	r1, r2, #5
 8007b9e:	69fa      	ldr	r2, [r7, #28]
 8007ba0:	440a      	add	r2, r1
 8007ba2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007baa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	69ba      	ldr	r2, [r7, #24]
 8007bbc:	0151      	lsls	r1, r2, #5
 8007bbe:	69fa      	ldr	r2, [r7, #28]
 8007bc0:	440a      	add	r2, r1
 8007bc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3720      	adds	r7, #32
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	1ff80000 	.word	0x1ff80000

08007bdc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b087      	sub	sp, #28
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	4613      	mov	r3, r2
 8007be8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	785b      	ldrb	r3, [r3, #1]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	f040 80ce 	bne.w	8007d9a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d132      	bne.n	8007c6c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	015a      	lsls	r2, r3, #5
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	0151      	lsls	r1, r2, #5
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	440a      	add	r2, r1
 8007c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	0151      	lsls	r1, r2, #5
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	440a      	add	r2, r1
 8007c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	0151      	lsls	r1, r2, #5
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	440a      	add	r2, r1
 8007c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c64:	0cdb      	lsrs	r3, r3, #19
 8007c66:	04db      	lsls	r3, r3, #19
 8007c68:	6113      	str	r3, [r2, #16]
 8007c6a:	e04e      	b.n	8007d0a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	015a      	lsls	r2, r3, #5
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	0151      	lsls	r1, r2, #5
 8007c7e:	697a      	ldr	r2, [r7, #20]
 8007c80:	440a      	add	r2, r1
 8007c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c86:	0cdb      	lsrs	r3, r3, #19
 8007c88:	04db      	lsls	r3, r3, #19
 8007c8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	015a      	lsls	r2, r3, #5
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	4413      	add	r3, r2
 8007c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	0151      	lsls	r1, r2, #5
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	440a      	add	r2, r1
 8007ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ca6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007caa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007cae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	699a      	ldr	r2, [r3, #24]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d903      	bls.n	8007cc4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	015a      	lsls	r2, r3, #5
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	4413      	add	r3, r2
 8007ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	0151      	lsls	r1, r2, #5
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	440a      	add	r2, r1
 8007cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ce2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	015a      	lsls	r2, r3, #5
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	4413      	add	r3, r2
 8007cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf0:	691a      	ldr	r2, [r3, #16]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cfa:	6939      	ldr	r1, [r7, #16]
 8007cfc:	0148      	lsls	r0, r1, #5
 8007cfe:	6979      	ldr	r1, [r7, #20]
 8007d00:	4401      	add	r1, r0
 8007d02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007d06:	4313      	orrs	r3, r2
 8007d08:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007d0a:	79fb      	ldrb	r3, [r7, #7]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d11e      	bne.n	8007d4e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	695b      	ldr	r3, [r3, #20]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d009      	beq.n	8007d2c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d24:	461a      	mov	r2, r3
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	015a      	lsls	r2, r3, #5
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	0151      	lsls	r1, r2, #5
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	440a      	add	r2, r1
 8007d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	e097      	b.n	8007e7e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	015a      	lsls	r2, r3, #5
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	4413      	add	r3, r2
 8007d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	0151      	lsls	r1, r2, #5
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	440a      	add	r2, r1
 8007d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d6c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f000 8083 	beq.w	8007e7e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	f003 030f 	and.w	r3, r3, #15
 8007d88:	2101      	movs	r1, #1
 8007d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d8e:	6979      	ldr	r1, [r7, #20]
 8007d90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d94:	4313      	orrs	r3, r2
 8007d96:	634b      	str	r3, [r1, #52]	; 0x34
 8007d98:	e071      	b.n	8007e7e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	0151      	lsls	r1, r2, #5
 8007dac:	697a      	ldr	r2, [r7, #20]
 8007dae:	440a      	add	r2, r1
 8007db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007db4:	0cdb      	lsrs	r3, r3, #19
 8007db6:	04db      	lsls	r3, r3, #19
 8007db8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	015a      	lsls	r2, r3, #5
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	0151      	lsls	r1, r2, #5
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	440a      	add	r2, r1
 8007dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007dd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ddc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	68da      	ldr	r2, [r3, #12]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	015a      	lsls	r2, r3, #5
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	0151      	lsls	r1, r2, #5
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	440a      	add	r2, r1
 8007e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	015a      	lsls	r2, r3, #5
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e22:	691a      	ldr	r2, [r3, #16]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	69db      	ldr	r3, [r3, #28]
 8007e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e2c:	6939      	ldr	r1, [r7, #16]
 8007e2e:	0148      	lsls	r0, r1, #5
 8007e30:	6979      	ldr	r1, [r7, #20]
 8007e32:	4401      	add	r1, r0
 8007e34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007e3c:	79fb      	ldrb	r3, [r7, #7]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d10d      	bne.n	8007e5e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d009      	beq.n	8007e5e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	6919      	ldr	r1, [r3, #16]
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	015a      	lsls	r2, r3, #5
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e5a:	460a      	mov	r2, r1
 8007e5c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	015a      	lsls	r2, r3, #5
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	4413      	add	r3, r2
 8007e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	0151      	lsls	r1, r2, #5
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	440a      	add	r2, r1
 8007e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	371c      	adds	r7, #28
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e96:	2300      	movs	r3, #0
 8007e98:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	785b      	ldrb	r3, [r3, #1]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d14a      	bne.n	8007f40 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	015a      	lsls	r2, r3, #5
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ebe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ec2:	f040 8086 	bne.w	8007fd2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	015a      	lsls	r2, r3, #5
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	7812      	ldrb	r2, [r2, #0]
 8007eda:	0151      	lsls	r1, r2, #5
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	440a      	add	r2, r1
 8007ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ee4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ee8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	683a      	ldr	r2, [r7, #0]
 8007efc:	7812      	ldrb	r2, [r2, #0]
 8007efe:	0151      	lsls	r1, r2, #5
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	440a      	add	r2, r1
 8007f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	3301      	adds	r3, #1
 8007f12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f242 7210 	movw	r2, #10000	; 0x2710
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d902      	bls.n	8007f24 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	75fb      	strb	r3, [r7, #23]
          break;
 8007f22:	e056      	b.n	8007fd2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	015a      	lsls	r2, r3, #5
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f3c:	d0e7      	beq.n	8007f0e <USB_EPStopXfer+0x82>
 8007f3e:	e048      	b.n	8007fd2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f58:	d13b      	bne.n	8007fd2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	015a      	lsls	r2, r3, #5
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	4413      	add	r3, r2
 8007f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	7812      	ldrb	r2, [r2, #0]
 8007f6e:	0151      	lsls	r1, r2, #5
 8007f70:	693a      	ldr	r2, [r7, #16]
 8007f72:	440a      	add	r2, r1
 8007f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f7c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	7812      	ldrb	r2, [r2, #0]
 8007f92:	0151      	lsls	r1, r2, #5
 8007f94:	693a      	ldr	r2, [r7, #16]
 8007f96:	440a      	add	r2, r1
 8007f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fa0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f242 7210 	movw	r2, #10000	; 0x2710
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d902      	bls.n	8007fb8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	75fb      	strb	r3, [r7, #23]
          break;
 8007fb6:	e00c      	b.n	8007fd2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fd0:	d0e7      	beq.n	8007fa2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	371c      	adds	r7, #28
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b089      	sub	sp, #36	; 0x24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	4611      	mov	r1, r2
 8007fec:	461a      	mov	r2, r3
 8007fee:	460b      	mov	r3, r1
 8007ff0:	71fb      	strb	r3, [r7, #7]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007ffe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008002:	2b00      	cmp	r3, #0
 8008004:	d123      	bne.n	800804e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008006:	88bb      	ldrh	r3, [r7, #4]
 8008008:	3303      	adds	r3, #3
 800800a:	089b      	lsrs	r3, r3, #2
 800800c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800800e:	2300      	movs	r3, #0
 8008010:	61bb      	str	r3, [r7, #24]
 8008012:	e018      	b.n	8008046 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008014:	79fb      	ldrb	r3, [r7, #7]
 8008016:	031a      	lsls	r2, r3, #12
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	4413      	add	r3, r2
 800801c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008020:	461a      	mov	r2, r3
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	3301      	adds	r3, #1
 800802c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	3301      	adds	r3, #1
 8008032:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	3301      	adds	r3, #1
 8008038:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	3301      	adds	r3, #1
 800803e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	3301      	adds	r3, #1
 8008044:	61bb      	str	r3, [r7, #24]
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	429a      	cmp	r2, r3
 800804c:	d3e2      	bcc.n	8008014 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3724      	adds	r7, #36	; 0x24
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800805c:	b480      	push	{r7}
 800805e:	b08b      	sub	sp, #44	; 0x2c
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	4613      	mov	r3, r2
 8008068:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008072:	88fb      	ldrh	r3, [r7, #6]
 8008074:	089b      	lsrs	r3, r3, #2
 8008076:	b29b      	uxth	r3, r3
 8008078:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800807a:	88fb      	ldrh	r3, [r7, #6]
 800807c:	f003 0303 	and.w	r3, r3, #3
 8008080:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008082:	2300      	movs	r3, #0
 8008084:	623b      	str	r3, [r7, #32]
 8008086:	e014      	b.n	80080b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	601a      	str	r2, [r3, #0]
    pDest++;
 8008094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008096:	3301      	adds	r3, #1
 8008098:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800809a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809c:	3301      	adds	r3, #1
 800809e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	3301      	adds	r3, #1
 80080a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a8:	3301      	adds	r3, #1
 80080aa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	3301      	adds	r3, #1
 80080b0:	623b      	str	r3, [r7, #32]
 80080b2:	6a3a      	ldr	r2, [r7, #32]
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d3e6      	bcc.n	8008088 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80080ba:	8bfb      	ldrh	r3, [r7, #30]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d01e      	beq.n	80080fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ca:	461a      	mov	r2, r3
 80080cc:	f107 0310 	add.w	r3, r7, #16
 80080d0:	6812      	ldr	r2, [r2, #0]
 80080d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	00db      	lsls	r3, r3, #3
 80080dc:	fa22 f303 	lsr.w	r3, r2, r3
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e4:	701a      	strb	r2, [r3, #0]
      i++;
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	3301      	adds	r3, #1
 80080ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	3301      	adds	r3, #1
 80080f0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80080f2:	8bfb      	ldrh	r3, [r7, #30]
 80080f4:	3b01      	subs	r3, #1
 80080f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80080f8:	8bfb      	ldrh	r3, [r7, #30]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1ea      	bne.n	80080d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008100:	4618      	mov	r0, r3
 8008102:	372c      	adds	r7, #44	; 0x2c
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	785b      	ldrb	r3, [r3, #1]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d12c      	bne.n	8008182 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	015a      	lsls	r2, r3, #5
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	4413      	add	r3, r2
 8008130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	db12      	blt.n	8008160 <USB_EPSetStall+0x54>
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00f      	beq.n	8008160 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	015a      	lsls	r2, r3, #5
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	4413      	add	r3, r2
 8008148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	0151      	lsls	r1, r2, #5
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	440a      	add	r2, r1
 8008156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800815a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800815e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	015a      	lsls	r2, r3, #5
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	4413      	add	r3, r2
 8008168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	0151      	lsls	r1, r2, #5
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	440a      	add	r2, r1
 8008176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800817a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800817e:	6013      	str	r3, [r2, #0]
 8008180:	e02b      	b.n	80081da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4413      	add	r3, r2
 800818a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	db12      	blt.n	80081ba <USB_EPSetStall+0xae>
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00f      	beq.n	80081ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	0151      	lsls	r1, r2, #5
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	440a      	add	r2, r1
 80081b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	0151      	lsls	r1, r2, #5
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	440a      	add	r2, r1
 80081d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80081d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3714      	adds	r7, #20
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	785b      	ldrb	r3, [r3, #1]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d128      	bne.n	8008256 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4413      	add	r3, r2
 800820c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	0151      	lsls	r1, r2, #5
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	440a      	add	r2, r1
 800821a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800821e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008222:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	791b      	ldrb	r3, [r3, #4]
 8008228:	2b03      	cmp	r3, #3
 800822a:	d003      	beq.n	8008234 <USB_EPClearStall+0x4c>
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	791b      	ldrb	r3, [r3, #4]
 8008230:	2b02      	cmp	r3, #2
 8008232:	d138      	bne.n	80082a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	015a      	lsls	r2, r3, #5
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	4413      	add	r3, r2
 800823c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	0151      	lsls	r1, r2, #5
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	440a      	add	r2, r1
 800824a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800824e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	e027      	b.n	80082a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	4413      	add	r3, r2
 800825e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	0151      	lsls	r1, r2, #5
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	440a      	add	r2, r1
 800826c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008270:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008274:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	791b      	ldrb	r3, [r3, #4]
 800827a:	2b03      	cmp	r3, #3
 800827c:	d003      	beq.n	8008286 <USB_EPClearStall+0x9e>
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	791b      	ldrb	r3, [r3, #4]
 8008282:	2b02      	cmp	r3, #2
 8008284:	d10f      	bne.n	80082a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	015a      	lsls	r2, r3, #5
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	4413      	add	r3, r2
 800828e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	0151      	lsls	r1, r2, #5
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	440a      	add	r2, r1
 800829c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3714      	adds	r7, #20
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082d2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80082d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	78fb      	ldrb	r3, [r7, #3]
 80082e2:	011b      	lsls	r3, r3, #4
 80082e4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80082e8:	68f9      	ldr	r1, [r7, #12]
 80082ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082ee:	4313      	orrs	r3, r2
 80082f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800831a:	f023 0303 	bic.w	r3, r3, #3
 800831e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800832e:	f023 0302 	bic.w	r3, r3, #2
 8008332:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008342:	b480      	push	{r7}
 8008344:	b085      	sub	sp, #20
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800835c:	f023 0303 	bic.w	r3, r3, #3
 8008360:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008370:	f043 0302 	orr.w	r3, r3, #2
 8008374:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	4013      	ands	r3, r2
 800839a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800839c:	68fb      	ldr	r3, [r7, #12]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3714      	adds	r7, #20
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b085      	sub	sp, #20
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	4013      	ands	r3, r2
 80083cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	0c1b      	lsrs	r3, r3, #16
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80083de:	b480      	push	{r7}
 80083e0:	b085      	sub	sp, #20
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083fa:	69db      	ldr	r3, [r3, #28]
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	4013      	ands	r3, r2
 8008400:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	b29b      	uxth	r3, r3
}
 8008406:	4618      	mov	r0, r3
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr

08008412 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008412:	b480      	push	{r7}
 8008414:	b085      	sub	sp, #20
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	460b      	mov	r3, r1
 800841c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008422:	78fb      	ldrb	r3, [r7, #3]
 8008424:	015a      	lsls	r2, r3, #5
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	4413      	add	r3, r2
 800842a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008438:	695b      	ldr	r3, [r3, #20]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	4013      	ands	r3, r2
 800843e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008440:	68bb      	ldr	r3, [r7, #8]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr

0800844e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800844e:	b480      	push	{r7}
 8008450:	b087      	sub	sp, #28
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	460b      	mov	r3, r1
 8008458:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800846e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008470:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008472:	78fb      	ldrb	r3, [r7, #3]
 8008474:	f003 030f 	and.w	r3, r3, #15
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	fa22 f303 	lsr.w	r3, r2, r3
 800847e:	01db      	lsls	r3, r3, #7
 8008480:	b2db      	uxtb	r3, r3
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	4313      	orrs	r3, r2
 8008486:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008488:	78fb      	ldrb	r3, [r7, #3]
 800848a:	015a      	lsls	r2, r3, #5
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	4413      	add	r3, r2
 8008490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	4013      	ands	r3, r2
 800849a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800849c:	68bb      	ldr	r3, [r7, #8]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	371c      	adds	r7, #28
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b083      	sub	sp, #12
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	f003 0301 	and.w	r3, r3, #1
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	370c      	adds	r7, #12
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80084c6:	b480      	push	{r7}
 80084c8:	b085      	sub	sp, #20
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80084e4:	f023 0307 	bic.w	r3, r3, #7
 80084e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800850c:	b480      	push	{r7}
 800850e:	b087      	sub	sp, #28
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	460b      	mov	r3, r1
 8008516:	607a      	str	r2, [r7, #4]
 8008518:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	333c      	adds	r3, #60	; 0x3c
 8008522:	3304      	adds	r3, #4
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	4a26      	ldr	r2, [pc, #152]	; (80085c4 <USB_EP0_OutStart+0xb8>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d90a      	bls.n	8008546 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800853c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008540:	d101      	bne.n	8008546 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	e037      	b.n	80085b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854c:	461a      	mov	r2, r3
 800854e:	2300      	movs	r3, #0
 8008550:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008560:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008564:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008574:	f043 0318 	orr.w	r3, r3, #24
 8008578:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008588:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800858c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800858e:	7afb      	ldrb	r3, [r7, #11]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d10f      	bne.n	80085b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800859a:	461a      	mov	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	697a      	ldr	r2, [r7, #20]
 80085aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80085b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	371c      	adds	r7, #28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	4f54300a 	.word	0x4f54300a

080085c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085d0:	2300      	movs	r3, #0
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	3301      	adds	r3, #1
 80085d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	4a13      	ldr	r2, [pc, #76]	; (800862c <USB_CoreReset+0x64>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d901      	bls.n	80085e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e01b      	b.n	800861e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	daf2      	bge.n	80085d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80085ee:	2300      	movs	r3, #0
 80085f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	f043 0201 	orr.w	r2, r3, #1
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	3301      	adds	r3, #1
 8008602:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	4a09      	ldr	r2, [pc, #36]	; (800862c <USB_CoreReset+0x64>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d901      	bls.n	8008610 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800860c:	2303      	movs	r3, #3
 800860e:	e006      	b.n	800861e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	2b01      	cmp	r3, #1
 800861a:	d0f0      	beq.n	80085fe <USB_CoreReset+0x36>

  return HAL_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	00030d40 	.word	0x00030d40

08008630 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800863c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008640:	f002 fc8a 	bl	800af58 <USBD_static_malloc>
 8008644:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d109      	bne.n	8008660 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	32b0      	adds	r2, #176	; 0xb0
 8008656:	2100      	movs	r1, #0
 8008658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800865c:	2302      	movs	r3, #2
 800865e:	e0d4      	b.n	800880a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008660:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008664:	2100      	movs	r1, #0
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f002 fce4 	bl	800b034 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	32b0      	adds	r2, #176	; 0xb0
 8008676:	68f9      	ldr	r1, [r7, #12]
 8008678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	32b0      	adds	r2, #176	; 0xb0
 8008686:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	7c1b      	ldrb	r3, [r3, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d138      	bne.n	800870a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008698:	4b5e      	ldr	r3, [pc, #376]	; (8008814 <USBD_CDC_Init+0x1e4>)
 800869a:	7819      	ldrb	r1, [r3, #0]
 800869c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086a0:	2202      	movs	r2, #2
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f002 fb35 	bl	800ad12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80086a8:	4b5a      	ldr	r3, [pc, #360]	; (8008814 <USBD_CDC_Init+0x1e4>)
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	f003 020f 	and.w	r2, r3, #15
 80086b0:	6879      	ldr	r1, [r7, #4]
 80086b2:	4613      	mov	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	440b      	add	r3, r1
 80086bc:	3324      	adds	r3, #36	; 0x24
 80086be:	2201      	movs	r2, #1
 80086c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80086c2:	4b55      	ldr	r3, [pc, #340]	; (8008818 <USBD_CDC_Init+0x1e8>)
 80086c4:	7819      	ldrb	r1, [r3, #0]
 80086c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086ca:	2202      	movs	r2, #2
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f002 fb20 	bl	800ad12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80086d2:	4b51      	ldr	r3, [pc, #324]	; (8008818 <USBD_CDC_Init+0x1e8>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	f003 020f 	and.w	r2, r3, #15
 80086da:	6879      	ldr	r1, [r7, #4]
 80086dc:	4613      	mov	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	440b      	add	r3, r1
 80086e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80086ea:	2201      	movs	r2, #1
 80086ec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80086ee:	4b4b      	ldr	r3, [pc, #300]	; (800881c <USBD_CDC_Init+0x1ec>)
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	f003 020f 	and.w	r2, r3, #15
 80086f6:	6879      	ldr	r1, [r7, #4]
 80086f8:	4613      	mov	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	440b      	add	r3, r1
 8008702:	3326      	adds	r3, #38	; 0x26
 8008704:	2210      	movs	r2, #16
 8008706:	801a      	strh	r2, [r3, #0]
 8008708:	e035      	b.n	8008776 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800870a:	4b42      	ldr	r3, [pc, #264]	; (8008814 <USBD_CDC_Init+0x1e4>)
 800870c:	7819      	ldrb	r1, [r3, #0]
 800870e:	2340      	movs	r3, #64	; 0x40
 8008710:	2202      	movs	r2, #2
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f002 fafd 	bl	800ad12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008718:	4b3e      	ldr	r3, [pc, #248]	; (8008814 <USBD_CDC_Init+0x1e4>)
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	f003 020f 	and.w	r2, r3, #15
 8008720:	6879      	ldr	r1, [r7, #4]
 8008722:	4613      	mov	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4413      	add	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	440b      	add	r3, r1
 800872c:	3324      	adds	r3, #36	; 0x24
 800872e:	2201      	movs	r2, #1
 8008730:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008732:	4b39      	ldr	r3, [pc, #228]	; (8008818 <USBD_CDC_Init+0x1e8>)
 8008734:	7819      	ldrb	r1, [r3, #0]
 8008736:	2340      	movs	r3, #64	; 0x40
 8008738:	2202      	movs	r2, #2
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f002 fae9 	bl	800ad12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008740:	4b35      	ldr	r3, [pc, #212]	; (8008818 <USBD_CDC_Init+0x1e8>)
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	f003 020f 	and.w	r2, r3, #15
 8008748:	6879      	ldr	r1, [r7, #4]
 800874a:	4613      	mov	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	4413      	add	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	440b      	add	r3, r1
 8008754:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008758:	2201      	movs	r2, #1
 800875a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800875c:	4b2f      	ldr	r3, [pc, #188]	; (800881c <USBD_CDC_Init+0x1ec>)
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	f003 020f 	and.w	r2, r3, #15
 8008764:	6879      	ldr	r1, [r7, #4]
 8008766:	4613      	mov	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4413      	add	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	440b      	add	r3, r1
 8008770:	3326      	adds	r3, #38	; 0x26
 8008772:	2210      	movs	r2, #16
 8008774:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008776:	4b29      	ldr	r3, [pc, #164]	; (800881c <USBD_CDC_Init+0x1ec>)
 8008778:	7819      	ldrb	r1, [r3, #0]
 800877a:	2308      	movs	r3, #8
 800877c:	2203      	movs	r2, #3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f002 fac7 	bl	800ad12 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008784:	4b25      	ldr	r3, [pc, #148]	; (800881c <USBD_CDC_Init+0x1ec>)
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	f003 020f 	and.w	r2, r3, #15
 800878c:	6879      	ldr	r1, [r7, #4]
 800878e:	4613      	mov	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	440b      	add	r3, r1
 8008798:	3324      	adds	r3, #36	; 0x24
 800879a:	2201      	movs	r2, #1
 800879c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	33b0      	adds	r3, #176	; 0xb0
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d101      	bne.n	80087d8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80087d4:	2302      	movs	r3, #2
 80087d6:	e018      	b.n	800880a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	7c1b      	ldrb	r3, [r3, #16]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d10a      	bne.n	80087f6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087e0:	4b0d      	ldr	r3, [pc, #52]	; (8008818 <USBD_CDC_Init+0x1e8>)
 80087e2:	7819      	ldrb	r1, [r3, #0]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f002 fb7e 	bl	800aef0 <USBD_LL_PrepareReceive>
 80087f4:	e008      	b.n	8008808 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087f6:	4b08      	ldr	r3, [pc, #32]	; (8008818 <USBD_CDC_Init+0x1e8>)
 80087f8:	7819      	ldrb	r1, [r3, #0]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008800:	2340      	movs	r3, #64	; 0x40
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f002 fb74 	bl	800aef0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	200000a7 	.word	0x200000a7
 8008818:	200000a8 	.word	0x200000a8
 800881c:	200000a9 	.word	0x200000a9

08008820 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	460b      	mov	r3, r1
 800882a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800882c:	4b3a      	ldr	r3, [pc, #232]	; (8008918 <USBD_CDC_DeInit+0xf8>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	4619      	mov	r1, r3
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f002 fa93 	bl	800ad5e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008838:	4b37      	ldr	r3, [pc, #220]	; (8008918 <USBD_CDC_DeInit+0xf8>)
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	f003 020f 	and.w	r2, r3, #15
 8008840:	6879      	ldr	r1, [r7, #4]
 8008842:	4613      	mov	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	4413      	add	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	440b      	add	r3, r1
 800884c:	3324      	adds	r3, #36	; 0x24
 800884e:	2200      	movs	r2, #0
 8008850:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008852:	4b32      	ldr	r3, [pc, #200]	; (800891c <USBD_CDC_DeInit+0xfc>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	4619      	mov	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f002 fa80 	bl	800ad5e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800885e:	4b2f      	ldr	r3, [pc, #188]	; (800891c <USBD_CDC_DeInit+0xfc>)
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	f003 020f 	and.w	r2, r3, #15
 8008866:	6879      	ldr	r1, [r7, #4]
 8008868:	4613      	mov	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	4413      	add	r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	440b      	add	r3, r1
 8008872:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008876:	2200      	movs	r2, #0
 8008878:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800887a:	4b29      	ldr	r3, [pc, #164]	; (8008920 <USBD_CDC_DeInit+0x100>)
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	4619      	mov	r1, r3
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f002 fa6c 	bl	800ad5e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008886:	4b26      	ldr	r3, [pc, #152]	; (8008920 <USBD_CDC_DeInit+0x100>)
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	f003 020f 	and.w	r2, r3, #15
 800888e:	6879      	ldr	r1, [r7, #4]
 8008890:	4613      	mov	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4413      	add	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	440b      	add	r3, r1
 800889a:	3324      	adds	r3, #36	; 0x24
 800889c:	2200      	movs	r2, #0
 800889e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80088a0:	4b1f      	ldr	r3, [pc, #124]	; (8008920 <USBD_CDC_DeInit+0x100>)
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	f003 020f 	and.w	r2, r3, #15
 80088a8:	6879      	ldr	r1, [r7, #4]
 80088aa:	4613      	mov	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4413      	add	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	440b      	add	r3, r1
 80088b4:	3326      	adds	r3, #38	; 0x26
 80088b6:	2200      	movs	r2, #0
 80088b8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	32b0      	adds	r2, #176	; 0xb0
 80088c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d01f      	beq.n	800890c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	33b0      	adds	r3, #176	; 0xb0
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	4413      	add	r3, r2
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	32b0      	adds	r2, #176	; 0xb0
 80088ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f002 fb40 	bl	800af74 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	32b0      	adds	r2, #176	; 0xb0
 80088fe:	2100      	movs	r1, #0
 8008900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	200000a7 	.word	0x200000a7
 800891c:	200000a8 	.word	0x200000a8
 8008920:	200000a9 	.word	0x200000a9

08008924 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	32b0      	adds	r2, #176	; 0xb0
 8008938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800893c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800893e:	2300      	movs	r3, #0
 8008940:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008942:	2300      	movs	r3, #0
 8008944:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d101      	bne.n	8008954 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008950:	2303      	movs	r3, #3
 8008952:	e0bf      	b.n	8008ad4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800895c:	2b00      	cmp	r3, #0
 800895e:	d050      	beq.n	8008a02 <USBD_CDC_Setup+0xde>
 8008960:	2b20      	cmp	r3, #32
 8008962:	f040 80af 	bne.w	8008ac4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	88db      	ldrh	r3, [r3, #6]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d03a      	beq.n	80089e4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	b25b      	sxtb	r3, r3
 8008974:	2b00      	cmp	r3, #0
 8008976:	da1b      	bge.n	80089b0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	33b0      	adds	r3, #176	; 0xb0
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	4413      	add	r3, r2
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	683a      	ldr	r2, [r7, #0]
 800898c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800898e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008990:	683a      	ldr	r2, [r7, #0]
 8008992:	88d2      	ldrh	r2, [r2, #6]
 8008994:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	88db      	ldrh	r3, [r3, #6]
 800899a:	2b07      	cmp	r3, #7
 800899c:	bf28      	it	cs
 800899e:	2307      	movcs	r3, #7
 80089a0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	89fa      	ldrh	r2, [r7, #14]
 80089a6:	4619      	mov	r1, r3
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f001 fd89 	bl	800a4c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80089ae:	e090      	b.n	8008ad2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	785a      	ldrb	r2, [r3, #1]
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	88db      	ldrh	r3, [r3, #6]
 80089be:	2b3f      	cmp	r3, #63	; 0x3f
 80089c0:	d803      	bhi.n	80089ca <USBD_CDC_Setup+0xa6>
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	88db      	ldrh	r3, [r3, #6]
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	e000      	b.n	80089cc <USBD_CDC_Setup+0xa8>
 80089ca:	2240      	movs	r2, #64	; 0x40
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80089d2:	6939      	ldr	r1, [r7, #16]
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80089da:	461a      	mov	r2, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f001 fd9b 	bl	800a518 <USBD_CtlPrepareRx>
      break;
 80089e2:	e076      	b.n	8008ad2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	33b0      	adds	r3, #176	; 0xb0
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	7850      	ldrb	r0, [r2, #1]
 80089fa:	2200      	movs	r2, #0
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	4798      	blx	r3
      break;
 8008a00:	e067      	b.n	8008ad2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	785b      	ldrb	r3, [r3, #1]
 8008a06:	2b0b      	cmp	r3, #11
 8008a08:	d851      	bhi.n	8008aae <USBD_CDC_Setup+0x18a>
 8008a0a:	a201      	add	r2, pc, #4	; (adr r2, 8008a10 <USBD_CDC_Setup+0xec>)
 8008a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a10:	08008a41 	.word	0x08008a41
 8008a14:	08008abd 	.word	0x08008abd
 8008a18:	08008aaf 	.word	0x08008aaf
 8008a1c:	08008aaf 	.word	0x08008aaf
 8008a20:	08008aaf 	.word	0x08008aaf
 8008a24:	08008aaf 	.word	0x08008aaf
 8008a28:	08008aaf 	.word	0x08008aaf
 8008a2c:	08008aaf 	.word	0x08008aaf
 8008a30:	08008aaf 	.word	0x08008aaf
 8008a34:	08008aaf 	.word	0x08008aaf
 8008a38:	08008a6b 	.word	0x08008a6b
 8008a3c:	08008a95 	.word	0x08008a95
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b03      	cmp	r3, #3
 8008a4a:	d107      	bne.n	8008a5c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008a4c:	f107 030a 	add.w	r3, r7, #10
 8008a50:	2202      	movs	r2, #2
 8008a52:	4619      	mov	r1, r3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f001 fd33 	bl	800a4c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a5a:	e032      	b.n	8008ac2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f001 fcbd 	bl	800a3de <USBD_CtlError>
            ret = USBD_FAIL;
 8008a64:	2303      	movs	r3, #3
 8008a66:	75fb      	strb	r3, [r7, #23]
          break;
 8008a68:	e02b      	b.n	8008ac2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	d107      	bne.n	8008a86 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008a76:	f107 030d 	add.w	r3, r7, #13
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f001 fd1e 	bl	800a4c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008a84:	e01d      	b.n	8008ac2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f001 fca8 	bl	800a3de <USBD_CtlError>
            ret = USBD_FAIL;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	75fb      	strb	r3, [r7, #23]
          break;
 8008a92:	e016      	b.n	8008ac2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	2b03      	cmp	r3, #3
 8008a9e:	d00f      	beq.n	8008ac0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f001 fc9b 	bl	800a3de <USBD_CtlError>
            ret = USBD_FAIL;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008aac:	e008      	b.n	8008ac0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008aae:	6839      	ldr	r1, [r7, #0]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f001 fc94 	bl	800a3de <USBD_CtlError>
          ret = USBD_FAIL;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	75fb      	strb	r3, [r7, #23]
          break;
 8008aba:	e002      	b.n	8008ac2 <USBD_CDC_Setup+0x19e>
          break;
 8008abc:	bf00      	nop
 8008abe:	e008      	b.n	8008ad2 <USBD_CDC_Setup+0x1ae>
          break;
 8008ac0:	bf00      	nop
      }
      break;
 8008ac2:	e006      	b.n	8008ad2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f001 fc89 	bl	800a3de <USBD_CtlError>
      ret = USBD_FAIL;
 8008acc:	2303      	movs	r3, #3
 8008ace:	75fb      	strb	r3, [r7, #23]
      break;
 8008ad0:	bf00      	nop
  }

  return (uint8_t)ret;
 8008ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3718      	adds	r7, #24
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008aee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	32b0      	adds	r2, #176	; 0xb0
 8008afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008b02:	2303      	movs	r3, #3
 8008b04:	e065      	b.n	8008bd2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	32b0      	adds	r2, #176	; 0xb0
 8008b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b14:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008b16:	78fb      	ldrb	r3, [r7, #3]
 8008b18:	f003 020f 	and.w	r2, r3, #15
 8008b1c:	6879      	ldr	r1, [r7, #4]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4413      	add	r3, r2
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	440b      	add	r3, r1
 8008b28:	3318      	adds	r3, #24
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d02f      	beq.n	8008b90 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008b30:	78fb      	ldrb	r3, [r7, #3]
 8008b32:	f003 020f 	and.w	r2, r3, #15
 8008b36:	6879      	ldr	r1, [r7, #4]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	440b      	add	r3, r1
 8008b42:	3318      	adds	r3, #24
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	78fb      	ldrb	r3, [r7, #3]
 8008b48:	f003 010f 	and.w	r1, r3, #15
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	460b      	mov	r3, r1
 8008b50:	00db      	lsls	r3, r3, #3
 8008b52:	440b      	add	r3, r1
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4403      	add	r3, r0
 8008b58:	3348      	adds	r3, #72	; 0x48
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b60:	fb01 f303 	mul.w	r3, r1, r3
 8008b64:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d112      	bne.n	8008b90 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008b6a:	78fb      	ldrb	r3, [r7, #3]
 8008b6c:	f003 020f 	and.w	r2, r3, #15
 8008b70:	6879      	ldr	r1, [r7, #4]
 8008b72:	4613      	mov	r3, r2
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	4413      	add	r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	440b      	add	r3, r1
 8008b7c:	3318      	adds	r3, #24
 8008b7e:	2200      	movs	r2, #0
 8008b80:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008b82:	78f9      	ldrb	r1, [r7, #3]
 8008b84:	2300      	movs	r3, #0
 8008b86:	2200      	movs	r2, #0
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f002 f990 	bl	800aeae <USBD_LL_Transmit>
 8008b8e:	e01f      	b.n	8008bd0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	33b0      	adds	r3, #176	; 0xb0
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	4413      	add	r3, r2
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d010      	beq.n	8008bd0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	33b0      	adds	r3, #176	; 0xb0
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4413      	add	r3, r2
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	68ba      	ldr	r2, [r7, #8]
 8008bc2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008bcc:	78fa      	ldrb	r2, [r7, #3]
 8008bce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b084      	sub	sp, #16
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
 8008be2:	460b      	mov	r3, r1
 8008be4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	32b0      	adds	r2, #176	; 0xb0
 8008bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	32b0      	adds	r2, #176	; 0xb0
 8008c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d101      	bne.n	8008c0c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e01a      	b.n	8008c42 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008c0c:	78fb      	ldrb	r3, [r7, #3]
 8008c0e:	4619      	mov	r1, r3
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f002 f98e 	bl	800af32 <USBD_LL_GetRxDataSize>
 8008c16:	4602      	mov	r2, r0
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	33b0      	adds	r3, #176	; 0xb0
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	4413      	add	r3, r2
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b084      	sub	sp, #16
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	32b0      	adds	r2, #176	; 0xb0
 8008c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d101      	bne.n	8008c6c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	e025      	b.n	8008cb8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	33b0      	adds	r3, #176	; 0xb0
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	4413      	add	r3, r2
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d01a      	beq.n	8008cb6 <USBD_CDC_EP0_RxReady+0x6c>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008c86:	2bff      	cmp	r3, #255	; 0xff
 8008c88:	d015      	beq.n	8008cb6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	33b0      	adds	r3, #176	; 0xb0
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	4413      	add	r3, r2
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008ca2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008caa:	b292      	uxth	r2, r2
 8008cac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	22ff      	movs	r2, #255	; 0xff
 8008cb2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008cc8:	2182      	movs	r1, #130	; 0x82
 8008cca:	4818      	ldr	r0, [pc, #96]	; (8008d2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ccc:	f000 fd4f 	bl	800976e <USBD_GetEpDesc>
 8008cd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008cd2:	2101      	movs	r1, #1
 8008cd4:	4815      	ldr	r0, [pc, #84]	; (8008d2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008cd6:	f000 fd4a 	bl	800976e <USBD_GetEpDesc>
 8008cda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008cdc:	2181      	movs	r1, #129	; 0x81
 8008cde:	4813      	ldr	r0, [pc, #76]	; (8008d2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ce0:	f000 fd45 	bl	800976e <USBD_GetEpDesc>
 8008ce4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	2210      	movs	r2, #16
 8008cf0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d006      	beq.n	8008d06 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d00:	711a      	strb	r2, [r3, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d006      	beq.n	8008d1a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d14:	711a      	strb	r2, [r3, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2243      	movs	r2, #67	; 0x43
 8008d1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008d20:	4b02      	ldr	r3, [pc, #8]	; (8008d2c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3718      	adds	r7, #24
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20000064 	.word	0x20000064

08008d30 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008d38:	2182      	movs	r1, #130	; 0x82
 8008d3a:	4818      	ldr	r0, [pc, #96]	; (8008d9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d3c:	f000 fd17 	bl	800976e <USBD_GetEpDesc>
 8008d40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008d42:	2101      	movs	r1, #1
 8008d44:	4815      	ldr	r0, [pc, #84]	; (8008d9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d46:	f000 fd12 	bl	800976e <USBD_GetEpDesc>
 8008d4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008d4c:	2181      	movs	r1, #129	; 0x81
 8008d4e:	4813      	ldr	r0, [pc, #76]	; (8008d9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008d50:	f000 fd0d 	bl	800976e <USBD_GetEpDesc>
 8008d54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d002      	beq.n	8008d62 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	2210      	movs	r2, #16
 8008d60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d006      	beq.n	8008d76 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	711a      	strb	r2, [r3, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f042 0202 	orr.w	r2, r2, #2
 8008d74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d006      	beq.n	8008d8a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	711a      	strb	r2, [r3, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f042 0202 	orr.w	r2, r2, #2
 8008d88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2243      	movs	r2, #67	; 0x43
 8008d8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008d90:	4b02      	ldr	r3, [pc, #8]	; (8008d9c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3718      	adds	r7, #24
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	20000064 	.word	0x20000064

08008da0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008da8:	2182      	movs	r1, #130	; 0x82
 8008daa:	4818      	ldr	r0, [pc, #96]	; (8008e0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008dac:	f000 fcdf 	bl	800976e <USBD_GetEpDesc>
 8008db0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008db2:	2101      	movs	r1, #1
 8008db4:	4815      	ldr	r0, [pc, #84]	; (8008e0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008db6:	f000 fcda 	bl	800976e <USBD_GetEpDesc>
 8008dba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008dbc:	2181      	movs	r1, #129	; 0x81
 8008dbe:	4813      	ldr	r0, [pc, #76]	; (8008e0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008dc0:	f000 fcd5 	bl	800976e <USBD_GetEpDesc>
 8008dc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d002      	beq.n	8008dd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	2210      	movs	r2, #16
 8008dd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d006      	beq.n	8008de6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008de0:	711a      	strb	r2, [r3, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d006      	beq.n	8008dfa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008df4:	711a      	strb	r2, [r3, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2243      	movs	r2, #67	; 0x43
 8008dfe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e00:	4b02      	ldr	r3, [pc, #8]	; (8008e0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3718      	adds	r7, #24
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	20000064 	.word	0x20000064

08008e10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	220a      	movs	r2, #10
 8008e1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008e1e:	4b03      	ldr	r3, [pc, #12]	; (8008e2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	20000020 	.word	0x20000020

08008e30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d101      	bne.n	8008e44 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008e40:	2303      	movs	r3, #3
 8008e42:	e009      	b.n	8008e58 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	33b0      	adds	r3, #176	; 0xb0
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	4413      	add	r3, r2
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b087      	sub	sp, #28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	32b0      	adds	r2, #176	; 0xb0
 8008e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e7e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d101      	bne.n	8008e8a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e008      	b.n	8008e9c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	371c      	adds	r7, #28
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	32b0      	adds	r2, #176	; 0xb0
 8008ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d101      	bne.n	8008ecc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e004      	b.n	8008ed6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	683a      	ldr	r2, [r7, #0]
 8008ed0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
	...

08008ee4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	32b0      	adds	r2, #176	; 0xb0
 8008ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008efa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008efc:	2301      	movs	r3, #1
 8008efe:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	32b0      	adds	r2, #176	; 0xb0
 8008f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d101      	bne.n	8008f16 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008f12:	2303      	movs	r3, #3
 8008f14:	e025      	b.n	8008f62 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d11f      	bne.n	8008f60 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008f28:	4b10      	ldr	r3, [pc, #64]	; (8008f6c <USBD_CDC_TransmitPacket+0x88>)
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	f003 020f 	and.w	r2, r3, #15
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	4413      	add	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4403      	add	r3, r0
 8008f42:	3318      	adds	r3, #24
 8008f44:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008f46:	4b09      	ldr	r3, [pc, #36]	; (8008f6c <USBD_CDC_TransmitPacket+0x88>)
 8008f48:	7819      	ldrb	r1, [r3, #0]
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f001 ffa9 	bl	800aeae <USBD_LL_Transmit>

    ret = USBD_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3710      	adds	r7, #16
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	200000a7 	.word	0x200000a7

08008f70 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	32b0      	adds	r2, #176	; 0xb0
 8008f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f86:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	32b0      	adds	r2, #176	; 0xb0
 8008f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d101      	bne.n	8008f9e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	e018      	b.n	8008fd0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	7c1b      	ldrb	r3, [r3, #16]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10a      	bne.n	8008fbc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008fa6:	4b0c      	ldr	r3, [pc, #48]	; (8008fd8 <USBD_CDC_ReceivePacket+0x68>)
 8008fa8:	7819      	ldrb	r1, [r3, #0]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f001 ff9b 	bl	800aef0 <USBD_LL_PrepareReceive>
 8008fba:	e008      	b.n	8008fce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008fbc:	4b06      	ldr	r3, [pc, #24]	; (8008fd8 <USBD_CDC_ReceivePacket+0x68>)
 8008fbe:	7819      	ldrb	r1, [r3, #0]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008fc6:	2340      	movs	r3, #64	; 0x40
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f001 ff91 	bl	800aef0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	200000a8 	.word	0x200000a8

08008fdc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d101      	bne.n	8008ff4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e01f      	b.n	8009034 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2200      	movs	r2, #0
 8009008:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d003      	beq.n	800901a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2201      	movs	r2, #1
 800901e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	79fa      	ldrb	r2, [r7, #7]
 8009026:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f001 fe0b 	bl	800ac44 <USBD_LL_Init>
 800902e:	4603      	mov	r3, r0
 8009030:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009032:	7dfb      	ldrb	r3, [r7, #23]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3718      	adds	r7, #24
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009046:	2300      	movs	r3, #0
 8009048:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d101      	bne.n	8009054 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009050:	2303      	movs	r3, #3
 8009052:	e025      	b.n	80090a0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	683a      	ldr	r2, [r7, #0]
 8009058:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	32ae      	adds	r2, #174	; 0xae
 8009066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800906a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00f      	beq.n	8009090 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	32ae      	adds	r2, #174	; 0xae
 800907a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800907e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009080:	f107 020e 	add.w	r2, r7, #14
 8009084:	4610      	mov	r0, r2
 8009086:	4798      	blx	r3
 8009088:	4602      	mov	r2, r0
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009096:	1c5a      	adds	r2, r3, #1
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f001 fe13 	bl	800acdc <USBD_LL_Start>
 80090b6:	4603      	mov	r3, r0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3708      	adds	r7, #8
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80090c8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	370c      	adds	r7, #12
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b084      	sub	sp, #16
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
 80090de:	460b      	mov	r3, r1
 80090e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80090e2:	2300      	movs	r3, #0
 80090e4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d009      	beq.n	8009104 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	78fa      	ldrb	r2, [r7, #3]
 80090fa:	4611      	mov	r1, r2
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	4798      	blx	r3
 8009100:	4603      	mov	r3, r0
 8009102:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009104:	7bfb      	ldrb	r3, [r7, #15]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b084      	sub	sp, #16
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
 8009116:	460b      	mov	r3, r1
 8009118:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	78fa      	ldrb	r2, [r7, #3]
 8009128:	4611      	mov	r1, r2
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	4798      	blx	r3
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d001      	beq.n	8009138 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009134:	2303      	movs	r3, #3
 8009136:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009138:	7bfb      	ldrb	r3, [r7, #15]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b084      	sub	sp, #16
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009152:	6839      	ldr	r1, [r7, #0]
 8009154:	4618      	mov	r0, r3
 8009156:	f001 f908 	bl	800a36a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2201      	movs	r2, #1
 800915e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009168:	461a      	mov	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009176:	f003 031f 	and.w	r3, r3, #31
 800917a:	2b02      	cmp	r3, #2
 800917c:	d01a      	beq.n	80091b4 <USBD_LL_SetupStage+0x72>
 800917e:	2b02      	cmp	r3, #2
 8009180:	d822      	bhi.n	80091c8 <USBD_LL_SetupStage+0x86>
 8009182:	2b00      	cmp	r3, #0
 8009184:	d002      	beq.n	800918c <USBD_LL_SetupStage+0x4a>
 8009186:	2b01      	cmp	r3, #1
 8009188:	d00a      	beq.n	80091a0 <USBD_LL_SetupStage+0x5e>
 800918a:	e01d      	b.n	80091c8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009192:	4619      	mov	r1, r3
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fb5f 	bl	8009858 <USBD_StdDevReq>
 800919a:	4603      	mov	r3, r0
 800919c:	73fb      	strb	r3, [r7, #15]
      break;
 800919e:	e020      	b.n	80091e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091a6:	4619      	mov	r1, r3
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fbc7 	bl	800993c <USBD_StdItfReq>
 80091ae:	4603      	mov	r3, r0
 80091b0:	73fb      	strb	r3, [r7, #15]
      break;
 80091b2:	e016      	b.n	80091e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fc29 	bl	8009a14 <USBD_StdEPReq>
 80091c2:	4603      	mov	r3, r0
 80091c4:	73fb      	strb	r3, [r7, #15]
      break;
 80091c6:	e00c      	b.n	80091e2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80091ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	4619      	mov	r1, r3
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f001 fde0 	bl	800ad9c <USBD_LL_StallEP>
 80091dc:	4603      	mov	r3, r0
 80091de:	73fb      	strb	r3, [r7, #15]
      break;
 80091e0:	bf00      	nop
  }

  return ret;
 80091e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b086      	sub	sp, #24
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	460b      	mov	r3, r1
 80091f6:	607a      	str	r2, [r7, #4]
 80091f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80091fe:	7afb      	ldrb	r3, [r7, #11]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d16e      	bne.n	80092e2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800920a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009212:	2b03      	cmp	r3, #3
 8009214:	f040 8098 	bne.w	8009348 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	689a      	ldr	r2, [r3, #8]
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	429a      	cmp	r2, r3
 8009222:	d913      	bls.n	800924c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	689a      	ldr	r2, [r3, #8]
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	1ad2      	subs	r2, r2, r3
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	68da      	ldr	r2, [r3, #12]
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	4293      	cmp	r3, r2
 800923c:	bf28      	it	cs
 800923e:	4613      	movcs	r3, r2
 8009240:	461a      	mov	r2, r3
 8009242:	6879      	ldr	r1, [r7, #4]
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f001 f984 	bl	800a552 <USBD_CtlContinueRx>
 800924a:	e07d      	b.n	8009348 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009252:	f003 031f 	and.w	r3, r3, #31
 8009256:	2b02      	cmp	r3, #2
 8009258:	d014      	beq.n	8009284 <USBD_LL_DataOutStage+0x98>
 800925a:	2b02      	cmp	r3, #2
 800925c:	d81d      	bhi.n	800929a <USBD_LL_DataOutStage+0xae>
 800925e:	2b00      	cmp	r3, #0
 8009260:	d002      	beq.n	8009268 <USBD_LL_DataOutStage+0x7c>
 8009262:	2b01      	cmp	r3, #1
 8009264:	d003      	beq.n	800926e <USBD_LL_DataOutStage+0x82>
 8009266:	e018      	b.n	800929a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009268:	2300      	movs	r3, #0
 800926a:	75bb      	strb	r3, [r7, #22]
            break;
 800926c:	e018      	b.n	80092a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009274:	b2db      	uxtb	r3, r3
 8009276:	4619      	mov	r1, r3
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f000 fa5e 	bl	800973a <USBD_CoreFindIF>
 800927e:	4603      	mov	r3, r0
 8009280:	75bb      	strb	r3, [r7, #22]
            break;
 8009282:	e00d      	b.n	80092a0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800928a:	b2db      	uxtb	r3, r3
 800928c:	4619      	mov	r1, r3
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f000 fa60 	bl	8009754 <USBD_CoreFindEP>
 8009294:	4603      	mov	r3, r0
 8009296:	75bb      	strb	r3, [r7, #22]
            break;
 8009298:	e002      	b.n	80092a0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800929a:	2300      	movs	r3, #0
 800929c:	75bb      	strb	r3, [r7, #22]
            break;
 800929e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80092a0:	7dbb      	ldrb	r3, [r7, #22]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d119      	bne.n	80092da <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	2b03      	cmp	r3, #3
 80092b0:	d113      	bne.n	80092da <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80092b2:	7dba      	ldrb	r2, [r7, #22]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	32ae      	adds	r2, #174	; 0xae
 80092b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00b      	beq.n	80092da <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80092c2:	7dba      	ldrb	r2, [r7, #22]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80092ca:	7dba      	ldrb	r2, [r7, #22]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	32ae      	adds	r2, #174	; 0xae
 80092d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f001 f94a 	bl	800a574 <USBD_CtlSendStatus>
 80092e0:	e032      	b.n	8009348 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80092e2:	7afb      	ldrb	r3, [r7, #11]
 80092e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	4619      	mov	r1, r3
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f000 fa31 	bl	8009754 <USBD_CoreFindEP>
 80092f2:	4603      	mov	r3, r0
 80092f4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092f6:	7dbb      	ldrb	r3, [r7, #22]
 80092f8:	2bff      	cmp	r3, #255	; 0xff
 80092fa:	d025      	beq.n	8009348 <USBD_LL_DataOutStage+0x15c>
 80092fc:	7dbb      	ldrb	r3, [r7, #22]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d122      	bne.n	8009348 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009308:	b2db      	uxtb	r3, r3
 800930a:	2b03      	cmp	r3, #3
 800930c:	d117      	bne.n	800933e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800930e:	7dba      	ldrb	r2, [r7, #22]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	32ae      	adds	r2, #174	; 0xae
 8009314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009318:	699b      	ldr	r3, [r3, #24]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00f      	beq.n	800933e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800931e:	7dba      	ldrb	r2, [r7, #22]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009326:	7dba      	ldrb	r2, [r7, #22]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	32ae      	adds	r2, #174	; 0xae
 800932c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	7afa      	ldrb	r2, [r7, #11]
 8009334:	4611      	mov	r1, r2
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	4798      	blx	r3
 800933a:	4603      	mov	r3, r0
 800933c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800933e:	7dfb      	ldrb	r3, [r7, #23]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d001      	beq.n	8009348 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009344:	7dfb      	ldrb	r3, [r7, #23]
 8009346:	e000      	b.n	800934a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3718      	adds	r7, #24
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b086      	sub	sp, #24
 8009356:	af00      	add	r7, sp, #0
 8009358:	60f8      	str	r0, [r7, #12]
 800935a:	460b      	mov	r3, r1
 800935c:	607a      	str	r2, [r7, #4]
 800935e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009360:	7afb      	ldrb	r3, [r7, #11]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d16f      	bne.n	8009446 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	3314      	adds	r3, #20
 800936a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009372:	2b02      	cmp	r3, #2
 8009374:	d15a      	bne.n	800942c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	689a      	ldr	r2, [r3, #8]
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	429a      	cmp	r2, r3
 8009380:	d914      	bls.n	80093ac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	689a      	ldr	r2, [r3, #8]
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	1ad2      	subs	r2, r2, r3
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	461a      	mov	r2, r3
 8009396:	6879      	ldr	r1, [r7, #4]
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f001 f8ac 	bl	800a4f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800939e:	2300      	movs	r3, #0
 80093a0:	2200      	movs	r2, #0
 80093a2:	2100      	movs	r1, #0
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f001 fda3 	bl	800aef0 <USBD_LL_PrepareReceive>
 80093aa:	e03f      	b.n	800942c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	68da      	ldr	r2, [r3, #12]
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d11c      	bne.n	80093f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	685a      	ldr	r2, [r3, #4]
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d316      	bcc.n	80093f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	685a      	ldr	r2, [r3, #4]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d20f      	bcs.n	80093f2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80093d2:	2200      	movs	r2, #0
 80093d4:	2100      	movs	r1, #0
 80093d6:	68f8      	ldr	r0, [r7, #12]
 80093d8:	f001 f88d 	bl	800a4f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2200      	movs	r2, #0
 80093e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093e4:	2300      	movs	r3, #0
 80093e6:	2200      	movs	r2, #0
 80093e8:	2100      	movs	r1, #0
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f001 fd80 	bl	800aef0 <USBD_LL_PrepareReceive>
 80093f0:	e01c      	b.n	800942c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	2b03      	cmp	r3, #3
 80093fc:	d10f      	bne.n	800941e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d009      	beq.n	800941e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800941e:	2180      	movs	r1, #128	; 0x80
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f001 fcbb 	bl	800ad9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f001 f8b7 	bl	800a59a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d03a      	beq.n	80094ac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f7ff fe42 	bl	80090c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009444:	e032      	b.n	80094ac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009446:	7afb      	ldrb	r3, [r7, #11]
 8009448:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800944c:	b2db      	uxtb	r3, r3
 800944e:	4619      	mov	r1, r3
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f000 f97f 	bl	8009754 <USBD_CoreFindEP>
 8009456:	4603      	mov	r3, r0
 8009458:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800945a:	7dfb      	ldrb	r3, [r7, #23]
 800945c:	2bff      	cmp	r3, #255	; 0xff
 800945e:	d025      	beq.n	80094ac <USBD_LL_DataInStage+0x15a>
 8009460:	7dfb      	ldrb	r3, [r7, #23]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d122      	bne.n	80094ac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800946c:	b2db      	uxtb	r3, r3
 800946e:	2b03      	cmp	r3, #3
 8009470:	d11c      	bne.n	80094ac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009472:	7dfa      	ldrb	r2, [r7, #23]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	32ae      	adds	r2, #174	; 0xae
 8009478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800947c:	695b      	ldr	r3, [r3, #20]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d014      	beq.n	80094ac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009482:	7dfa      	ldrb	r2, [r7, #23]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800948a:	7dfa      	ldrb	r2, [r7, #23]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	32ae      	adds	r2, #174	; 0xae
 8009490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009494:	695b      	ldr	r3, [r3, #20]
 8009496:	7afa      	ldrb	r2, [r7, #11]
 8009498:	4611      	mov	r1, r2
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	4798      	blx	r3
 800949e:	4603      	mov	r3, r0
 80094a0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80094a2:	7dbb      	ldrb	r3, [r7, #22]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d001      	beq.n	80094ac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80094a8:	7dbb      	ldrb	r3, [r7, #22]
 80094aa:	e000      	b.n	80094ae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3718      	adds	r7, #24
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b084      	sub	sp, #16
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d014      	beq.n	800951c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00e      	beq.n	800951c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	6852      	ldr	r2, [r2, #4]
 800950a:	b2d2      	uxtb	r2, r2
 800950c:	4611      	mov	r1, r2
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	4798      	blx	r3
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d001      	beq.n	800951c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009518:	2303      	movs	r3, #3
 800951a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800951c:	2340      	movs	r3, #64	; 0x40
 800951e:	2200      	movs	r2, #0
 8009520:	2100      	movs	r1, #0
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f001 fbf5 	bl	800ad12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2240      	movs	r2, #64	; 0x40
 8009534:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009538:	2340      	movs	r3, #64	; 0x40
 800953a:	2200      	movs	r2, #0
 800953c:	2180      	movs	r1, #128	; 0x80
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f001 fbe7 	bl	800ad12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2240      	movs	r2, #64	; 0x40
 800954e:	621a      	str	r2, [r3, #32]

  return ret;
 8009550:	7bfb      	ldrb	r3, [r7, #15]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800955a:	b480      	push	{r7}
 800955c:	b083      	sub	sp, #12
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	460b      	mov	r3, r1
 8009564:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	78fa      	ldrb	r2, [r7, #3]
 800956a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	370c      	adds	r7, #12
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr

0800957a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800957a:	b480      	push	{r7}
 800957c:	b083      	sub	sp, #12
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009588:	b2da      	uxtb	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2204      	movs	r2, #4
 8009594:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	370c      	adds	r7, #12
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr

080095a6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80095a6:	b480      	push	{r7}
 80095a8:	b083      	sub	sp, #12
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	2b04      	cmp	r3, #4
 80095b8:	d106      	bne.n	80095c8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80095c0:	b2da      	uxtb	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80095c8:	2300      	movs	r3, #0
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	370c      	adds	r7, #12
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr

080095d6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b082      	sub	sp, #8
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	2b03      	cmp	r3, #3
 80095e8:	d110      	bne.n	800960c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00b      	beq.n	800960c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095fa:	69db      	ldr	r3, [r3, #28]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d005      	beq.n	800960c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009606:	69db      	ldr	r3, [r3, #28]
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b082      	sub	sp, #8
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
 800961e:	460b      	mov	r3, r1
 8009620:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	32ae      	adds	r2, #174	; 0xae
 800962c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d101      	bne.n	8009638 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009634:	2303      	movs	r3, #3
 8009636:	e01c      	b.n	8009672 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800963e:	b2db      	uxtb	r3, r3
 8009640:	2b03      	cmp	r3, #3
 8009642:	d115      	bne.n	8009670 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	32ae      	adds	r2, #174	; 0xae
 800964e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009652:	6a1b      	ldr	r3, [r3, #32]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00b      	beq.n	8009670 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	32ae      	adds	r2, #174	; 0xae
 8009662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009666:	6a1b      	ldr	r3, [r3, #32]
 8009668:	78fa      	ldrb	r2, [r7, #3]
 800966a:	4611      	mov	r1, r2
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b082      	sub	sp, #8
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	460b      	mov	r3, r1
 8009684:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	32ae      	adds	r2, #174	; 0xae
 8009690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d101      	bne.n	800969c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009698:	2303      	movs	r3, #3
 800969a:	e01c      	b.n	80096d6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	2b03      	cmp	r3, #3
 80096a6:	d115      	bne.n	80096d4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	32ae      	adds	r2, #174	; 0xae
 80096b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00b      	beq.n	80096d4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	32ae      	adds	r2, #174	; 0xae
 80096c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096cc:	78fa      	ldrb	r2, [r7, #3]
 80096ce:	4611      	mov	r1, r2
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80096de:	b480      	push	{r7}
 80096e0:	b083      	sub	sp, #12
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80096fc:	2300      	movs	r3, #0
 80096fe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00e      	beq.n	8009730 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	6852      	ldr	r2, [r2, #4]
 800971e:	b2d2      	uxtb	r2, r2
 8009720:	4611      	mov	r1, r2
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	4798      	blx	r3
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d001      	beq.n	8009730 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800972c:	2303      	movs	r3, #3
 800972e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009730:	7bfb      	ldrb	r3, [r7, #15]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800973a:	b480      	push	{r7}
 800973c:	b083      	sub	sp, #12
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	460b      	mov	r3, r1
 8009744:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009746:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009748:	4618      	mov	r0, r3
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	460b      	mov	r3, r1
 800975e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009760:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009762:	4618      	mov	r0, r3
 8009764:	370c      	adds	r7, #12
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr

0800976e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b086      	sub	sp, #24
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	460b      	mov	r3, r1
 8009778:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009782:	2300      	movs	r3, #0
 8009784:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	885b      	ldrh	r3, [r3, #2]
 800978a:	b29a      	uxth	r2, r3
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	b29b      	uxth	r3, r3
 8009792:	429a      	cmp	r2, r3
 8009794:	d920      	bls.n	80097d8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	b29b      	uxth	r3, r3
 800979c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800979e:	e013      	b.n	80097c8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80097a0:	f107 030a 	add.w	r3, r7, #10
 80097a4:	4619      	mov	r1, r3
 80097a6:	6978      	ldr	r0, [r7, #20]
 80097a8:	f000 f81b 	bl	80097e2 <USBD_GetNextDesc>
 80097ac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	785b      	ldrb	r3, [r3, #1]
 80097b2:	2b05      	cmp	r3, #5
 80097b4:	d108      	bne.n	80097c8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	789b      	ldrb	r3, [r3, #2]
 80097be:	78fa      	ldrb	r2, [r7, #3]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d008      	beq.n	80097d6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80097c4:	2300      	movs	r3, #0
 80097c6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	885b      	ldrh	r3, [r3, #2]
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	897b      	ldrh	r3, [r7, #10]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d8e5      	bhi.n	80097a0 <USBD_GetEpDesc+0x32>
 80097d4:	e000      	b.n	80097d8 <USBD_GetEpDesc+0x6a>
          break;
 80097d6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80097d8:	693b      	ldr	r3, [r7, #16]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3718      	adds	r7, #24
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80097e2:	b480      	push	{r7}
 80097e4:	b085      	sub	sp, #20
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
 80097ea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	881a      	ldrh	r2, [r3, #0]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	4413      	add	r3, r2
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	461a      	mov	r2, r3
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4413      	add	r3, r2
 800980c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800980e:	68fb      	ldr	r3, [r7, #12]
}
 8009810:	4618      	mov	r0, r3
 8009812:	3714      	adds	r7, #20
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800981c:	b480      	push	{r7}
 800981e:	b087      	sub	sp, #28
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	3301      	adds	r3, #1
 8009832:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800983a:	8a3b      	ldrh	r3, [r7, #16]
 800983c:	021b      	lsls	r3, r3, #8
 800983e:	b21a      	sxth	r2, r3
 8009840:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009844:	4313      	orrs	r3, r2
 8009846:	b21b      	sxth	r3, r3
 8009848:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800984a:	89fb      	ldrh	r3, [r7, #14]
}
 800984c:	4618      	mov	r0, r3
 800984e:	371c      	adds	r7, #28
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800986e:	2b40      	cmp	r3, #64	; 0x40
 8009870:	d005      	beq.n	800987e <USBD_StdDevReq+0x26>
 8009872:	2b40      	cmp	r3, #64	; 0x40
 8009874:	d857      	bhi.n	8009926 <USBD_StdDevReq+0xce>
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00f      	beq.n	800989a <USBD_StdDevReq+0x42>
 800987a:	2b20      	cmp	r3, #32
 800987c:	d153      	bne.n	8009926 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	32ae      	adds	r2, #174	; 0xae
 8009888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	6839      	ldr	r1, [r7, #0]
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	4798      	blx	r3
 8009894:	4603      	mov	r3, r0
 8009896:	73fb      	strb	r3, [r7, #15]
      break;
 8009898:	e04a      	b.n	8009930 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	785b      	ldrb	r3, [r3, #1]
 800989e:	2b09      	cmp	r3, #9
 80098a0:	d83b      	bhi.n	800991a <USBD_StdDevReq+0xc2>
 80098a2:	a201      	add	r2, pc, #4	; (adr r2, 80098a8 <USBD_StdDevReq+0x50>)
 80098a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a8:	080098fd 	.word	0x080098fd
 80098ac:	08009911 	.word	0x08009911
 80098b0:	0800991b 	.word	0x0800991b
 80098b4:	08009907 	.word	0x08009907
 80098b8:	0800991b 	.word	0x0800991b
 80098bc:	080098db 	.word	0x080098db
 80098c0:	080098d1 	.word	0x080098d1
 80098c4:	0800991b 	.word	0x0800991b
 80098c8:	080098f3 	.word	0x080098f3
 80098cc:	080098e5 	.word	0x080098e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fa3c 	bl	8009d50 <USBD_GetDescriptor>
          break;
 80098d8:	e024      	b.n	8009924 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80098da:	6839      	ldr	r1, [r7, #0]
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 fba1 	bl	800a024 <USBD_SetAddress>
          break;
 80098e2:	e01f      	b.n	8009924 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fbe0 	bl	800a0ac <USBD_SetConfig>
 80098ec:	4603      	mov	r3, r0
 80098ee:	73fb      	strb	r3, [r7, #15]
          break;
 80098f0:	e018      	b.n	8009924 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80098f2:	6839      	ldr	r1, [r7, #0]
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 fc83 	bl	800a200 <USBD_GetConfig>
          break;
 80098fa:	e013      	b.n	8009924 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80098fc:	6839      	ldr	r1, [r7, #0]
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 fcb4 	bl	800a26c <USBD_GetStatus>
          break;
 8009904:	e00e      	b.n	8009924 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009906:	6839      	ldr	r1, [r7, #0]
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 fce3 	bl	800a2d4 <USBD_SetFeature>
          break;
 800990e:	e009      	b.n	8009924 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 fd07 	bl	800a326 <USBD_ClrFeature>
          break;
 8009918:	e004      	b.n	8009924 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800991a:	6839      	ldr	r1, [r7, #0]
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 fd5e 	bl	800a3de <USBD_CtlError>
          break;
 8009922:	bf00      	nop
      }
      break;
 8009924:	e004      	b.n	8009930 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009926:	6839      	ldr	r1, [r7, #0]
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 fd58 	bl	800a3de <USBD_CtlError>
      break;
 800992e:	bf00      	nop
  }

  return ret;
 8009930:	7bfb      	ldrb	r3, [r7, #15]
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop

0800993c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009946:	2300      	movs	r3, #0
 8009948:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009952:	2b40      	cmp	r3, #64	; 0x40
 8009954:	d005      	beq.n	8009962 <USBD_StdItfReq+0x26>
 8009956:	2b40      	cmp	r3, #64	; 0x40
 8009958:	d852      	bhi.n	8009a00 <USBD_StdItfReq+0xc4>
 800995a:	2b00      	cmp	r3, #0
 800995c:	d001      	beq.n	8009962 <USBD_StdItfReq+0x26>
 800995e:	2b20      	cmp	r3, #32
 8009960:	d14e      	bne.n	8009a00 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009968:	b2db      	uxtb	r3, r3
 800996a:	3b01      	subs	r3, #1
 800996c:	2b02      	cmp	r3, #2
 800996e:	d840      	bhi.n	80099f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	889b      	ldrh	r3, [r3, #4]
 8009974:	b2db      	uxtb	r3, r3
 8009976:	2b01      	cmp	r3, #1
 8009978:	d836      	bhi.n	80099e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	889b      	ldrh	r3, [r3, #4]
 800997e:	b2db      	uxtb	r3, r3
 8009980:	4619      	mov	r1, r3
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f7ff fed9 	bl	800973a <USBD_CoreFindIF>
 8009988:	4603      	mov	r3, r0
 800998a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800998c:	7bbb      	ldrb	r3, [r7, #14]
 800998e:	2bff      	cmp	r3, #255	; 0xff
 8009990:	d01d      	beq.n	80099ce <USBD_StdItfReq+0x92>
 8009992:	7bbb      	ldrb	r3, [r7, #14]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d11a      	bne.n	80099ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009998:	7bba      	ldrb	r2, [r7, #14]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	32ae      	adds	r2, #174	; 0xae
 800999e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00f      	beq.n	80099c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80099a8:	7bba      	ldrb	r2, [r7, #14]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80099b0:	7bba      	ldrb	r2, [r7, #14]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	32ae      	adds	r2, #174	; 0xae
 80099b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	4798      	blx	r3
 80099c2:	4603      	mov	r3, r0
 80099c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80099c6:	e004      	b.n	80099d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80099c8:	2303      	movs	r3, #3
 80099ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80099cc:	e001      	b.n	80099d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80099ce:	2303      	movs	r3, #3
 80099d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	88db      	ldrh	r3, [r3, #6]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d110      	bne.n	80099fc <USBD_StdItfReq+0xc0>
 80099da:	7bfb      	ldrb	r3, [r7, #15]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10d      	bne.n	80099fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 fdc7 	bl	800a574 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80099e6:	e009      	b.n	80099fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80099e8:	6839      	ldr	r1, [r7, #0]
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fcf7 	bl	800a3de <USBD_CtlError>
          break;
 80099f0:	e004      	b.n	80099fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 fcf2 	bl	800a3de <USBD_CtlError>
          break;
 80099fa:	e000      	b.n	80099fe <USBD_StdItfReq+0xc2>
          break;
 80099fc:	bf00      	nop
      }
      break;
 80099fe:	e004      	b.n	8009a0a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009a00:	6839      	ldr	r1, [r7, #0]
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 fceb 	bl	800a3de <USBD_CtlError>
      break;
 8009a08:	bf00      	nop
  }

  return ret;
 8009a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3710      	adds	r7, #16
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	889b      	ldrh	r3, [r3, #4]
 8009a26:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a30:	2b40      	cmp	r3, #64	; 0x40
 8009a32:	d007      	beq.n	8009a44 <USBD_StdEPReq+0x30>
 8009a34:	2b40      	cmp	r3, #64	; 0x40
 8009a36:	f200 817f 	bhi.w	8009d38 <USBD_StdEPReq+0x324>
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d02a      	beq.n	8009a94 <USBD_StdEPReq+0x80>
 8009a3e:	2b20      	cmp	r3, #32
 8009a40:	f040 817a 	bne.w	8009d38 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009a44:	7bbb      	ldrb	r3, [r7, #14]
 8009a46:	4619      	mov	r1, r3
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f7ff fe83 	bl	8009754 <USBD_CoreFindEP>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a52:	7b7b      	ldrb	r3, [r7, #13]
 8009a54:	2bff      	cmp	r3, #255	; 0xff
 8009a56:	f000 8174 	beq.w	8009d42 <USBD_StdEPReq+0x32e>
 8009a5a:	7b7b      	ldrb	r3, [r7, #13]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f040 8170 	bne.w	8009d42 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009a62:	7b7a      	ldrb	r2, [r7, #13]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009a6a:	7b7a      	ldrb	r2, [r7, #13]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	32ae      	adds	r2, #174	; 0xae
 8009a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f000 8163 	beq.w	8009d42 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009a7c:	7b7a      	ldrb	r2, [r7, #13]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	32ae      	adds	r2, #174	; 0xae
 8009a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	4798      	blx	r3
 8009a8e:	4603      	mov	r3, r0
 8009a90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009a92:	e156      	b.n	8009d42 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	785b      	ldrb	r3, [r3, #1]
 8009a98:	2b03      	cmp	r3, #3
 8009a9a:	d008      	beq.n	8009aae <USBD_StdEPReq+0x9a>
 8009a9c:	2b03      	cmp	r3, #3
 8009a9e:	f300 8145 	bgt.w	8009d2c <USBD_StdEPReq+0x318>
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	f000 809b 	beq.w	8009bde <USBD_StdEPReq+0x1ca>
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d03c      	beq.n	8009b26 <USBD_StdEPReq+0x112>
 8009aac:	e13e      	b.n	8009d2c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	2b02      	cmp	r3, #2
 8009ab8:	d002      	beq.n	8009ac0 <USBD_StdEPReq+0xac>
 8009aba:	2b03      	cmp	r3, #3
 8009abc:	d016      	beq.n	8009aec <USBD_StdEPReq+0xd8>
 8009abe:	e02c      	b.n	8009b1a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ac0:	7bbb      	ldrb	r3, [r7, #14]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d00d      	beq.n	8009ae2 <USBD_StdEPReq+0xce>
 8009ac6:	7bbb      	ldrb	r3, [r7, #14]
 8009ac8:	2b80      	cmp	r3, #128	; 0x80
 8009aca:	d00a      	beq.n	8009ae2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009acc:	7bbb      	ldrb	r3, [r7, #14]
 8009ace:	4619      	mov	r1, r3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f001 f963 	bl	800ad9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ad6:	2180      	movs	r1, #128	; 0x80
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f001 f95f 	bl	800ad9c <USBD_LL_StallEP>
 8009ade:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ae0:	e020      	b.n	8009b24 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009ae2:	6839      	ldr	r1, [r7, #0]
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fc7a 	bl	800a3de <USBD_CtlError>
              break;
 8009aea:	e01b      	b.n	8009b24 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	885b      	ldrh	r3, [r3, #2]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d10e      	bne.n	8009b12 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009af4:	7bbb      	ldrb	r3, [r7, #14]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00b      	beq.n	8009b12 <USBD_StdEPReq+0xfe>
 8009afa:	7bbb      	ldrb	r3, [r7, #14]
 8009afc:	2b80      	cmp	r3, #128	; 0x80
 8009afe:	d008      	beq.n	8009b12 <USBD_StdEPReq+0xfe>
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	88db      	ldrh	r3, [r3, #6]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d104      	bne.n	8009b12 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b08:	7bbb      	ldrb	r3, [r7, #14]
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f001 f945 	bl	800ad9c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fd2e 	bl	800a574 <USBD_CtlSendStatus>

              break;
 8009b18:	e004      	b.n	8009b24 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009b1a:	6839      	ldr	r1, [r7, #0]
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fc5e 	bl	800a3de <USBD_CtlError>
              break;
 8009b22:	bf00      	nop
          }
          break;
 8009b24:	e107      	b.n	8009d36 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d002      	beq.n	8009b38 <USBD_StdEPReq+0x124>
 8009b32:	2b03      	cmp	r3, #3
 8009b34:	d016      	beq.n	8009b64 <USBD_StdEPReq+0x150>
 8009b36:	e04b      	b.n	8009bd0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b38:	7bbb      	ldrb	r3, [r7, #14]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00d      	beq.n	8009b5a <USBD_StdEPReq+0x146>
 8009b3e:	7bbb      	ldrb	r3, [r7, #14]
 8009b40:	2b80      	cmp	r3, #128	; 0x80
 8009b42:	d00a      	beq.n	8009b5a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b44:	7bbb      	ldrb	r3, [r7, #14]
 8009b46:	4619      	mov	r1, r3
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f001 f927 	bl	800ad9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b4e:	2180      	movs	r1, #128	; 0x80
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f001 f923 	bl	800ad9c <USBD_LL_StallEP>
 8009b56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b58:	e040      	b.n	8009bdc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009b5a:	6839      	ldr	r1, [r7, #0]
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 fc3e 	bl	800a3de <USBD_CtlError>
              break;
 8009b62:	e03b      	b.n	8009bdc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	885b      	ldrh	r3, [r3, #2]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d136      	bne.n	8009bda <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009b6c:	7bbb      	ldrb	r3, [r7, #14]
 8009b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d004      	beq.n	8009b80 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009b76:	7bbb      	ldrb	r3, [r7, #14]
 8009b78:	4619      	mov	r1, r3
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f001 f92d 	bl	800adda <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fcf7 	bl	800a574 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009b86:	7bbb      	ldrb	r3, [r7, #14]
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7ff fde2 	bl	8009754 <USBD_CoreFindEP>
 8009b90:	4603      	mov	r3, r0
 8009b92:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b94:	7b7b      	ldrb	r3, [r7, #13]
 8009b96:	2bff      	cmp	r3, #255	; 0xff
 8009b98:	d01f      	beq.n	8009bda <USBD_StdEPReq+0x1c6>
 8009b9a:	7b7b      	ldrb	r3, [r7, #13]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d11c      	bne.n	8009bda <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009ba0:	7b7a      	ldrb	r2, [r7, #13]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009ba8:	7b7a      	ldrb	r2, [r7, #13]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	32ae      	adds	r2, #174	; 0xae
 8009bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d010      	beq.n	8009bda <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009bb8:	7b7a      	ldrb	r2, [r7, #13]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	32ae      	adds	r2, #174	; 0xae
 8009bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	6839      	ldr	r1, [r7, #0]
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	4798      	blx	r3
 8009bca:	4603      	mov	r3, r0
 8009bcc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009bce:	e004      	b.n	8009bda <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009bd0:	6839      	ldr	r1, [r7, #0]
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 fc03 	bl	800a3de <USBD_CtlError>
              break;
 8009bd8:	e000      	b.n	8009bdc <USBD_StdEPReq+0x1c8>
              break;
 8009bda:	bf00      	nop
          }
          break;
 8009bdc:	e0ab      	b.n	8009d36 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	2b02      	cmp	r3, #2
 8009be8:	d002      	beq.n	8009bf0 <USBD_StdEPReq+0x1dc>
 8009bea:	2b03      	cmp	r3, #3
 8009bec:	d032      	beq.n	8009c54 <USBD_StdEPReq+0x240>
 8009bee:	e097      	b.n	8009d20 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bf0:	7bbb      	ldrb	r3, [r7, #14]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d007      	beq.n	8009c06 <USBD_StdEPReq+0x1f2>
 8009bf6:	7bbb      	ldrb	r3, [r7, #14]
 8009bf8:	2b80      	cmp	r3, #128	; 0x80
 8009bfa:	d004      	beq.n	8009c06 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009bfc:	6839      	ldr	r1, [r7, #0]
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 fbed 	bl	800a3de <USBD_CtlError>
                break;
 8009c04:	e091      	b.n	8009d2a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	da0b      	bge.n	8009c26 <USBD_StdEPReq+0x212>
 8009c0e:	7bbb      	ldrb	r3, [r7, #14]
 8009c10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c14:	4613      	mov	r3, r2
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	4413      	add	r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	3310      	adds	r3, #16
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	4413      	add	r3, r2
 8009c22:	3304      	adds	r3, #4
 8009c24:	e00b      	b.n	8009c3e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c26:	7bbb      	ldrb	r3, [r7, #14]
 8009c28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4413      	add	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	3304      	adds	r3, #4
 8009c3e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	2200      	movs	r2, #0
 8009c44:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	2202      	movs	r2, #2
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 fc37 	bl	800a4c0 <USBD_CtlSendData>
              break;
 8009c52:	e06a      	b.n	8009d2a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	da11      	bge.n	8009c80 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c5c:	7bbb      	ldrb	r3, [r7, #14]
 8009c5e:	f003 020f 	and.w	r2, r3, #15
 8009c62:	6879      	ldr	r1, [r7, #4]
 8009c64:	4613      	mov	r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	4413      	add	r3, r2
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	440b      	add	r3, r1
 8009c6e:	3324      	adds	r3, #36	; 0x24
 8009c70:	881b      	ldrh	r3, [r3, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d117      	bne.n	8009ca6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009c76:	6839      	ldr	r1, [r7, #0]
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 fbb0 	bl	800a3de <USBD_CtlError>
                  break;
 8009c7e:	e054      	b.n	8009d2a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c80:	7bbb      	ldrb	r3, [r7, #14]
 8009c82:	f003 020f 	and.w	r2, r3, #15
 8009c86:	6879      	ldr	r1, [r7, #4]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4413      	add	r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	440b      	add	r3, r1
 8009c92:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c96:	881b      	ldrh	r3, [r3, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d104      	bne.n	8009ca6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009c9c:	6839      	ldr	r1, [r7, #0]
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fb9d 	bl	800a3de <USBD_CtlError>
                  break;
 8009ca4:	e041      	b.n	8009d2a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ca6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	da0b      	bge.n	8009cc6 <USBD_StdEPReq+0x2b2>
 8009cae:	7bbb      	ldrb	r3, [r7, #14]
 8009cb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	4413      	add	r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	3310      	adds	r3, #16
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	3304      	adds	r3, #4
 8009cc4:	e00b      	b.n	8009cde <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009cc6:	7bbb      	ldrb	r3, [r7, #14]
 8009cc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ccc:	4613      	mov	r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4413      	add	r3, r2
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	4413      	add	r3, r2
 8009cdc:	3304      	adds	r3, #4
 8009cde:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009ce0:	7bbb      	ldrb	r3, [r7, #14]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d002      	beq.n	8009cec <USBD_StdEPReq+0x2d8>
 8009ce6:	7bbb      	ldrb	r3, [r7, #14]
 8009ce8:	2b80      	cmp	r3, #128	; 0x80
 8009cea:	d103      	bne.n	8009cf4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	601a      	str	r2, [r3, #0]
 8009cf2:	e00e      	b.n	8009d12 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009cf4:	7bbb      	ldrb	r3, [r7, #14]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f001 f88d 	bl	800ae18 <USBD_LL_IsStallEP>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d003      	beq.n	8009d0c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	2201      	movs	r2, #1
 8009d08:	601a      	str	r2, [r3, #0]
 8009d0a:	e002      	b.n	8009d12 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	2202      	movs	r2, #2
 8009d16:	4619      	mov	r1, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fbd1 	bl	800a4c0 <USBD_CtlSendData>
              break;
 8009d1e:	e004      	b.n	8009d2a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009d20:	6839      	ldr	r1, [r7, #0]
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fb5b 	bl	800a3de <USBD_CtlError>
              break;
 8009d28:	bf00      	nop
          }
          break;
 8009d2a:	e004      	b.n	8009d36 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009d2c:	6839      	ldr	r1, [r7, #0]
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fb55 	bl	800a3de <USBD_CtlError>
          break;
 8009d34:	bf00      	nop
      }
      break;
 8009d36:	e005      	b.n	8009d44 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009d38:	6839      	ldr	r1, [r7, #0]
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 fb4f 	bl	800a3de <USBD_CtlError>
      break;
 8009d40:	e000      	b.n	8009d44 <USBD_StdEPReq+0x330>
      break;
 8009d42:	bf00      	nop
  }

  return ret;
 8009d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
	...

08009d50 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d62:	2300      	movs	r3, #0
 8009d64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	885b      	ldrh	r3, [r3, #2]
 8009d6a:	0a1b      	lsrs	r3, r3, #8
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	2b06      	cmp	r3, #6
 8009d72:	f200 8128 	bhi.w	8009fc6 <USBD_GetDescriptor+0x276>
 8009d76:	a201      	add	r2, pc, #4	; (adr r2, 8009d7c <USBD_GetDescriptor+0x2c>)
 8009d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7c:	08009d99 	.word	0x08009d99
 8009d80:	08009db1 	.word	0x08009db1
 8009d84:	08009df1 	.word	0x08009df1
 8009d88:	08009fc7 	.word	0x08009fc7
 8009d8c:	08009fc7 	.word	0x08009fc7
 8009d90:	08009f67 	.word	0x08009f67
 8009d94:	08009f93 	.word	0x08009f93
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	7c12      	ldrb	r2, [r2, #16]
 8009da4:	f107 0108 	add.w	r1, r7, #8
 8009da8:	4610      	mov	r0, r2
 8009daa:	4798      	blx	r3
 8009dac:	60f8      	str	r0, [r7, #12]
      break;
 8009dae:	e112      	b.n	8009fd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	7c1b      	ldrb	r3, [r3, #16]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10d      	bne.n	8009dd4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc0:	f107 0208 	add.w	r2, r7, #8
 8009dc4:	4610      	mov	r0, r2
 8009dc6:	4798      	blx	r3
 8009dc8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	2202      	movs	r2, #2
 8009dd0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009dd2:	e100      	b.n	8009fd6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ddc:	f107 0208 	add.w	r2, r7, #8
 8009de0:	4610      	mov	r0, r2
 8009de2:	4798      	blx	r3
 8009de4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	3301      	adds	r3, #1
 8009dea:	2202      	movs	r2, #2
 8009dec:	701a      	strb	r2, [r3, #0]
      break;
 8009dee:	e0f2      	b.n	8009fd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	885b      	ldrh	r3, [r3, #2]
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	2b05      	cmp	r3, #5
 8009df8:	f200 80ac 	bhi.w	8009f54 <USBD_GetDescriptor+0x204>
 8009dfc:	a201      	add	r2, pc, #4	; (adr r2, 8009e04 <USBD_GetDescriptor+0xb4>)
 8009dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e02:	bf00      	nop
 8009e04:	08009e1d 	.word	0x08009e1d
 8009e08:	08009e51 	.word	0x08009e51
 8009e0c:	08009e85 	.word	0x08009e85
 8009e10:	08009eb9 	.word	0x08009eb9
 8009e14:	08009eed 	.word	0x08009eed
 8009e18:	08009f21 	.word	0x08009f21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00b      	beq.n	8009e40 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	7c12      	ldrb	r2, [r2, #16]
 8009e34:	f107 0108 	add.w	r1, r7, #8
 8009e38:	4610      	mov	r0, r2
 8009e3a:	4798      	blx	r3
 8009e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e3e:	e091      	b.n	8009f64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 facb 	bl	800a3de <USBD_CtlError>
            err++;
 8009e48:	7afb      	ldrb	r3, [r7, #11]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e4e:	e089      	b.n	8009f64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00b      	beq.n	8009e74 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	7c12      	ldrb	r2, [r2, #16]
 8009e68:	f107 0108 	add.w	r1, r7, #8
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	4798      	blx	r3
 8009e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e72:	e077      	b.n	8009f64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fab1 	bl	800a3de <USBD_CtlError>
            err++;
 8009e7c:	7afb      	ldrb	r3, [r7, #11]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	72fb      	strb	r3, [r7, #11]
          break;
 8009e82:	e06f      	b.n	8009f64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00b      	beq.n	8009ea8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	7c12      	ldrb	r2, [r2, #16]
 8009e9c:	f107 0108 	add.w	r1, r7, #8
 8009ea0:	4610      	mov	r0, r2
 8009ea2:	4798      	blx	r3
 8009ea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ea6:	e05d      	b.n	8009f64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ea8:	6839      	ldr	r1, [r7, #0]
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fa97 	bl	800a3de <USBD_CtlError>
            err++;
 8009eb0:	7afb      	ldrb	r3, [r7, #11]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	72fb      	strb	r3, [r7, #11]
          break;
 8009eb6:	e055      	b.n	8009f64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ebe:	691b      	ldr	r3, [r3, #16]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d00b      	beq.n	8009edc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	7c12      	ldrb	r2, [r2, #16]
 8009ed0:	f107 0108 	add.w	r1, r7, #8
 8009ed4:	4610      	mov	r0, r2
 8009ed6:	4798      	blx	r3
 8009ed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eda:	e043      	b.n	8009f64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009edc:	6839      	ldr	r1, [r7, #0]
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 fa7d 	bl	800a3de <USBD_CtlError>
            err++;
 8009ee4:	7afb      	ldrb	r3, [r7, #11]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	72fb      	strb	r3, [r7, #11]
          break;
 8009eea:	e03b      	b.n	8009f64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ef2:	695b      	ldr	r3, [r3, #20]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00b      	beq.n	8009f10 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009efe:	695b      	ldr	r3, [r3, #20]
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	7c12      	ldrb	r2, [r2, #16]
 8009f04:	f107 0108 	add.w	r1, r7, #8
 8009f08:	4610      	mov	r0, r2
 8009f0a:	4798      	blx	r3
 8009f0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f0e:	e029      	b.n	8009f64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f10:	6839      	ldr	r1, [r7, #0]
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 fa63 	bl	800a3de <USBD_CtlError>
            err++;
 8009f18:	7afb      	ldrb	r3, [r7, #11]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f1e:	e021      	b.n	8009f64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f26:	699b      	ldr	r3, [r3, #24]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d00b      	beq.n	8009f44 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f32:	699b      	ldr	r3, [r3, #24]
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	7c12      	ldrb	r2, [r2, #16]
 8009f38:	f107 0108 	add.w	r1, r7, #8
 8009f3c:	4610      	mov	r0, r2
 8009f3e:	4798      	blx	r3
 8009f40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f42:	e00f      	b.n	8009f64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f44:	6839      	ldr	r1, [r7, #0]
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fa49 	bl	800a3de <USBD_CtlError>
            err++;
 8009f4c:	7afb      	ldrb	r3, [r7, #11]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	72fb      	strb	r3, [r7, #11]
          break;
 8009f52:	e007      	b.n	8009f64 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009f54:	6839      	ldr	r1, [r7, #0]
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 fa41 	bl	800a3de <USBD_CtlError>
          err++;
 8009f5c:	7afb      	ldrb	r3, [r7, #11]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009f62:	bf00      	nop
      }
      break;
 8009f64:	e037      	b.n	8009fd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	7c1b      	ldrb	r3, [r3, #16]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d109      	bne.n	8009f82 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f76:	f107 0208 	add.w	r2, r7, #8
 8009f7a:	4610      	mov	r0, r2
 8009f7c:	4798      	blx	r3
 8009f7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f80:	e029      	b.n	8009fd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f82:	6839      	ldr	r1, [r7, #0]
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fa2a 	bl	800a3de <USBD_CtlError>
        err++;
 8009f8a:	7afb      	ldrb	r3, [r7, #11]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	72fb      	strb	r3, [r7, #11]
      break;
 8009f90:	e021      	b.n	8009fd6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	7c1b      	ldrb	r3, [r3, #16]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d10d      	bne.n	8009fb6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa2:	f107 0208 	add.w	r2, r7, #8
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	4798      	blx	r3
 8009faa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	2207      	movs	r2, #7
 8009fb2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fb4:	e00f      	b.n	8009fd6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009fb6:	6839      	ldr	r1, [r7, #0]
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 fa10 	bl	800a3de <USBD_CtlError>
        err++;
 8009fbe:	7afb      	ldrb	r3, [r7, #11]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	72fb      	strb	r3, [r7, #11]
      break;
 8009fc4:	e007      	b.n	8009fd6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009fc6:	6839      	ldr	r1, [r7, #0]
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 fa08 	bl	800a3de <USBD_CtlError>
      err++;
 8009fce:	7afb      	ldrb	r3, [r7, #11]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	72fb      	strb	r3, [r7, #11]
      break;
 8009fd4:	bf00      	nop
  }

  if (err != 0U)
 8009fd6:	7afb      	ldrb	r3, [r7, #11]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d11e      	bne.n	800a01a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	88db      	ldrh	r3, [r3, #6]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d016      	beq.n	800a012 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009fe4:	893b      	ldrh	r3, [r7, #8]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00e      	beq.n	800a008 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	88da      	ldrh	r2, [r3, #6]
 8009fee:	893b      	ldrh	r3, [r7, #8]
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	bf28      	it	cs
 8009ff4:	4613      	movcs	r3, r2
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009ffa:	893b      	ldrh	r3, [r7, #8]
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	68f9      	ldr	r1, [r7, #12]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 fa5d 	bl	800a4c0 <USBD_CtlSendData>
 800a006:	e009      	b.n	800a01c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 f9e7 	bl	800a3de <USBD_CtlError>
 800a010:	e004      	b.n	800a01c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 faae 	bl	800a574 <USBD_CtlSendStatus>
 800a018:	e000      	b.n	800a01c <USBD_GetDescriptor+0x2cc>
    return;
 800a01a:	bf00      	nop
  }
}
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop

0800a024 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	889b      	ldrh	r3, [r3, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d131      	bne.n	800a09a <USBD_SetAddress+0x76>
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	88db      	ldrh	r3, [r3, #6]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d12d      	bne.n	800a09a <USBD_SetAddress+0x76>
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	885b      	ldrh	r3, [r3, #2]
 800a042:	2b7f      	cmp	r3, #127	; 0x7f
 800a044:	d829      	bhi.n	800a09a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	885b      	ldrh	r3, [r3, #2]
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a050:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b03      	cmp	r3, #3
 800a05c:	d104      	bne.n	800a068 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a05e:	6839      	ldr	r1, [r7, #0]
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 f9bc 	bl	800a3de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a066:	e01d      	b.n	800a0a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	7bfa      	ldrb	r2, [r7, #15]
 800a06c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a070:	7bfb      	ldrb	r3, [r7, #15]
 800a072:	4619      	mov	r1, r3
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 fefb 	bl	800ae70 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 fa7a 	bl	800a574 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a080:	7bfb      	ldrb	r3, [r7, #15]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d004      	beq.n	800a090 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2202      	movs	r2, #2
 800a08a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a08e:	e009      	b.n	800a0a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a098:	e004      	b.n	800a0a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a09a:	6839      	ldr	r1, [r7, #0]
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 f99e 	bl	800a3de <USBD_CtlError>
  }
}
 800a0a2:	bf00      	nop
 800a0a4:	bf00      	nop
 800a0a6:	3710      	adds	r7, #16
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	885b      	ldrh	r3, [r3, #2]
 800a0be:	b2da      	uxtb	r2, r3
 800a0c0:	4b4e      	ldr	r3, [pc, #312]	; (800a1fc <USBD_SetConfig+0x150>)
 800a0c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a0c4:	4b4d      	ldr	r3, [pc, #308]	; (800a1fc <USBD_SetConfig+0x150>)
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d905      	bls.n	800a0d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a0cc:	6839      	ldr	r1, [r7, #0]
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 f985 	bl	800a3de <USBD_CtlError>
    return USBD_FAIL;
 800a0d4:	2303      	movs	r3, #3
 800a0d6:	e08c      	b.n	800a1f2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	2b02      	cmp	r3, #2
 800a0e2:	d002      	beq.n	800a0ea <USBD_SetConfig+0x3e>
 800a0e4:	2b03      	cmp	r3, #3
 800a0e6:	d029      	beq.n	800a13c <USBD_SetConfig+0x90>
 800a0e8:	e075      	b.n	800a1d6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a0ea:	4b44      	ldr	r3, [pc, #272]	; (800a1fc <USBD_SetConfig+0x150>)
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d020      	beq.n	800a134 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a0f2:	4b42      	ldr	r3, [pc, #264]	; (800a1fc <USBD_SetConfig+0x150>)
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a0fc:	4b3f      	ldr	r3, [pc, #252]	; (800a1fc <USBD_SetConfig+0x150>)
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	4619      	mov	r1, r3
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f7fe ffe7 	bl	80090d6 <USBD_SetClassConfig>
 800a108:	4603      	mov	r3, r0
 800a10a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a10c:	7bfb      	ldrb	r3, [r7, #15]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d008      	beq.n	800a124 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a112:	6839      	ldr	r1, [r7, #0]
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f962 	bl	800a3de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2202      	movs	r2, #2
 800a11e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a122:	e065      	b.n	800a1f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 fa25 	bl	800a574 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2203      	movs	r2, #3
 800a12e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a132:	e05d      	b.n	800a1f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 fa1d 	bl	800a574 <USBD_CtlSendStatus>
      break;
 800a13a:	e059      	b.n	800a1f0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a13c:	4b2f      	ldr	r3, [pc, #188]	; (800a1fc <USBD_SetConfig+0x150>)
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d112      	bne.n	800a16a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2202      	movs	r2, #2
 800a148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a14c:	4b2b      	ldr	r3, [pc, #172]	; (800a1fc <USBD_SetConfig+0x150>)
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	461a      	mov	r2, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a156:	4b29      	ldr	r3, [pc, #164]	; (800a1fc <USBD_SetConfig+0x150>)
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	4619      	mov	r1, r3
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f7fe ffd6 	bl	800910e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fa06 	bl	800a574 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a168:	e042      	b.n	800a1f0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a16a:	4b24      	ldr	r3, [pc, #144]	; (800a1fc <USBD_SetConfig+0x150>)
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	461a      	mov	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	429a      	cmp	r2, r3
 800a176:	d02a      	beq.n	800a1ce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	4619      	mov	r1, r3
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f7fe ffc4 	bl	800910e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a186:	4b1d      	ldr	r3, [pc, #116]	; (800a1fc <USBD_SetConfig+0x150>)
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	461a      	mov	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a190:	4b1a      	ldr	r3, [pc, #104]	; (800a1fc <USBD_SetConfig+0x150>)
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	4619      	mov	r1, r3
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7fe ff9d 	bl	80090d6 <USBD_SetClassConfig>
 800a19c:	4603      	mov	r3, r0
 800a19e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a1a0:	7bfb      	ldrb	r3, [r7, #15]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00f      	beq.n	800a1c6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a1a6:	6839      	ldr	r1, [r7, #0]
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f918 	bl	800a3de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7fe ffa9 	bl	800910e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2202      	movs	r2, #2
 800a1c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a1c4:	e014      	b.n	800a1f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f9d4 	bl	800a574 <USBD_CtlSendStatus>
      break;
 800a1cc:	e010      	b.n	800a1f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 f9d0 	bl	800a574 <USBD_CtlSendStatus>
      break;
 800a1d4:	e00c      	b.n	800a1f0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a1d6:	6839      	ldr	r1, [r7, #0]
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 f900 	bl	800a3de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a1de:	4b07      	ldr	r3, [pc, #28]	; (800a1fc <USBD_SetConfig+0x150>)
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f7fe ff92 	bl	800910e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	73fb      	strb	r3, [r7, #15]
      break;
 800a1ee:	bf00      	nop
  }

  return ret;
 800a1f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	20000530 	.word	0x20000530

0800a200 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	88db      	ldrh	r3, [r3, #6]
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d004      	beq.n	800a21c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a212:	6839      	ldr	r1, [r7, #0]
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 f8e2 	bl	800a3de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a21a:	e023      	b.n	800a264 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a222:	b2db      	uxtb	r3, r3
 800a224:	2b02      	cmp	r3, #2
 800a226:	dc02      	bgt.n	800a22e <USBD_GetConfig+0x2e>
 800a228:	2b00      	cmp	r3, #0
 800a22a:	dc03      	bgt.n	800a234 <USBD_GetConfig+0x34>
 800a22c:	e015      	b.n	800a25a <USBD_GetConfig+0x5a>
 800a22e:	2b03      	cmp	r3, #3
 800a230:	d00b      	beq.n	800a24a <USBD_GetConfig+0x4a>
 800a232:	e012      	b.n	800a25a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	3308      	adds	r3, #8
 800a23e:	2201      	movs	r2, #1
 800a240:	4619      	mov	r1, r3
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 f93c 	bl	800a4c0 <USBD_CtlSendData>
        break;
 800a248:	e00c      	b.n	800a264 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	3304      	adds	r3, #4
 800a24e:	2201      	movs	r2, #1
 800a250:	4619      	mov	r1, r3
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 f934 	bl	800a4c0 <USBD_CtlSendData>
        break;
 800a258:	e004      	b.n	800a264 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a25a:	6839      	ldr	r1, [r7, #0]
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f8be 	bl	800a3de <USBD_CtlError>
        break;
 800a262:	bf00      	nop
}
 800a264:	bf00      	nop
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	3b01      	subs	r3, #1
 800a280:	2b02      	cmp	r3, #2
 800a282:	d81e      	bhi.n	800a2c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	88db      	ldrh	r3, [r3, #6]
 800a288:	2b02      	cmp	r3, #2
 800a28a:	d004      	beq.n	800a296 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a28c:	6839      	ldr	r1, [r7, #0]
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 f8a5 	bl	800a3de <USBD_CtlError>
        break;
 800a294:	e01a      	b.n	800a2cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2201      	movs	r2, #1
 800a29a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d005      	beq.n	800a2b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	f043 0202 	orr.w	r2, r3, #2
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	330c      	adds	r3, #12
 800a2b6:	2202      	movs	r2, #2
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 f900 	bl	800a4c0 <USBD_CtlSendData>
      break;
 800a2c0:	e004      	b.n	800a2cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a2c2:	6839      	ldr	r1, [r7, #0]
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 f88a 	bl	800a3de <USBD_CtlError>
      break;
 800a2ca:	bf00      	nop
  }
}
 800a2cc:	bf00      	nop
 800a2ce:	3708      	adds	r7, #8
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	885b      	ldrh	r3, [r3, #2]
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d107      	bne.n	800a2f6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 f940 	bl	800a574 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a2f4:	e013      	b.n	800a31e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	885b      	ldrh	r3, [r3, #2]
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	d10b      	bne.n	800a316 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	889b      	ldrh	r3, [r3, #4]
 800a302:	0a1b      	lsrs	r3, r3, #8
 800a304:	b29b      	uxth	r3, r3
 800a306:	b2da      	uxtb	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 f930 	bl	800a574 <USBD_CtlSendStatus>
}
 800a314:	e003      	b.n	800a31e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a316:	6839      	ldr	r1, [r7, #0]
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 f860 	bl	800a3de <USBD_CtlError>
}
 800a31e:	bf00      	nop
 800a320:	3708      	adds	r7, #8
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b082      	sub	sp, #8
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
 800a32e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a336:	b2db      	uxtb	r3, r3
 800a338:	3b01      	subs	r3, #1
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d80b      	bhi.n	800a356 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	885b      	ldrh	r3, [r3, #2]
 800a342:	2b01      	cmp	r3, #1
 800a344:	d10c      	bne.n	800a360 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 f910 	bl	800a574 <USBD_CtlSendStatus>
      }
      break;
 800a354:	e004      	b.n	800a360 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a356:	6839      	ldr	r1, [r7, #0]
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 f840 	bl	800a3de <USBD_CtlError>
      break;
 800a35e:	e000      	b.n	800a362 <USBD_ClrFeature+0x3c>
      break;
 800a360:	bf00      	nop
  }
}
 800a362:	bf00      	nop
 800a364:	3708      	adds	r7, #8
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b084      	sub	sp, #16
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	781a      	ldrb	r2, [r3, #0]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	3301      	adds	r3, #1
 800a384:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	781a      	ldrb	r2, [r3, #0]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	3301      	adds	r3, #1
 800a392:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a394:	68f8      	ldr	r0, [r7, #12]
 800a396:	f7ff fa41 	bl	800981c <SWAPBYTE>
 800a39a:	4603      	mov	r3, r0
 800a39c:	461a      	mov	r2, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	f7ff fa34 	bl	800981c <SWAPBYTE>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f7ff fa27 	bl	800981c <SWAPBYTE>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	80da      	strh	r2, [r3, #6]
}
 800a3d6:	bf00      	nop
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b082      	sub	sp, #8
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
 800a3e6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3e8:	2180      	movs	r1, #128	; 0x80
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fcd6 	bl	800ad9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 fcd2 	bl	800ad9c <USBD_LL_StallEP>
}
 800a3f8:	bf00      	nop
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a40c:	2300      	movs	r3, #0
 800a40e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d036      	beq.n	800a484 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a41a:	6938      	ldr	r0, [r7, #16]
 800a41c:	f000 f836 	bl	800a48c <USBD_GetLen>
 800a420:	4603      	mov	r3, r0
 800a422:	3301      	adds	r3, #1
 800a424:	b29b      	uxth	r3, r3
 800a426:	005b      	lsls	r3, r3, #1
 800a428:	b29a      	uxth	r2, r3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a42e:	7dfb      	ldrb	r3, [r7, #23]
 800a430:	68ba      	ldr	r2, [r7, #8]
 800a432:	4413      	add	r3, r2
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	7812      	ldrb	r2, [r2, #0]
 800a438:	701a      	strb	r2, [r3, #0]
  idx++;
 800a43a:	7dfb      	ldrb	r3, [r7, #23]
 800a43c:	3301      	adds	r3, #1
 800a43e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a440:	7dfb      	ldrb	r3, [r7, #23]
 800a442:	68ba      	ldr	r2, [r7, #8]
 800a444:	4413      	add	r3, r2
 800a446:	2203      	movs	r2, #3
 800a448:	701a      	strb	r2, [r3, #0]
  idx++;
 800a44a:	7dfb      	ldrb	r3, [r7, #23]
 800a44c:	3301      	adds	r3, #1
 800a44e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a450:	e013      	b.n	800a47a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a452:	7dfb      	ldrb	r3, [r7, #23]
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	4413      	add	r3, r2
 800a458:	693a      	ldr	r2, [r7, #16]
 800a45a:	7812      	ldrb	r2, [r2, #0]
 800a45c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	3301      	adds	r3, #1
 800a462:	613b      	str	r3, [r7, #16]
    idx++;
 800a464:	7dfb      	ldrb	r3, [r7, #23]
 800a466:	3301      	adds	r3, #1
 800a468:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a46a:	7dfb      	ldrb	r3, [r7, #23]
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	4413      	add	r3, r2
 800a470:	2200      	movs	r2, #0
 800a472:	701a      	strb	r2, [r3, #0]
    idx++;
 800a474:	7dfb      	ldrb	r3, [r7, #23]
 800a476:	3301      	adds	r3, #1
 800a478:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1e7      	bne.n	800a452 <USBD_GetString+0x52>
 800a482:	e000      	b.n	800a486 <USBD_GetString+0x86>
    return;
 800a484:	bf00      	nop
  }
}
 800a486:	3718      	adds	r7, #24
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a494:	2300      	movs	r3, #0
 800a496:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a49c:	e005      	b.n	800a4aa <USBD_GetLen+0x1e>
  {
    len++;
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d1f5      	bne.n	800a49e <USBD_GetLen+0x12>
  }

  return len;
 800a4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2202      	movs	r2, #2
 800a4d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	f000 fce1 	bl	800aeae <USBD_LL_Transmit>

  return USBD_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b084      	sub	sp, #16
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	60f8      	str	r0, [r7, #12]
 800a4fe:	60b9      	str	r1, [r7, #8]
 800a500:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	68ba      	ldr	r2, [r7, #8]
 800a506:	2100      	movs	r1, #0
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f000 fcd0 	bl	800aeae <USBD_LL_Transmit>

  return USBD_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2203      	movs	r2, #3
 800a528:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	68ba      	ldr	r2, [r7, #8]
 800a540:	2100      	movs	r1, #0
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f000 fcd4 	bl	800aef0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b084      	sub	sp, #16
 800a556:	af00      	add	r7, sp, #0
 800a558:	60f8      	str	r0, [r7, #12]
 800a55a:	60b9      	str	r1, [r7, #8]
 800a55c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	68ba      	ldr	r2, [r7, #8]
 800a562:	2100      	movs	r1, #0
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f000 fcc3 	bl	800aef0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2204      	movs	r2, #4
 800a580:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a584:	2300      	movs	r3, #0
 800a586:	2200      	movs	r2, #0
 800a588:	2100      	movs	r1, #0
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fc8f 	bl	800aeae <USBD_LL_Transmit>

  return USBD_OK;
 800a590:	2300      	movs	r3, #0
}
 800a592:	4618      	mov	r0, r3
 800a594:	3708      	adds	r7, #8
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b082      	sub	sp, #8
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2205      	movs	r2, #5
 800a5a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 fc9d 	bl	800aef0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5b6:	2300      	movs	r3, #0
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3708      	adds	r7, #8
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	4912      	ldr	r1, [pc, #72]	; (800a610 <MX_USB_DEVICE_Init+0x50>)
 800a5c8:	4812      	ldr	r0, [pc, #72]	; (800a614 <MX_USB_DEVICE_Init+0x54>)
 800a5ca:	f7fe fd07 	bl	8008fdc <USBD_Init>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d001      	beq.n	800a5d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a5d4:	f7f7 faa2 	bl	8001b1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a5d8:	490f      	ldr	r1, [pc, #60]	; (800a618 <MX_USB_DEVICE_Init+0x58>)
 800a5da:	480e      	ldr	r0, [pc, #56]	; (800a614 <MX_USB_DEVICE_Init+0x54>)
 800a5dc:	f7fe fd2e 	bl	800903c <USBD_RegisterClass>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d001      	beq.n	800a5ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a5e6:	f7f7 fa99 	bl	8001b1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a5ea:	490c      	ldr	r1, [pc, #48]	; (800a61c <MX_USB_DEVICE_Init+0x5c>)
 800a5ec:	4809      	ldr	r0, [pc, #36]	; (800a614 <MX_USB_DEVICE_Init+0x54>)
 800a5ee:	f7fe fc1f 	bl	8008e30 <USBD_CDC_RegisterInterface>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d001      	beq.n	800a5fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a5f8:	f7f7 fa90 	bl	8001b1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a5fc:	4805      	ldr	r0, [pc, #20]	; (800a614 <MX_USB_DEVICE_Init+0x54>)
 800a5fe:	f7fe fd53 	bl	80090a8 <USBD_Start>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a608:	f7f7 fa88 	bl	8001b1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a60c:	bf00      	nop
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	200000c0 	.word	0x200000c0
 800a614:	20000534 	.word	0x20000534
 800a618:	2000002c 	.word	0x2000002c
 800a61c:	200000ac 	.word	0x200000ac

0800a620 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a624:	2200      	movs	r2, #0
 800a626:	4905      	ldr	r1, [pc, #20]	; (800a63c <CDC_Init_FS+0x1c>)
 800a628:	4805      	ldr	r0, [pc, #20]	; (800a640 <CDC_Init_FS+0x20>)
 800a62a:	f7fe fc1b 	bl	8008e64 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a62e:	4905      	ldr	r1, [pc, #20]	; (800a644 <CDC_Init_FS+0x24>)
 800a630:	4803      	ldr	r0, [pc, #12]	; (800a640 <CDC_Init_FS+0x20>)
 800a632:	f7fe fc39 	bl	8008ea8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a636:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a638:	4618      	mov	r0, r3
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	20001010 	.word	0x20001010
 800a640:	20000534 	.word	0x20000534
 800a644:	20000810 	.word	0x20000810

0800a648 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a648:	b480      	push	{r7}
 800a64a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a64c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a64e:	4618      	mov	r0, r3
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	4603      	mov	r3, r0
 800a660:	6039      	str	r1, [r7, #0]
 800a662:	71fb      	strb	r3, [r7, #7]
 800a664:	4613      	mov	r3, r2
 800a666:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a668:	79fb      	ldrb	r3, [r7, #7]
 800a66a:	2b23      	cmp	r3, #35	; 0x23
 800a66c:	d84a      	bhi.n	800a704 <CDC_Control_FS+0xac>
 800a66e:	a201      	add	r2, pc, #4	; (adr r2, 800a674 <CDC_Control_FS+0x1c>)
 800a670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a674:	0800a705 	.word	0x0800a705
 800a678:	0800a705 	.word	0x0800a705
 800a67c:	0800a705 	.word	0x0800a705
 800a680:	0800a705 	.word	0x0800a705
 800a684:	0800a705 	.word	0x0800a705
 800a688:	0800a705 	.word	0x0800a705
 800a68c:	0800a705 	.word	0x0800a705
 800a690:	0800a705 	.word	0x0800a705
 800a694:	0800a705 	.word	0x0800a705
 800a698:	0800a705 	.word	0x0800a705
 800a69c:	0800a705 	.word	0x0800a705
 800a6a0:	0800a705 	.word	0x0800a705
 800a6a4:	0800a705 	.word	0x0800a705
 800a6a8:	0800a705 	.word	0x0800a705
 800a6ac:	0800a705 	.word	0x0800a705
 800a6b0:	0800a705 	.word	0x0800a705
 800a6b4:	0800a705 	.word	0x0800a705
 800a6b8:	0800a705 	.word	0x0800a705
 800a6bc:	0800a705 	.word	0x0800a705
 800a6c0:	0800a705 	.word	0x0800a705
 800a6c4:	0800a705 	.word	0x0800a705
 800a6c8:	0800a705 	.word	0x0800a705
 800a6cc:	0800a705 	.word	0x0800a705
 800a6d0:	0800a705 	.word	0x0800a705
 800a6d4:	0800a705 	.word	0x0800a705
 800a6d8:	0800a705 	.word	0x0800a705
 800a6dc:	0800a705 	.word	0x0800a705
 800a6e0:	0800a705 	.word	0x0800a705
 800a6e4:	0800a705 	.word	0x0800a705
 800a6e8:	0800a705 	.word	0x0800a705
 800a6ec:	0800a705 	.word	0x0800a705
 800a6f0:	0800a705 	.word	0x0800a705
 800a6f4:	0800a705 	.word	0x0800a705
 800a6f8:	0800a705 	.word	0x0800a705
 800a6fc:	0800a705 	.word	0x0800a705
 800a700:	0800a705 	.word	0x0800a705
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a704:	bf00      	nop
  }

  return (USBD_OK);
 800a706:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a708:	4618      	mov	r0, r3
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a71e:	6879      	ldr	r1, [r7, #4]
 800a720:	4805      	ldr	r0, [pc, #20]	; (800a738 <CDC_Receive_FS+0x24>)
 800a722:	f7fe fbc1 	bl	8008ea8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a726:	4804      	ldr	r0, [pc, #16]	; (800a738 <CDC_Receive_FS+0x24>)
 800a728:	f7fe fc22 	bl	8008f70 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a72c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	20000534 	.word	0x20000534

0800a73c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	460b      	mov	r3, r1
 800a746:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a748:	2300      	movs	r3, #0
 800a74a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a74c:	4b0d      	ldr	r3, [pc, #52]	; (800a784 <CDC_Transmit_FS+0x48>)
 800a74e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a752:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d001      	beq.n	800a762 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a75e:	2301      	movs	r3, #1
 800a760:	e00b      	b.n	800a77a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a762:	887b      	ldrh	r3, [r7, #2]
 800a764:	461a      	mov	r2, r3
 800a766:	6879      	ldr	r1, [r7, #4]
 800a768:	4806      	ldr	r0, [pc, #24]	; (800a784 <CDC_Transmit_FS+0x48>)
 800a76a:	f7fe fb7b 	bl	8008e64 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a76e:	4805      	ldr	r0, [pc, #20]	; (800a784 <CDC_Transmit_FS+0x48>)
 800a770:	f7fe fbb8 	bl	8008ee4 <USBD_CDC_TransmitPacket>
 800a774:	4603      	mov	r3, r0
 800a776:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a778:	7bfb      	ldrb	r3, [r7, #15]
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	20000534 	.word	0x20000534

0800a788 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a788:	b480      	push	{r7}
 800a78a:	b087      	sub	sp, #28
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	4613      	mov	r3, r2
 800a794:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a796:	2300      	movs	r3, #0
 800a798:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a79a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	371c      	adds	r7, #28
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr
	...

0800a7ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	6039      	str	r1, [r7, #0]
 800a7b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	2212      	movs	r2, #18
 800a7bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a7be:	4b03      	ldr	r3, [pc, #12]	; (800a7cc <USBD_FS_DeviceDescriptor+0x20>)
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr
 800a7cc:	200000dc 	.word	0x200000dc

0800a7d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	6039      	str	r1, [r7, #0]
 800a7da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	2204      	movs	r2, #4
 800a7e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a7e2:	4b03      	ldr	r3, [pc, #12]	; (800a7f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr
 800a7f0:	200000f0 	.word	0x200000f0

0800a7f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	6039      	str	r1, [r7, #0]
 800a7fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a800:	79fb      	ldrb	r3, [r7, #7]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d105      	bne.n	800a812 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a806:	683a      	ldr	r2, [r7, #0]
 800a808:	4907      	ldr	r1, [pc, #28]	; (800a828 <USBD_FS_ProductStrDescriptor+0x34>)
 800a80a:	4808      	ldr	r0, [pc, #32]	; (800a82c <USBD_FS_ProductStrDescriptor+0x38>)
 800a80c:	f7ff fdf8 	bl	800a400 <USBD_GetString>
 800a810:	e004      	b.n	800a81c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a812:	683a      	ldr	r2, [r7, #0]
 800a814:	4904      	ldr	r1, [pc, #16]	; (800a828 <USBD_FS_ProductStrDescriptor+0x34>)
 800a816:	4805      	ldr	r0, [pc, #20]	; (800a82c <USBD_FS_ProductStrDescriptor+0x38>)
 800a818:	f7ff fdf2 	bl	800a400 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a81c:	4b02      	ldr	r3, [pc, #8]	; (800a828 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3708      	adds	r7, #8
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	20001810 	.word	0x20001810
 800a82c:	0800e3c4 	.word	0x0800e3c4

0800a830 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	4603      	mov	r3, r0
 800a838:	6039      	str	r1, [r7, #0]
 800a83a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a83c:	683a      	ldr	r2, [r7, #0]
 800a83e:	4904      	ldr	r1, [pc, #16]	; (800a850 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a840:	4804      	ldr	r0, [pc, #16]	; (800a854 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a842:	f7ff fddd 	bl	800a400 <USBD_GetString>
  return USBD_StrDesc;
 800a846:	4b02      	ldr	r3, [pc, #8]	; (800a850 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3708      	adds	r7, #8
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	20001810 	.word	0x20001810
 800a854:	0800e3dc 	.word	0x0800e3dc

0800a858 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	4603      	mov	r3, r0
 800a860:	6039      	str	r1, [r7, #0]
 800a862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	221a      	movs	r2, #26
 800a868:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a86a:	f000 f843 	bl	800a8f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a86e:	4b02      	ldr	r3, [pc, #8]	; (800a878 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a870:	4618      	mov	r0, r3
 800a872:	3708      	adds	r7, #8
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	200000f4 	.word	0x200000f4

0800a87c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	4603      	mov	r3, r0
 800a884:	6039      	str	r1, [r7, #0]
 800a886:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a888:	79fb      	ldrb	r3, [r7, #7]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d105      	bne.n	800a89a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a88e:	683a      	ldr	r2, [r7, #0]
 800a890:	4907      	ldr	r1, [pc, #28]	; (800a8b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a892:	4808      	ldr	r0, [pc, #32]	; (800a8b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a894:	f7ff fdb4 	bl	800a400 <USBD_GetString>
 800a898:	e004      	b.n	800a8a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a89a:	683a      	ldr	r2, [r7, #0]
 800a89c:	4904      	ldr	r1, [pc, #16]	; (800a8b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a89e:	4805      	ldr	r0, [pc, #20]	; (800a8b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a8a0:	f7ff fdae 	bl	800a400 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8a4:	4b02      	ldr	r3, [pc, #8]	; (800a8b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	20001810 	.word	0x20001810
 800a8b4:	0800e3f0 	.word	0x0800e3f0

0800a8b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	4603      	mov	r3, r0
 800a8c0:	6039      	str	r1, [r7, #0]
 800a8c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a8c4:	79fb      	ldrb	r3, [r7, #7]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d105      	bne.n	800a8d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	4907      	ldr	r1, [pc, #28]	; (800a8ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8ce:	4808      	ldr	r0, [pc, #32]	; (800a8f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8d0:	f7ff fd96 	bl	800a400 <USBD_GetString>
 800a8d4:	e004      	b.n	800a8e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8d6:	683a      	ldr	r2, [r7, #0]
 800a8d8:	4904      	ldr	r1, [pc, #16]	; (800a8ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8da:	4805      	ldr	r0, [pc, #20]	; (800a8f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8dc:	f7ff fd90 	bl	800a400 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8e0:	4b02      	ldr	r3, [pc, #8]	; (800a8ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3708      	adds	r7, #8
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	20001810 	.word	0x20001810
 800a8f0:	0800e3fc 	.word	0x0800e3fc

0800a8f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a8fa:	4b0f      	ldr	r3, [pc, #60]	; (800a938 <Get_SerialNum+0x44>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a900:	4b0e      	ldr	r3, [pc, #56]	; (800a93c <Get_SerialNum+0x48>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a906:	4b0e      	ldr	r3, [pc, #56]	; (800a940 <Get_SerialNum+0x4c>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4413      	add	r3, r2
 800a912:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d009      	beq.n	800a92e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a91a:	2208      	movs	r2, #8
 800a91c:	4909      	ldr	r1, [pc, #36]	; (800a944 <Get_SerialNum+0x50>)
 800a91e:	68f8      	ldr	r0, [r7, #12]
 800a920:	f000 f814 	bl	800a94c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a924:	2204      	movs	r2, #4
 800a926:	4908      	ldr	r1, [pc, #32]	; (800a948 <Get_SerialNum+0x54>)
 800a928:	68b8      	ldr	r0, [r7, #8]
 800a92a:	f000 f80f 	bl	800a94c <IntToUnicode>
  }
}
 800a92e:	bf00      	nop
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	1fff7a10 	.word	0x1fff7a10
 800a93c:	1fff7a14 	.word	0x1fff7a14
 800a940:	1fff7a18 	.word	0x1fff7a18
 800a944:	200000f6 	.word	0x200000f6
 800a948:	20000106 	.word	0x20000106

0800a94c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b087      	sub	sp, #28
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	4613      	mov	r3, r2
 800a958:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a95a:	2300      	movs	r3, #0
 800a95c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a95e:	2300      	movs	r3, #0
 800a960:	75fb      	strb	r3, [r7, #23]
 800a962:	e027      	b.n	800a9b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	0f1b      	lsrs	r3, r3, #28
 800a968:	2b09      	cmp	r3, #9
 800a96a:	d80b      	bhi.n	800a984 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	0f1b      	lsrs	r3, r3, #28
 800a970:	b2da      	uxtb	r2, r3
 800a972:	7dfb      	ldrb	r3, [r7, #23]
 800a974:	005b      	lsls	r3, r3, #1
 800a976:	4619      	mov	r1, r3
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	440b      	add	r3, r1
 800a97c:	3230      	adds	r2, #48	; 0x30
 800a97e:	b2d2      	uxtb	r2, r2
 800a980:	701a      	strb	r2, [r3, #0]
 800a982:	e00a      	b.n	800a99a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	0f1b      	lsrs	r3, r3, #28
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	7dfb      	ldrb	r3, [r7, #23]
 800a98c:	005b      	lsls	r3, r3, #1
 800a98e:	4619      	mov	r1, r3
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	440b      	add	r3, r1
 800a994:	3237      	adds	r2, #55	; 0x37
 800a996:	b2d2      	uxtb	r2, r2
 800a998:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	011b      	lsls	r3, r3, #4
 800a99e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a9a0:	7dfb      	ldrb	r3, [r7, #23]
 800a9a2:	005b      	lsls	r3, r3, #1
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	68ba      	ldr	r2, [r7, #8]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a9ae:	7dfb      	ldrb	r3, [r7, #23]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	75fb      	strb	r3, [r7, #23]
 800a9b4:	7dfa      	ldrb	r2, [r7, #23]
 800a9b6:	79fb      	ldrb	r3, [r7, #7]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d3d3      	bcc.n	800a964 <IntToUnicode+0x18>
  }
}
 800a9bc:	bf00      	nop
 800a9be:	bf00      	nop
 800a9c0:	371c      	adds	r7, #28
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
	...

0800a9cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b08a      	sub	sp, #40	; 0x28
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9d4:	f107 0314 	add.w	r3, r7, #20
 800a9d8:	2200      	movs	r2, #0
 800a9da:	601a      	str	r2, [r3, #0]
 800a9dc:	605a      	str	r2, [r3, #4]
 800a9de:	609a      	str	r2, [r3, #8]
 800a9e0:	60da      	str	r2, [r3, #12]
 800a9e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9ec:	d13a      	bne.n	800aa64 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	613b      	str	r3, [r7, #16]
 800a9f2:	4b1e      	ldr	r3, [pc, #120]	; (800aa6c <HAL_PCD_MspInit+0xa0>)
 800a9f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f6:	4a1d      	ldr	r2, [pc, #116]	; (800aa6c <HAL_PCD_MspInit+0xa0>)
 800a9f8:	f043 0301 	orr.w	r3, r3, #1
 800a9fc:	6313      	str	r3, [r2, #48]	; 0x30
 800a9fe:	4b1b      	ldr	r3, [pc, #108]	; (800aa6c <HAL_PCD_MspInit+0xa0>)
 800aa00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa02:	f003 0301 	and.w	r3, r3, #1
 800aa06:	613b      	str	r3, [r7, #16]
 800aa08:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800aa0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800aa0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa10:	2302      	movs	r3, #2
 800aa12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa14:	2300      	movs	r3, #0
 800aa16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa18:	2303      	movs	r3, #3
 800aa1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aa1c:	230a      	movs	r3, #10
 800aa1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa20:	f107 0314 	add.w	r3, r7, #20
 800aa24:	4619      	mov	r1, r3
 800aa26:	4812      	ldr	r0, [pc, #72]	; (800aa70 <HAL_PCD_MspInit+0xa4>)
 800aa28:	f7f7 fc20 	bl	800226c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aa2c:	4b0f      	ldr	r3, [pc, #60]	; (800aa6c <HAL_PCD_MspInit+0xa0>)
 800aa2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa30:	4a0e      	ldr	r2, [pc, #56]	; (800aa6c <HAL_PCD_MspInit+0xa0>)
 800aa32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa36:	6353      	str	r3, [r2, #52]	; 0x34
 800aa38:	2300      	movs	r3, #0
 800aa3a:	60fb      	str	r3, [r7, #12]
 800aa3c:	4b0b      	ldr	r3, [pc, #44]	; (800aa6c <HAL_PCD_MspInit+0xa0>)
 800aa3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa40:	4a0a      	ldr	r2, [pc, #40]	; (800aa6c <HAL_PCD_MspInit+0xa0>)
 800aa42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa46:	6453      	str	r3, [r2, #68]	; 0x44
 800aa48:	4b08      	ldr	r3, [pc, #32]	; (800aa6c <HAL_PCD_MspInit+0xa0>)
 800aa4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa50:	60fb      	str	r3, [r7, #12]
 800aa52:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800aa54:	2200      	movs	r2, #0
 800aa56:	2100      	movs	r1, #0
 800aa58:	2043      	movs	r0, #67	; 0x43
 800aa5a:	f7f7 fba0 	bl	800219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aa5e:	2043      	movs	r0, #67	; 0x43
 800aa60:	f7f7 fbb9 	bl	80021d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aa64:	bf00      	nop
 800aa66:	3728      	adds	r7, #40	; 0x28
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	40023800 	.word	0x40023800
 800aa70:	40020000 	.word	0x40020000

0800aa74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800aa88:	4619      	mov	r1, r3
 800aa8a:	4610      	mov	r0, r2
 800aa8c:	f7fe fb59 	bl	8009142 <USBD_LL_SetupStage>
}
 800aa90:	bf00      	nop
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800aaaa:	78fa      	ldrb	r2, [r7, #3]
 800aaac:	6879      	ldr	r1, [r7, #4]
 800aaae:	4613      	mov	r3, r2
 800aab0:	00db      	lsls	r3, r3, #3
 800aab2:	4413      	add	r3, r2
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	440b      	add	r3, r1
 800aab8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	78fb      	ldrb	r3, [r7, #3]
 800aac0:	4619      	mov	r1, r3
 800aac2:	f7fe fb93 	bl	80091ec <USBD_LL_DataOutStage>
}
 800aac6:	bf00      	nop
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b082      	sub	sp, #8
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
 800aad6:	460b      	mov	r3, r1
 800aad8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800aae0:	78fa      	ldrb	r2, [r7, #3]
 800aae2:	6879      	ldr	r1, [r7, #4]
 800aae4:	4613      	mov	r3, r2
 800aae6:	00db      	lsls	r3, r3, #3
 800aae8:	4413      	add	r3, r2
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	440b      	add	r3, r1
 800aaee:	334c      	adds	r3, #76	; 0x4c
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	78fb      	ldrb	r3, [r7, #3]
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	f7fe fc2c 	bl	8009352 <USBD_LL_DataInStage>
}
 800aafa:	bf00      	nop
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b082      	sub	sp, #8
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7fe fd60 	bl	80095d6 <USBD_LL_SOF>
}
 800ab16:	bf00      	nop
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b084      	sub	sp, #16
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ab26:	2301      	movs	r3, #1
 800ab28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	68db      	ldr	r3, [r3, #12]
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	d001      	beq.n	800ab36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ab32:	f7f6 fff3 	bl	8001b1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ab3c:	7bfa      	ldrb	r2, [r7, #15]
 800ab3e:	4611      	mov	r1, r2
 800ab40:	4618      	mov	r0, r3
 800ab42:	f7fe fd0a 	bl	800955a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7fe fcb2 	bl	80094b6 <USBD_LL_Reset>
}
 800ab52:	bf00      	nop
 800ab54:	3710      	adds	r7, #16
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
	...

0800ab5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fe fd05 	bl	800957a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	6812      	ldr	r2, [r2, #0]
 800ab7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab82:	f043 0301 	orr.w	r3, r3, #1
 800ab86:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6a1b      	ldr	r3, [r3, #32]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d005      	beq.n	800ab9c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab90:	4b04      	ldr	r3, [pc, #16]	; (800aba4 <HAL_PCD_SuspendCallback+0x48>)
 800ab92:	691b      	ldr	r3, [r3, #16]
 800ab94:	4a03      	ldr	r2, [pc, #12]	; (800aba4 <HAL_PCD_SuspendCallback+0x48>)
 800ab96:	f043 0306 	orr.w	r3, r3, #6
 800ab9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab9c:	bf00      	nop
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	e000ed00 	.word	0xe000ed00

0800aba8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7fe fcf5 	bl	80095a6 <USBD_LL_Resume>
}
 800abbc:	bf00      	nop
 800abbe:	3708      	adds	r7, #8
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	460b      	mov	r3, r1
 800abce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800abd6:	78fa      	ldrb	r2, [r7, #3]
 800abd8:	4611      	mov	r1, r2
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fe fd4d 	bl	800967a <USBD_LL_IsoOUTIncomplete>
}
 800abe0:	bf00      	nop
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	460b      	mov	r3, r1
 800abf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800abfa:	78fa      	ldrb	r2, [r7, #3]
 800abfc:	4611      	mov	r1, r2
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7fe fd09 	bl	8009616 <USBD_LL_IsoINIncomplete>
}
 800ac04:	bf00      	nop
 800ac06:	3708      	adds	r7, #8
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7fe fd5f 	bl	80096de <USBD_LL_DevConnected>
}
 800ac20:	bf00      	nop
 800ac22:	3708      	adds	r7, #8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7fe fd5c 	bl	80096f4 <USBD_LL_DevDisconnected>
}
 800ac3c:	bf00      	nop
 800ac3e:	3708      	adds	r7, #8
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d13c      	bne.n	800acce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ac54:	4a20      	ldr	r2, [pc, #128]	; (800acd8 <USBD_LL_Init+0x94>)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a1e      	ldr	r2, [pc, #120]	; (800acd8 <USBD_LL_Init+0x94>)
 800ac60:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ac64:	4b1c      	ldr	r3, [pc, #112]	; (800acd8 <USBD_LL_Init+0x94>)
 800ac66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ac6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ac6c:	4b1a      	ldr	r3, [pc, #104]	; (800acd8 <USBD_LL_Init+0x94>)
 800ac6e:	2204      	movs	r2, #4
 800ac70:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ac72:	4b19      	ldr	r3, [pc, #100]	; (800acd8 <USBD_LL_Init+0x94>)
 800ac74:	2202      	movs	r2, #2
 800ac76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ac78:	4b17      	ldr	r3, [pc, #92]	; (800acd8 <USBD_LL_Init+0x94>)
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ac7e:	4b16      	ldr	r3, [pc, #88]	; (800acd8 <USBD_LL_Init+0x94>)
 800ac80:	2202      	movs	r2, #2
 800ac82:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ac84:	4b14      	ldr	r3, [pc, #80]	; (800acd8 <USBD_LL_Init+0x94>)
 800ac86:	2200      	movs	r2, #0
 800ac88:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ac8a:	4b13      	ldr	r3, [pc, #76]	; (800acd8 <USBD_LL_Init+0x94>)
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ac90:	4b11      	ldr	r3, [pc, #68]	; (800acd8 <USBD_LL_Init+0x94>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ac96:	4b10      	ldr	r3, [pc, #64]	; (800acd8 <USBD_LL_Init+0x94>)
 800ac98:	2200      	movs	r2, #0
 800ac9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ac9c:	4b0e      	ldr	r3, [pc, #56]	; (800acd8 <USBD_LL_Init+0x94>)
 800ac9e:	2200      	movs	r2, #0
 800aca0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800aca2:	480d      	ldr	r0, [pc, #52]	; (800acd8 <USBD_LL_Init+0x94>)
 800aca4:	f7fa f9b4 	bl	8005010 <HAL_PCD_Init>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d001      	beq.n	800acb2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800acae:	f7f6 ff35 	bl	8001b1c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800acb2:	2180      	movs	r1, #128	; 0x80
 800acb4:	4808      	ldr	r0, [pc, #32]	; (800acd8 <USBD_LL_Init+0x94>)
 800acb6:	f7fb fc0c 	bl	80064d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800acba:	2240      	movs	r2, #64	; 0x40
 800acbc:	2100      	movs	r1, #0
 800acbe:	4806      	ldr	r0, [pc, #24]	; (800acd8 <USBD_LL_Init+0x94>)
 800acc0:	f7fb fbc0 	bl	8006444 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800acc4:	2280      	movs	r2, #128	; 0x80
 800acc6:	2101      	movs	r1, #1
 800acc8:	4803      	ldr	r0, [pc, #12]	; (800acd8 <USBD_LL_Init+0x94>)
 800acca:	f7fb fbbb 	bl	8006444 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3708      	adds	r7, #8
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	20001a10 	.word	0x20001a10

0800acdc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ace4:	2300      	movs	r3, #0
 800ace6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ace8:	2300      	movs	r3, #0
 800acea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7fa faa9 	bl	800524a <HAL_PCD_Start>
 800acf8:	4603      	mov	r3, r0
 800acfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acfc:	7bfb      	ldrb	r3, [r7, #15]
 800acfe:	4618      	mov	r0, r3
 800ad00:	f000 f942 	bl	800af88 <USBD_Get_USB_Status>
 800ad04:	4603      	mov	r3, r0
 800ad06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b084      	sub	sp, #16
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
 800ad1a:	4608      	mov	r0, r1
 800ad1c:	4611      	mov	r1, r2
 800ad1e:	461a      	mov	r2, r3
 800ad20:	4603      	mov	r3, r0
 800ad22:	70fb      	strb	r3, [r7, #3]
 800ad24:	460b      	mov	r3, r1
 800ad26:	70bb      	strb	r3, [r7, #2]
 800ad28:	4613      	mov	r3, r2
 800ad2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad30:	2300      	movs	r3, #0
 800ad32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ad3a:	78bb      	ldrb	r3, [r7, #2]
 800ad3c:	883a      	ldrh	r2, [r7, #0]
 800ad3e:	78f9      	ldrb	r1, [r7, #3]
 800ad40:	f7fa ff7a 	bl	8005c38 <HAL_PCD_EP_Open>
 800ad44:	4603      	mov	r3, r0
 800ad46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad48:	7bfb      	ldrb	r3, [r7, #15]
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f000 f91c 	bl	800af88 <USBD_Get_USB_Status>
 800ad50:	4603      	mov	r3, r0
 800ad52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad54:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3710      	adds	r7, #16
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b084      	sub	sp, #16
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
 800ad66:	460b      	mov	r3, r1
 800ad68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad78:	78fa      	ldrb	r2, [r7, #3]
 800ad7a:	4611      	mov	r1, r2
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7fa ffc3 	bl	8005d08 <HAL_PCD_EP_Close>
 800ad82:	4603      	mov	r3, r0
 800ad84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad86:	7bfb      	ldrb	r3, [r7, #15]
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 f8fd 	bl	800af88 <USBD_Get_USB_Status>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad92:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3710      	adds	r7, #16
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	460b      	mov	r3, r1
 800ada6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ada8:	2300      	movs	r3, #0
 800adaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adac:	2300      	movs	r3, #0
 800adae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800adb6:	78fa      	ldrb	r2, [r7, #3]
 800adb8:	4611      	mov	r1, r2
 800adba:	4618      	mov	r0, r3
 800adbc:	f7fb f89b 	bl	8005ef6 <HAL_PCD_EP_SetStall>
 800adc0:	4603      	mov	r3, r0
 800adc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adc4:	7bfb      	ldrb	r3, [r7, #15]
 800adc6:	4618      	mov	r0, r3
 800adc8:	f000 f8de 	bl	800af88 <USBD_Get_USB_Status>
 800adcc:	4603      	mov	r3, r0
 800adce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800add0:	7bbb      	ldrb	r3, [r7, #14]
}
 800add2:	4618      	mov	r0, r3
 800add4:	3710      	adds	r7, #16
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adda:	b580      	push	{r7, lr}
 800addc:	b084      	sub	sp, #16
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
 800ade2:	460b      	mov	r3, r1
 800ade4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ade6:	2300      	movs	r3, #0
 800ade8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adea:	2300      	movs	r3, #0
 800adec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800adf4:	78fa      	ldrb	r2, [r7, #3]
 800adf6:	4611      	mov	r1, r2
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7fb f8e0 	bl	8005fbe <HAL_PCD_EP_ClrStall>
 800adfe:	4603      	mov	r3, r0
 800ae00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae02:	7bfb      	ldrb	r3, [r7, #15]
 800ae04:	4618      	mov	r0, r3
 800ae06:	f000 f8bf 	bl	800af88 <USBD_Get_USB_Status>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3710      	adds	r7, #16
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	460b      	mov	r3, r1
 800ae22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ae2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ae2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	da0b      	bge.n	800ae4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ae34:	78fb      	ldrb	r3, [r7, #3]
 800ae36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae3a:	68f9      	ldr	r1, [r7, #12]
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	00db      	lsls	r3, r3, #3
 800ae40:	4413      	add	r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	440b      	add	r3, r1
 800ae46:	333e      	adds	r3, #62	; 0x3e
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	e00b      	b.n	800ae64 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ae4c:	78fb      	ldrb	r3, [r7, #3]
 800ae4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae52:	68f9      	ldr	r1, [r7, #12]
 800ae54:	4613      	mov	r3, r2
 800ae56:	00db      	lsls	r3, r3, #3
 800ae58:	4413      	add	r3, r2
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	440b      	add	r3, r1
 800ae5e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ae62:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3714      	adds	r7, #20
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	460b      	mov	r3, r1
 800ae7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae80:	2300      	movs	r3, #0
 800ae82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ae8a:	78fa      	ldrb	r2, [r7, #3]
 800ae8c:	4611      	mov	r1, r2
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7fa fead 	bl	8005bee <HAL_PCD_SetAddress>
 800ae94:	4603      	mov	r3, r0
 800ae96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae98:	7bfb      	ldrb	r3, [r7, #15]
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f000 f874 	bl	800af88 <USBD_Get_USB_Status>
 800aea0:	4603      	mov	r3, r0
 800aea2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aea4:	7bbb      	ldrb	r3, [r7, #14]
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}

0800aeae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aeae:	b580      	push	{r7, lr}
 800aeb0:	b086      	sub	sp, #24
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	60f8      	str	r0, [r7, #12]
 800aeb6:	607a      	str	r2, [r7, #4]
 800aeb8:	603b      	str	r3, [r7, #0]
 800aeba:	460b      	mov	r3, r1
 800aebc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aebe:	2300      	movs	r3, #0
 800aec0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aec2:	2300      	movs	r3, #0
 800aec4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aecc:	7af9      	ldrb	r1, [r7, #11]
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	f7fa ffc6 	bl	8005e62 <HAL_PCD_EP_Transmit>
 800aed6:	4603      	mov	r3, r0
 800aed8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeda:	7dfb      	ldrb	r3, [r7, #23]
 800aedc:	4618      	mov	r0, r3
 800aede:	f000 f853 	bl	800af88 <USBD_Get_USB_Status>
 800aee2:	4603      	mov	r3, r0
 800aee4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aee6:	7dbb      	ldrb	r3, [r7, #22]
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3718      	adds	r7, #24
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b086      	sub	sp, #24
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	607a      	str	r2, [r7, #4]
 800aefa:	603b      	str	r3, [r7, #0]
 800aefc:	460b      	mov	r3, r1
 800aefe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af00:	2300      	movs	r3, #0
 800af02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af04:	2300      	movs	r3, #0
 800af06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800af0e:	7af9      	ldrb	r1, [r7, #11]
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	f7fa ff42 	bl	8005d9c <HAL_PCD_EP_Receive>
 800af18:	4603      	mov	r3, r0
 800af1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af1c:	7dfb      	ldrb	r3, [r7, #23]
 800af1e:	4618      	mov	r0, r3
 800af20:	f000 f832 	bl	800af88 <USBD_Get_USB_Status>
 800af24:	4603      	mov	r3, r0
 800af26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af28:	7dbb      	ldrb	r3, [r7, #22]
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3718      	adds	r7, #24
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b082      	sub	sp, #8
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	460b      	mov	r3, r1
 800af3c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af44:	78fa      	ldrb	r2, [r7, #3]
 800af46:	4611      	mov	r1, r2
 800af48:	4618      	mov	r0, r3
 800af4a:	f7fa ff72 	bl	8005e32 <HAL_PCD_EP_GetRxCount>
 800af4e:	4603      	mov	r3, r0
}
 800af50:	4618      	mov	r0, r3
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800af60:	4b03      	ldr	r3, [pc, #12]	; (800af70 <USBD_static_malloc+0x18>)
}
 800af62:	4618      	mov	r0, r3
 800af64:	370c      	adds	r7, #12
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop
 800af70:	20001f1c 	.word	0x20001f1c

0800af74 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]

}
 800af7c:	bf00      	nop
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af88:	b480      	push	{r7}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	4603      	mov	r3, r0
 800af90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af92:	2300      	movs	r3, #0
 800af94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af96:	79fb      	ldrb	r3, [r7, #7]
 800af98:	2b03      	cmp	r3, #3
 800af9a:	d817      	bhi.n	800afcc <USBD_Get_USB_Status+0x44>
 800af9c:	a201      	add	r2, pc, #4	; (adr r2, 800afa4 <USBD_Get_USB_Status+0x1c>)
 800af9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa2:	bf00      	nop
 800afa4:	0800afb5 	.word	0x0800afb5
 800afa8:	0800afbb 	.word	0x0800afbb
 800afac:	0800afc1 	.word	0x0800afc1
 800afb0:	0800afc7 	.word	0x0800afc7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800afb4:	2300      	movs	r3, #0
 800afb6:	73fb      	strb	r3, [r7, #15]
    break;
 800afb8:	e00b      	b.n	800afd2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800afba:	2303      	movs	r3, #3
 800afbc:	73fb      	strb	r3, [r7, #15]
    break;
 800afbe:	e008      	b.n	800afd2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800afc0:	2301      	movs	r3, #1
 800afc2:	73fb      	strb	r3, [r7, #15]
    break;
 800afc4:	e005      	b.n	800afd2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800afc6:	2303      	movs	r3, #3
 800afc8:	73fb      	strb	r3, [r7, #15]
    break;
 800afca:	e002      	b.n	800afd2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800afcc:	2303      	movs	r3, #3
 800afce:	73fb      	strb	r3, [r7, #15]
    break;
 800afd0:	bf00      	nop
  }
  return usb_status;
 800afd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3714      	adds	r7, #20
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <__errno>:
 800afe0:	4b01      	ldr	r3, [pc, #4]	; (800afe8 <__errno+0x8>)
 800afe2:	6818      	ldr	r0, [r3, #0]
 800afe4:	4770      	bx	lr
 800afe6:	bf00      	nop
 800afe8:	20000110 	.word	0x20000110

0800afec <__libc_init_array>:
 800afec:	b570      	push	{r4, r5, r6, lr}
 800afee:	4d0d      	ldr	r5, [pc, #52]	; (800b024 <__libc_init_array+0x38>)
 800aff0:	4c0d      	ldr	r4, [pc, #52]	; (800b028 <__libc_init_array+0x3c>)
 800aff2:	1b64      	subs	r4, r4, r5
 800aff4:	10a4      	asrs	r4, r4, #2
 800aff6:	2600      	movs	r6, #0
 800aff8:	42a6      	cmp	r6, r4
 800affa:	d109      	bne.n	800b010 <__libc_init_array+0x24>
 800affc:	4d0b      	ldr	r5, [pc, #44]	; (800b02c <__libc_init_array+0x40>)
 800affe:	4c0c      	ldr	r4, [pc, #48]	; (800b030 <__libc_init_array+0x44>)
 800b000:	f003 f9c6 	bl	800e390 <_init>
 800b004:	1b64      	subs	r4, r4, r5
 800b006:	10a4      	asrs	r4, r4, #2
 800b008:	2600      	movs	r6, #0
 800b00a:	42a6      	cmp	r6, r4
 800b00c:	d105      	bne.n	800b01a <__libc_init_array+0x2e>
 800b00e:	bd70      	pop	{r4, r5, r6, pc}
 800b010:	f855 3b04 	ldr.w	r3, [r5], #4
 800b014:	4798      	blx	r3
 800b016:	3601      	adds	r6, #1
 800b018:	e7ee      	b.n	800aff8 <__libc_init_array+0xc>
 800b01a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b01e:	4798      	blx	r3
 800b020:	3601      	adds	r6, #1
 800b022:	e7f2      	b.n	800b00a <__libc_init_array+0x1e>
 800b024:	0800e83c 	.word	0x0800e83c
 800b028:	0800e83c 	.word	0x0800e83c
 800b02c:	0800e83c 	.word	0x0800e83c
 800b030:	0800e840 	.word	0x0800e840

0800b034 <memset>:
 800b034:	4402      	add	r2, r0
 800b036:	4603      	mov	r3, r0
 800b038:	4293      	cmp	r3, r2
 800b03a:	d100      	bne.n	800b03e <memset+0xa>
 800b03c:	4770      	bx	lr
 800b03e:	f803 1b01 	strb.w	r1, [r3], #1
 800b042:	e7f9      	b.n	800b038 <memset+0x4>

0800b044 <__cvt>:
 800b044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b048:	ec55 4b10 	vmov	r4, r5, d0
 800b04c:	2d00      	cmp	r5, #0
 800b04e:	460e      	mov	r6, r1
 800b050:	4619      	mov	r1, r3
 800b052:	462b      	mov	r3, r5
 800b054:	bfbb      	ittet	lt
 800b056:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b05a:	461d      	movlt	r5, r3
 800b05c:	2300      	movge	r3, #0
 800b05e:	232d      	movlt	r3, #45	; 0x2d
 800b060:	700b      	strb	r3, [r1, #0]
 800b062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b064:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b068:	4691      	mov	r9, r2
 800b06a:	f023 0820 	bic.w	r8, r3, #32
 800b06e:	bfbc      	itt	lt
 800b070:	4622      	movlt	r2, r4
 800b072:	4614      	movlt	r4, r2
 800b074:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b078:	d005      	beq.n	800b086 <__cvt+0x42>
 800b07a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b07e:	d100      	bne.n	800b082 <__cvt+0x3e>
 800b080:	3601      	adds	r6, #1
 800b082:	2102      	movs	r1, #2
 800b084:	e000      	b.n	800b088 <__cvt+0x44>
 800b086:	2103      	movs	r1, #3
 800b088:	ab03      	add	r3, sp, #12
 800b08a:	9301      	str	r3, [sp, #4]
 800b08c:	ab02      	add	r3, sp, #8
 800b08e:	9300      	str	r3, [sp, #0]
 800b090:	ec45 4b10 	vmov	d0, r4, r5
 800b094:	4653      	mov	r3, sl
 800b096:	4632      	mov	r2, r6
 800b098:	f000 fcea 	bl	800ba70 <_dtoa_r>
 800b09c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b0a0:	4607      	mov	r7, r0
 800b0a2:	d102      	bne.n	800b0aa <__cvt+0x66>
 800b0a4:	f019 0f01 	tst.w	r9, #1
 800b0a8:	d022      	beq.n	800b0f0 <__cvt+0xac>
 800b0aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b0ae:	eb07 0906 	add.w	r9, r7, r6
 800b0b2:	d110      	bne.n	800b0d6 <__cvt+0x92>
 800b0b4:	783b      	ldrb	r3, [r7, #0]
 800b0b6:	2b30      	cmp	r3, #48	; 0x30
 800b0b8:	d10a      	bne.n	800b0d0 <__cvt+0x8c>
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	2300      	movs	r3, #0
 800b0be:	4620      	mov	r0, r4
 800b0c0:	4629      	mov	r1, r5
 800b0c2:	f7f5 fd09 	bl	8000ad8 <__aeabi_dcmpeq>
 800b0c6:	b918      	cbnz	r0, 800b0d0 <__cvt+0x8c>
 800b0c8:	f1c6 0601 	rsb	r6, r6, #1
 800b0cc:	f8ca 6000 	str.w	r6, [sl]
 800b0d0:	f8da 3000 	ldr.w	r3, [sl]
 800b0d4:	4499      	add	r9, r3
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	2300      	movs	r3, #0
 800b0da:	4620      	mov	r0, r4
 800b0dc:	4629      	mov	r1, r5
 800b0de:	f7f5 fcfb 	bl	8000ad8 <__aeabi_dcmpeq>
 800b0e2:	b108      	cbz	r0, 800b0e8 <__cvt+0xa4>
 800b0e4:	f8cd 900c 	str.w	r9, [sp, #12]
 800b0e8:	2230      	movs	r2, #48	; 0x30
 800b0ea:	9b03      	ldr	r3, [sp, #12]
 800b0ec:	454b      	cmp	r3, r9
 800b0ee:	d307      	bcc.n	800b100 <__cvt+0xbc>
 800b0f0:	9b03      	ldr	r3, [sp, #12]
 800b0f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0f4:	1bdb      	subs	r3, r3, r7
 800b0f6:	4638      	mov	r0, r7
 800b0f8:	6013      	str	r3, [r2, #0]
 800b0fa:	b004      	add	sp, #16
 800b0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b100:	1c59      	adds	r1, r3, #1
 800b102:	9103      	str	r1, [sp, #12]
 800b104:	701a      	strb	r2, [r3, #0]
 800b106:	e7f0      	b.n	800b0ea <__cvt+0xa6>

0800b108 <__exponent>:
 800b108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b10a:	4603      	mov	r3, r0
 800b10c:	2900      	cmp	r1, #0
 800b10e:	bfb8      	it	lt
 800b110:	4249      	neglt	r1, r1
 800b112:	f803 2b02 	strb.w	r2, [r3], #2
 800b116:	bfb4      	ite	lt
 800b118:	222d      	movlt	r2, #45	; 0x2d
 800b11a:	222b      	movge	r2, #43	; 0x2b
 800b11c:	2909      	cmp	r1, #9
 800b11e:	7042      	strb	r2, [r0, #1]
 800b120:	dd2a      	ble.n	800b178 <__exponent+0x70>
 800b122:	f10d 0407 	add.w	r4, sp, #7
 800b126:	46a4      	mov	ip, r4
 800b128:	270a      	movs	r7, #10
 800b12a:	46a6      	mov	lr, r4
 800b12c:	460a      	mov	r2, r1
 800b12e:	fb91 f6f7 	sdiv	r6, r1, r7
 800b132:	fb07 1516 	mls	r5, r7, r6, r1
 800b136:	3530      	adds	r5, #48	; 0x30
 800b138:	2a63      	cmp	r2, #99	; 0x63
 800b13a:	f104 34ff 	add.w	r4, r4, #4294967295
 800b13e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b142:	4631      	mov	r1, r6
 800b144:	dcf1      	bgt.n	800b12a <__exponent+0x22>
 800b146:	3130      	adds	r1, #48	; 0x30
 800b148:	f1ae 0502 	sub.w	r5, lr, #2
 800b14c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b150:	1c44      	adds	r4, r0, #1
 800b152:	4629      	mov	r1, r5
 800b154:	4561      	cmp	r1, ip
 800b156:	d30a      	bcc.n	800b16e <__exponent+0x66>
 800b158:	f10d 0209 	add.w	r2, sp, #9
 800b15c:	eba2 020e 	sub.w	r2, r2, lr
 800b160:	4565      	cmp	r5, ip
 800b162:	bf88      	it	hi
 800b164:	2200      	movhi	r2, #0
 800b166:	4413      	add	r3, r2
 800b168:	1a18      	subs	r0, r3, r0
 800b16a:	b003      	add	sp, #12
 800b16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b16e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b172:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b176:	e7ed      	b.n	800b154 <__exponent+0x4c>
 800b178:	2330      	movs	r3, #48	; 0x30
 800b17a:	3130      	adds	r1, #48	; 0x30
 800b17c:	7083      	strb	r3, [r0, #2]
 800b17e:	70c1      	strb	r1, [r0, #3]
 800b180:	1d03      	adds	r3, r0, #4
 800b182:	e7f1      	b.n	800b168 <__exponent+0x60>

0800b184 <_printf_float>:
 800b184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b188:	ed2d 8b02 	vpush	{d8}
 800b18c:	b08d      	sub	sp, #52	; 0x34
 800b18e:	460c      	mov	r4, r1
 800b190:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b194:	4616      	mov	r6, r2
 800b196:	461f      	mov	r7, r3
 800b198:	4605      	mov	r5, r0
 800b19a:	f001 fa57 	bl	800c64c <_localeconv_r>
 800b19e:	f8d0 a000 	ldr.w	sl, [r0]
 800b1a2:	4650      	mov	r0, sl
 800b1a4:	f7f5 f81c 	bl	80001e0 <strlen>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	930a      	str	r3, [sp, #40]	; 0x28
 800b1ac:	6823      	ldr	r3, [r4, #0]
 800b1ae:	9305      	str	r3, [sp, #20]
 800b1b0:	f8d8 3000 	ldr.w	r3, [r8]
 800b1b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b1b8:	3307      	adds	r3, #7
 800b1ba:	f023 0307 	bic.w	r3, r3, #7
 800b1be:	f103 0208 	add.w	r2, r3, #8
 800b1c2:	f8c8 2000 	str.w	r2, [r8]
 800b1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b1ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b1d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b1d6:	9307      	str	r3, [sp, #28]
 800b1d8:	f8cd 8018 	str.w	r8, [sp, #24]
 800b1dc:	ee08 0a10 	vmov	s16, r0
 800b1e0:	4b9f      	ldr	r3, [pc, #636]	; (800b460 <_printf_float+0x2dc>)
 800b1e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ea:	f7f5 fca7 	bl	8000b3c <__aeabi_dcmpun>
 800b1ee:	bb88      	cbnz	r0, 800b254 <_printf_float+0xd0>
 800b1f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1f4:	4b9a      	ldr	r3, [pc, #616]	; (800b460 <_printf_float+0x2dc>)
 800b1f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1fa:	f7f5 fc81 	bl	8000b00 <__aeabi_dcmple>
 800b1fe:	bb48      	cbnz	r0, 800b254 <_printf_float+0xd0>
 800b200:	2200      	movs	r2, #0
 800b202:	2300      	movs	r3, #0
 800b204:	4640      	mov	r0, r8
 800b206:	4649      	mov	r1, r9
 800b208:	f7f5 fc70 	bl	8000aec <__aeabi_dcmplt>
 800b20c:	b110      	cbz	r0, 800b214 <_printf_float+0x90>
 800b20e:	232d      	movs	r3, #45	; 0x2d
 800b210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b214:	4b93      	ldr	r3, [pc, #588]	; (800b464 <_printf_float+0x2e0>)
 800b216:	4894      	ldr	r0, [pc, #592]	; (800b468 <_printf_float+0x2e4>)
 800b218:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b21c:	bf94      	ite	ls
 800b21e:	4698      	movls	r8, r3
 800b220:	4680      	movhi	r8, r0
 800b222:	2303      	movs	r3, #3
 800b224:	6123      	str	r3, [r4, #16]
 800b226:	9b05      	ldr	r3, [sp, #20]
 800b228:	f023 0204 	bic.w	r2, r3, #4
 800b22c:	6022      	str	r2, [r4, #0]
 800b22e:	f04f 0900 	mov.w	r9, #0
 800b232:	9700      	str	r7, [sp, #0]
 800b234:	4633      	mov	r3, r6
 800b236:	aa0b      	add	r2, sp, #44	; 0x2c
 800b238:	4621      	mov	r1, r4
 800b23a:	4628      	mov	r0, r5
 800b23c:	f000 f9d8 	bl	800b5f0 <_printf_common>
 800b240:	3001      	adds	r0, #1
 800b242:	f040 8090 	bne.w	800b366 <_printf_float+0x1e2>
 800b246:	f04f 30ff 	mov.w	r0, #4294967295
 800b24a:	b00d      	add	sp, #52	; 0x34
 800b24c:	ecbd 8b02 	vpop	{d8}
 800b250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b254:	4642      	mov	r2, r8
 800b256:	464b      	mov	r3, r9
 800b258:	4640      	mov	r0, r8
 800b25a:	4649      	mov	r1, r9
 800b25c:	f7f5 fc6e 	bl	8000b3c <__aeabi_dcmpun>
 800b260:	b140      	cbz	r0, 800b274 <_printf_float+0xf0>
 800b262:	464b      	mov	r3, r9
 800b264:	2b00      	cmp	r3, #0
 800b266:	bfbc      	itt	lt
 800b268:	232d      	movlt	r3, #45	; 0x2d
 800b26a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b26e:	487f      	ldr	r0, [pc, #508]	; (800b46c <_printf_float+0x2e8>)
 800b270:	4b7f      	ldr	r3, [pc, #508]	; (800b470 <_printf_float+0x2ec>)
 800b272:	e7d1      	b.n	800b218 <_printf_float+0x94>
 800b274:	6863      	ldr	r3, [r4, #4]
 800b276:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b27a:	9206      	str	r2, [sp, #24]
 800b27c:	1c5a      	adds	r2, r3, #1
 800b27e:	d13f      	bne.n	800b300 <_printf_float+0x17c>
 800b280:	2306      	movs	r3, #6
 800b282:	6063      	str	r3, [r4, #4]
 800b284:	9b05      	ldr	r3, [sp, #20]
 800b286:	6861      	ldr	r1, [r4, #4]
 800b288:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b28c:	2300      	movs	r3, #0
 800b28e:	9303      	str	r3, [sp, #12]
 800b290:	ab0a      	add	r3, sp, #40	; 0x28
 800b292:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b296:	ab09      	add	r3, sp, #36	; 0x24
 800b298:	ec49 8b10 	vmov	d0, r8, r9
 800b29c:	9300      	str	r3, [sp, #0]
 800b29e:	6022      	str	r2, [r4, #0]
 800b2a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	f7ff fecd 	bl	800b044 <__cvt>
 800b2aa:	9b06      	ldr	r3, [sp, #24]
 800b2ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2ae:	2b47      	cmp	r3, #71	; 0x47
 800b2b0:	4680      	mov	r8, r0
 800b2b2:	d108      	bne.n	800b2c6 <_printf_float+0x142>
 800b2b4:	1cc8      	adds	r0, r1, #3
 800b2b6:	db02      	blt.n	800b2be <_printf_float+0x13a>
 800b2b8:	6863      	ldr	r3, [r4, #4]
 800b2ba:	4299      	cmp	r1, r3
 800b2bc:	dd41      	ble.n	800b342 <_printf_float+0x1be>
 800b2be:	f1ab 0b02 	sub.w	fp, fp, #2
 800b2c2:	fa5f fb8b 	uxtb.w	fp, fp
 800b2c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b2ca:	d820      	bhi.n	800b30e <_printf_float+0x18a>
 800b2cc:	3901      	subs	r1, #1
 800b2ce:	465a      	mov	r2, fp
 800b2d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b2d4:	9109      	str	r1, [sp, #36]	; 0x24
 800b2d6:	f7ff ff17 	bl	800b108 <__exponent>
 800b2da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2dc:	1813      	adds	r3, r2, r0
 800b2de:	2a01      	cmp	r2, #1
 800b2e0:	4681      	mov	r9, r0
 800b2e2:	6123      	str	r3, [r4, #16]
 800b2e4:	dc02      	bgt.n	800b2ec <_printf_float+0x168>
 800b2e6:	6822      	ldr	r2, [r4, #0]
 800b2e8:	07d2      	lsls	r2, r2, #31
 800b2ea:	d501      	bpl.n	800b2f0 <_printf_float+0x16c>
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	6123      	str	r3, [r4, #16]
 800b2f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d09c      	beq.n	800b232 <_printf_float+0xae>
 800b2f8:	232d      	movs	r3, #45	; 0x2d
 800b2fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2fe:	e798      	b.n	800b232 <_printf_float+0xae>
 800b300:	9a06      	ldr	r2, [sp, #24]
 800b302:	2a47      	cmp	r2, #71	; 0x47
 800b304:	d1be      	bne.n	800b284 <_printf_float+0x100>
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1bc      	bne.n	800b284 <_printf_float+0x100>
 800b30a:	2301      	movs	r3, #1
 800b30c:	e7b9      	b.n	800b282 <_printf_float+0xfe>
 800b30e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b312:	d118      	bne.n	800b346 <_printf_float+0x1c2>
 800b314:	2900      	cmp	r1, #0
 800b316:	6863      	ldr	r3, [r4, #4]
 800b318:	dd0b      	ble.n	800b332 <_printf_float+0x1ae>
 800b31a:	6121      	str	r1, [r4, #16]
 800b31c:	b913      	cbnz	r3, 800b324 <_printf_float+0x1a0>
 800b31e:	6822      	ldr	r2, [r4, #0]
 800b320:	07d0      	lsls	r0, r2, #31
 800b322:	d502      	bpl.n	800b32a <_printf_float+0x1a6>
 800b324:	3301      	adds	r3, #1
 800b326:	440b      	add	r3, r1
 800b328:	6123      	str	r3, [r4, #16]
 800b32a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b32c:	f04f 0900 	mov.w	r9, #0
 800b330:	e7de      	b.n	800b2f0 <_printf_float+0x16c>
 800b332:	b913      	cbnz	r3, 800b33a <_printf_float+0x1b6>
 800b334:	6822      	ldr	r2, [r4, #0]
 800b336:	07d2      	lsls	r2, r2, #31
 800b338:	d501      	bpl.n	800b33e <_printf_float+0x1ba>
 800b33a:	3302      	adds	r3, #2
 800b33c:	e7f4      	b.n	800b328 <_printf_float+0x1a4>
 800b33e:	2301      	movs	r3, #1
 800b340:	e7f2      	b.n	800b328 <_printf_float+0x1a4>
 800b342:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b348:	4299      	cmp	r1, r3
 800b34a:	db05      	blt.n	800b358 <_printf_float+0x1d4>
 800b34c:	6823      	ldr	r3, [r4, #0]
 800b34e:	6121      	str	r1, [r4, #16]
 800b350:	07d8      	lsls	r0, r3, #31
 800b352:	d5ea      	bpl.n	800b32a <_printf_float+0x1a6>
 800b354:	1c4b      	adds	r3, r1, #1
 800b356:	e7e7      	b.n	800b328 <_printf_float+0x1a4>
 800b358:	2900      	cmp	r1, #0
 800b35a:	bfd4      	ite	le
 800b35c:	f1c1 0202 	rsble	r2, r1, #2
 800b360:	2201      	movgt	r2, #1
 800b362:	4413      	add	r3, r2
 800b364:	e7e0      	b.n	800b328 <_printf_float+0x1a4>
 800b366:	6823      	ldr	r3, [r4, #0]
 800b368:	055a      	lsls	r2, r3, #21
 800b36a:	d407      	bmi.n	800b37c <_printf_float+0x1f8>
 800b36c:	6923      	ldr	r3, [r4, #16]
 800b36e:	4642      	mov	r2, r8
 800b370:	4631      	mov	r1, r6
 800b372:	4628      	mov	r0, r5
 800b374:	47b8      	blx	r7
 800b376:	3001      	adds	r0, #1
 800b378:	d12c      	bne.n	800b3d4 <_printf_float+0x250>
 800b37a:	e764      	b.n	800b246 <_printf_float+0xc2>
 800b37c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b380:	f240 80e0 	bls.w	800b544 <_printf_float+0x3c0>
 800b384:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b388:	2200      	movs	r2, #0
 800b38a:	2300      	movs	r3, #0
 800b38c:	f7f5 fba4 	bl	8000ad8 <__aeabi_dcmpeq>
 800b390:	2800      	cmp	r0, #0
 800b392:	d034      	beq.n	800b3fe <_printf_float+0x27a>
 800b394:	4a37      	ldr	r2, [pc, #220]	; (800b474 <_printf_float+0x2f0>)
 800b396:	2301      	movs	r3, #1
 800b398:	4631      	mov	r1, r6
 800b39a:	4628      	mov	r0, r5
 800b39c:	47b8      	blx	r7
 800b39e:	3001      	adds	r0, #1
 800b3a0:	f43f af51 	beq.w	800b246 <_printf_float+0xc2>
 800b3a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	db02      	blt.n	800b3b2 <_printf_float+0x22e>
 800b3ac:	6823      	ldr	r3, [r4, #0]
 800b3ae:	07d8      	lsls	r0, r3, #31
 800b3b0:	d510      	bpl.n	800b3d4 <_printf_float+0x250>
 800b3b2:	ee18 3a10 	vmov	r3, s16
 800b3b6:	4652      	mov	r2, sl
 800b3b8:	4631      	mov	r1, r6
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	47b8      	blx	r7
 800b3be:	3001      	adds	r0, #1
 800b3c0:	f43f af41 	beq.w	800b246 <_printf_float+0xc2>
 800b3c4:	f04f 0800 	mov.w	r8, #0
 800b3c8:	f104 091a 	add.w	r9, r4, #26
 800b3cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	4543      	cmp	r3, r8
 800b3d2:	dc09      	bgt.n	800b3e8 <_printf_float+0x264>
 800b3d4:	6823      	ldr	r3, [r4, #0]
 800b3d6:	079b      	lsls	r3, r3, #30
 800b3d8:	f100 8105 	bmi.w	800b5e6 <_printf_float+0x462>
 800b3dc:	68e0      	ldr	r0, [r4, #12]
 800b3de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3e0:	4298      	cmp	r0, r3
 800b3e2:	bfb8      	it	lt
 800b3e4:	4618      	movlt	r0, r3
 800b3e6:	e730      	b.n	800b24a <_printf_float+0xc6>
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	464a      	mov	r2, r9
 800b3ec:	4631      	mov	r1, r6
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	47b8      	blx	r7
 800b3f2:	3001      	adds	r0, #1
 800b3f4:	f43f af27 	beq.w	800b246 <_printf_float+0xc2>
 800b3f8:	f108 0801 	add.w	r8, r8, #1
 800b3fc:	e7e6      	b.n	800b3cc <_printf_float+0x248>
 800b3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b400:	2b00      	cmp	r3, #0
 800b402:	dc39      	bgt.n	800b478 <_printf_float+0x2f4>
 800b404:	4a1b      	ldr	r2, [pc, #108]	; (800b474 <_printf_float+0x2f0>)
 800b406:	2301      	movs	r3, #1
 800b408:	4631      	mov	r1, r6
 800b40a:	4628      	mov	r0, r5
 800b40c:	47b8      	blx	r7
 800b40e:	3001      	adds	r0, #1
 800b410:	f43f af19 	beq.w	800b246 <_printf_float+0xc2>
 800b414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b418:	4313      	orrs	r3, r2
 800b41a:	d102      	bne.n	800b422 <_printf_float+0x29e>
 800b41c:	6823      	ldr	r3, [r4, #0]
 800b41e:	07d9      	lsls	r1, r3, #31
 800b420:	d5d8      	bpl.n	800b3d4 <_printf_float+0x250>
 800b422:	ee18 3a10 	vmov	r3, s16
 800b426:	4652      	mov	r2, sl
 800b428:	4631      	mov	r1, r6
 800b42a:	4628      	mov	r0, r5
 800b42c:	47b8      	blx	r7
 800b42e:	3001      	adds	r0, #1
 800b430:	f43f af09 	beq.w	800b246 <_printf_float+0xc2>
 800b434:	f04f 0900 	mov.w	r9, #0
 800b438:	f104 0a1a 	add.w	sl, r4, #26
 800b43c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b43e:	425b      	negs	r3, r3
 800b440:	454b      	cmp	r3, r9
 800b442:	dc01      	bgt.n	800b448 <_printf_float+0x2c4>
 800b444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b446:	e792      	b.n	800b36e <_printf_float+0x1ea>
 800b448:	2301      	movs	r3, #1
 800b44a:	4652      	mov	r2, sl
 800b44c:	4631      	mov	r1, r6
 800b44e:	4628      	mov	r0, r5
 800b450:	47b8      	blx	r7
 800b452:	3001      	adds	r0, #1
 800b454:	f43f aef7 	beq.w	800b246 <_printf_float+0xc2>
 800b458:	f109 0901 	add.w	r9, r9, #1
 800b45c:	e7ee      	b.n	800b43c <_printf_float+0x2b8>
 800b45e:	bf00      	nop
 800b460:	7fefffff 	.word	0x7fefffff
 800b464:	0800e428 	.word	0x0800e428
 800b468:	0800e42c 	.word	0x0800e42c
 800b46c:	0800e434 	.word	0x0800e434
 800b470:	0800e430 	.word	0x0800e430
 800b474:	0800e438 	.word	0x0800e438
 800b478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b47a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b47c:	429a      	cmp	r2, r3
 800b47e:	bfa8      	it	ge
 800b480:	461a      	movge	r2, r3
 800b482:	2a00      	cmp	r2, #0
 800b484:	4691      	mov	r9, r2
 800b486:	dc37      	bgt.n	800b4f8 <_printf_float+0x374>
 800b488:	f04f 0b00 	mov.w	fp, #0
 800b48c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b490:	f104 021a 	add.w	r2, r4, #26
 800b494:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b496:	9305      	str	r3, [sp, #20]
 800b498:	eba3 0309 	sub.w	r3, r3, r9
 800b49c:	455b      	cmp	r3, fp
 800b49e:	dc33      	bgt.n	800b508 <_printf_float+0x384>
 800b4a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	db3b      	blt.n	800b520 <_printf_float+0x39c>
 800b4a8:	6823      	ldr	r3, [r4, #0]
 800b4aa:	07da      	lsls	r2, r3, #31
 800b4ac:	d438      	bmi.n	800b520 <_printf_float+0x39c>
 800b4ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4b0:	9a05      	ldr	r2, [sp, #20]
 800b4b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4b4:	1a9a      	subs	r2, r3, r2
 800b4b6:	eba3 0901 	sub.w	r9, r3, r1
 800b4ba:	4591      	cmp	r9, r2
 800b4bc:	bfa8      	it	ge
 800b4be:	4691      	movge	r9, r2
 800b4c0:	f1b9 0f00 	cmp.w	r9, #0
 800b4c4:	dc35      	bgt.n	800b532 <_printf_float+0x3ae>
 800b4c6:	f04f 0800 	mov.w	r8, #0
 800b4ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4ce:	f104 0a1a 	add.w	sl, r4, #26
 800b4d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4d6:	1a9b      	subs	r3, r3, r2
 800b4d8:	eba3 0309 	sub.w	r3, r3, r9
 800b4dc:	4543      	cmp	r3, r8
 800b4de:	f77f af79 	ble.w	800b3d4 <_printf_float+0x250>
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	4652      	mov	r2, sl
 800b4e6:	4631      	mov	r1, r6
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	47b8      	blx	r7
 800b4ec:	3001      	adds	r0, #1
 800b4ee:	f43f aeaa 	beq.w	800b246 <_printf_float+0xc2>
 800b4f2:	f108 0801 	add.w	r8, r8, #1
 800b4f6:	e7ec      	b.n	800b4d2 <_printf_float+0x34e>
 800b4f8:	4613      	mov	r3, r2
 800b4fa:	4631      	mov	r1, r6
 800b4fc:	4642      	mov	r2, r8
 800b4fe:	4628      	mov	r0, r5
 800b500:	47b8      	blx	r7
 800b502:	3001      	adds	r0, #1
 800b504:	d1c0      	bne.n	800b488 <_printf_float+0x304>
 800b506:	e69e      	b.n	800b246 <_printf_float+0xc2>
 800b508:	2301      	movs	r3, #1
 800b50a:	4631      	mov	r1, r6
 800b50c:	4628      	mov	r0, r5
 800b50e:	9205      	str	r2, [sp, #20]
 800b510:	47b8      	blx	r7
 800b512:	3001      	adds	r0, #1
 800b514:	f43f ae97 	beq.w	800b246 <_printf_float+0xc2>
 800b518:	9a05      	ldr	r2, [sp, #20]
 800b51a:	f10b 0b01 	add.w	fp, fp, #1
 800b51e:	e7b9      	b.n	800b494 <_printf_float+0x310>
 800b520:	ee18 3a10 	vmov	r3, s16
 800b524:	4652      	mov	r2, sl
 800b526:	4631      	mov	r1, r6
 800b528:	4628      	mov	r0, r5
 800b52a:	47b8      	blx	r7
 800b52c:	3001      	adds	r0, #1
 800b52e:	d1be      	bne.n	800b4ae <_printf_float+0x32a>
 800b530:	e689      	b.n	800b246 <_printf_float+0xc2>
 800b532:	9a05      	ldr	r2, [sp, #20]
 800b534:	464b      	mov	r3, r9
 800b536:	4442      	add	r2, r8
 800b538:	4631      	mov	r1, r6
 800b53a:	4628      	mov	r0, r5
 800b53c:	47b8      	blx	r7
 800b53e:	3001      	adds	r0, #1
 800b540:	d1c1      	bne.n	800b4c6 <_printf_float+0x342>
 800b542:	e680      	b.n	800b246 <_printf_float+0xc2>
 800b544:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b546:	2a01      	cmp	r2, #1
 800b548:	dc01      	bgt.n	800b54e <_printf_float+0x3ca>
 800b54a:	07db      	lsls	r3, r3, #31
 800b54c:	d538      	bpl.n	800b5c0 <_printf_float+0x43c>
 800b54e:	2301      	movs	r3, #1
 800b550:	4642      	mov	r2, r8
 800b552:	4631      	mov	r1, r6
 800b554:	4628      	mov	r0, r5
 800b556:	47b8      	blx	r7
 800b558:	3001      	adds	r0, #1
 800b55a:	f43f ae74 	beq.w	800b246 <_printf_float+0xc2>
 800b55e:	ee18 3a10 	vmov	r3, s16
 800b562:	4652      	mov	r2, sl
 800b564:	4631      	mov	r1, r6
 800b566:	4628      	mov	r0, r5
 800b568:	47b8      	blx	r7
 800b56a:	3001      	adds	r0, #1
 800b56c:	f43f ae6b 	beq.w	800b246 <_printf_float+0xc2>
 800b570:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b574:	2200      	movs	r2, #0
 800b576:	2300      	movs	r3, #0
 800b578:	f7f5 faae 	bl	8000ad8 <__aeabi_dcmpeq>
 800b57c:	b9d8      	cbnz	r0, 800b5b6 <_printf_float+0x432>
 800b57e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b580:	f108 0201 	add.w	r2, r8, #1
 800b584:	3b01      	subs	r3, #1
 800b586:	4631      	mov	r1, r6
 800b588:	4628      	mov	r0, r5
 800b58a:	47b8      	blx	r7
 800b58c:	3001      	adds	r0, #1
 800b58e:	d10e      	bne.n	800b5ae <_printf_float+0x42a>
 800b590:	e659      	b.n	800b246 <_printf_float+0xc2>
 800b592:	2301      	movs	r3, #1
 800b594:	4652      	mov	r2, sl
 800b596:	4631      	mov	r1, r6
 800b598:	4628      	mov	r0, r5
 800b59a:	47b8      	blx	r7
 800b59c:	3001      	adds	r0, #1
 800b59e:	f43f ae52 	beq.w	800b246 <_printf_float+0xc2>
 800b5a2:	f108 0801 	add.w	r8, r8, #1
 800b5a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5a8:	3b01      	subs	r3, #1
 800b5aa:	4543      	cmp	r3, r8
 800b5ac:	dcf1      	bgt.n	800b592 <_printf_float+0x40e>
 800b5ae:	464b      	mov	r3, r9
 800b5b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b5b4:	e6dc      	b.n	800b370 <_printf_float+0x1ec>
 800b5b6:	f04f 0800 	mov.w	r8, #0
 800b5ba:	f104 0a1a 	add.w	sl, r4, #26
 800b5be:	e7f2      	b.n	800b5a6 <_printf_float+0x422>
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	4642      	mov	r2, r8
 800b5c4:	e7df      	b.n	800b586 <_printf_float+0x402>
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	464a      	mov	r2, r9
 800b5ca:	4631      	mov	r1, r6
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	47b8      	blx	r7
 800b5d0:	3001      	adds	r0, #1
 800b5d2:	f43f ae38 	beq.w	800b246 <_printf_float+0xc2>
 800b5d6:	f108 0801 	add.w	r8, r8, #1
 800b5da:	68e3      	ldr	r3, [r4, #12]
 800b5dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5de:	1a5b      	subs	r3, r3, r1
 800b5e0:	4543      	cmp	r3, r8
 800b5e2:	dcf0      	bgt.n	800b5c6 <_printf_float+0x442>
 800b5e4:	e6fa      	b.n	800b3dc <_printf_float+0x258>
 800b5e6:	f04f 0800 	mov.w	r8, #0
 800b5ea:	f104 0919 	add.w	r9, r4, #25
 800b5ee:	e7f4      	b.n	800b5da <_printf_float+0x456>

0800b5f0 <_printf_common>:
 800b5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f4:	4616      	mov	r6, r2
 800b5f6:	4699      	mov	r9, r3
 800b5f8:	688a      	ldr	r2, [r1, #8]
 800b5fa:	690b      	ldr	r3, [r1, #16]
 800b5fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b600:	4293      	cmp	r3, r2
 800b602:	bfb8      	it	lt
 800b604:	4613      	movlt	r3, r2
 800b606:	6033      	str	r3, [r6, #0]
 800b608:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b60c:	4607      	mov	r7, r0
 800b60e:	460c      	mov	r4, r1
 800b610:	b10a      	cbz	r2, 800b616 <_printf_common+0x26>
 800b612:	3301      	adds	r3, #1
 800b614:	6033      	str	r3, [r6, #0]
 800b616:	6823      	ldr	r3, [r4, #0]
 800b618:	0699      	lsls	r1, r3, #26
 800b61a:	bf42      	ittt	mi
 800b61c:	6833      	ldrmi	r3, [r6, #0]
 800b61e:	3302      	addmi	r3, #2
 800b620:	6033      	strmi	r3, [r6, #0]
 800b622:	6825      	ldr	r5, [r4, #0]
 800b624:	f015 0506 	ands.w	r5, r5, #6
 800b628:	d106      	bne.n	800b638 <_printf_common+0x48>
 800b62a:	f104 0a19 	add.w	sl, r4, #25
 800b62e:	68e3      	ldr	r3, [r4, #12]
 800b630:	6832      	ldr	r2, [r6, #0]
 800b632:	1a9b      	subs	r3, r3, r2
 800b634:	42ab      	cmp	r3, r5
 800b636:	dc26      	bgt.n	800b686 <_printf_common+0x96>
 800b638:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b63c:	1e13      	subs	r3, r2, #0
 800b63e:	6822      	ldr	r2, [r4, #0]
 800b640:	bf18      	it	ne
 800b642:	2301      	movne	r3, #1
 800b644:	0692      	lsls	r2, r2, #26
 800b646:	d42b      	bmi.n	800b6a0 <_printf_common+0xb0>
 800b648:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b64c:	4649      	mov	r1, r9
 800b64e:	4638      	mov	r0, r7
 800b650:	47c0      	blx	r8
 800b652:	3001      	adds	r0, #1
 800b654:	d01e      	beq.n	800b694 <_printf_common+0xa4>
 800b656:	6823      	ldr	r3, [r4, #0]
 800b658:	68e5      	ldr	r5, [r4, #12]
 800b65a:	6832      	ldr	r2, [r6, #0]
 800b65c:	f003 0306 	and.w	r3, r3, #6
 800b660:	2b04      	cmp	r3, #4
 800b662:	bf08      	it	eq
 800b664:	1aad      	subeq	r5, r5, r2
 800b666:	68a3      	ldr	r3, [r4, #8]
 800b668:	6922      	ldr	r2, [r4, #16]
 800b66a:	bf0c      	ite	eq
 800b66c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b670:	2500      	movne	r5, #0
 800b672:	4293      	cmp	r3, r2
 800b674:	bfc4      	itt	gt
 800b676:	1a9b      	subgt	r3, r3, r2
 800b678:	18ed      	addgt	r5, r5, r3
 800b67a:	2600      	movs	r6, #0
 800b67c:	341a      	adds	r4, #26
 800b67e:	42b5      	cmp	r5, r6
 800b680:	d11a      	bne.n	800b6b8 <_printf_common+0xc8>
 800b682:	2000      	movs	r0, #0
 800b684:	e008      	b.n	800b698 <_printf_common+0xa8>
 800b686:	2301      	movs	r3, #1
 800b688:	4652      	mov	r2, sl
 800b68a:	4649      	mov	r1, r9
 800b68c:	4638      	mov	r0, r7
 800b68e:	47c0      	blx	r8
 800b690:	3001      	adds	r0, #1
 800b692:	d103      	bne.n	800b69c <_printf_common+0xac>
 800b694:	f04f 30ff 	mov.w	r0, #4294967295
 800b698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b69c:	3501      	adds	r5, #1
 800b69e:	e7c6      	b.n	800b62e <_printf_common+0x3e>
 800b6a0:	18e1      	adds	r1, r4, r3
 800b6a2:	1c5a      	adds	r2, r3, #1
 800b6a4:	2030      	movs	r0, #48	; 0x30
 800b6a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6aa:	4422      	add	r2, r4
 800b6ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6b4:	3302      	adds	r3, #2
 800b6b6:	e7c7      	b.n	800b648 <_printf_common+0x58>
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	4622      	mov	r2, r4
 800b6bc:	4649      	mov	r1, r9
 800b6be:	4638      	mov	r0, r7
 800b6c0:	47c0      	blx	r8
 800b6c2:	3001      	adds	r0, #1
 800b6c4:	d0e6      	beq.n	800b694 <_printf_common+0xa4>
 800b6c6:	3601      	adds	r6, #1
 800b6c8:	e7d9      	b.n	800b67e <_printf_common+0x8e>
	...

0800b6cc <_printf_i>:
 800b6cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6d0:	7e0f      	ldrb	r7, [r1, #24]
 800b6d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b6d4:	2f78      	cmp	r7, #120	; 0x78
 800b6d6:	4691      	mov	r9, r2
 800b6d8:	4680      	mov	r8, r0
 800b6da:	460c      	mov	r4, r1
 800b6dc:	469a      	mov	sl, r3
 800b6de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b6e2:	d807      	bhi.n	800b6f4 <_printf_i+0x28>
 800b6e4:	2f62      	cmp	r7, #98	; 0x62
 800b6e6:	d80a      	bhi.n	800b6fe <_printf_i+0x32>
 800b6e8:	2f00      	cmp	r7, #0
 800b6ea:	f000 80d8 	beq.w	800b89e <_printf_i+0x1d2>
 800b6ee:	2f58      	cmp	r7, #88	; 0x58
 800b6f0:	f000 80a3 	beq.w	800b83a <_printf_i+0x16e>
 800b6f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b6fc:	e03a      	b.n	800b774 <_printf_i+0xa8>
 800b6fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b702:	2b15      	cmp	r3, #21
 800b704:	d8f6      	bhi.n	800b6f4 <_printf_i+0x28>
 800b706:	a101      	add	r1, pc, #4	; (adr r1, 800b70c <_printf_i+0x40>)
 800b708:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b70c:	0800b765 	.word	0x0800b765
 800b710:	0800b779 	.word	0x0800b779
 800b714:	0800b6f5 	.word	0x0800b6f5
 800b718:	0800b6f5 	.word	0x0800b6f5
 800b71c:	0800b6f5 	.word	0x0800b6f5
 800b720:	0800b6f5 	.word	0x0800b6f5
 800b724:	0800b779 	.word	0x0800b779
 800b728:	0800b6f5 	.word	0x0800b6f5
 800b72c:	0800b6f5 	.word	0x0800b6f5
 800b730:	0800b6f5 	.word	0x0800b6f5
 800b734:	0800b6f5 	.word	0x0800b6f5
 800b738:	0800b885 	.word	0x0800b885
 800b73c:	0800b7a9 	.word	0x0800b7a9
 800b740:	0800b867 	.word	0x0800b867
 800b744:	0800b6f5 	.word	0x0800b6f5
 800b748:	0800b6f5 	.word	0x0800b6f5
 800b74c:	0800b8a7 	.word	0x0800b8a7
 800b750:	0800b6f5 	.word	0x0800b6f5
 800b754:	0800b7a9 	.word	0x0800b7a9
 800b758:	0800b6f5 	.word	0x0800b6f5
 800b75c:	0800b6f5 	.word	0x0800b6f5
 800b760:	0800b86f 	.word	0x0800b86f
 800b764:	682b      	ldr	r3, [r5, #0]
 800b766:	1d1a      	adds	r2, r3, #4
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	602a      	str	r2, [r5, #0]
 800b76c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b770:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b774:	2301      	movs	r3, #1
 800b776:	e0a3      	b.n	800b8c0 <_printf_i+0x1f4>
 800b778:	6820      	ldr	r0, [r4, #0]
 800b77a:	6829      	ldr	r1, [r5, #0]
 800b77c:	0606      	lsls	r6, r0, #24
 800b77e:	f101 0304 	add.w	r3, r1, #4
 800b782:	d50a      	bpl.n	800b79a <_printf_i+0xce>
 800b784:	680e      	ldr	r6, [r1, #0]
 800b786:	602b      	str	r3, [r5, #0]
 800b788:	2e00      	cmp	r6, #0
 800b78a:	da03      	bge.n	800b794 <_printf_i+0xc8>
 800b78c:	232d      	movs	r3, #45	; 0x2d
 800b78e:	4276      	negs	r6, r6
 800b790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b794:	485e      	ldr	r0, [pc, #376]	; (800b910 <_printf_i+0x244>)
 800b796:	230a      	movs	r3, #10
 800b798:	e019      	b.n	800b7ce <_printf_i+0x102>
 800b79a:	680e      	ldr	r6, [r1, #0]
 800b79c:	602b      	str	r3, [r5, #0]
 800b79e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b7a2:	bf18      	it	ne
 800b7a4:	b236      	sxthne	r6, r6
 800b7a6:	e7ef      	b.n	800b788 <_printf_i+0xbc>
 800b7a8:	682b      	ldr	r3, [r5, #0]
 800b7aa:	6820      	ldr	r0, [r4, #0]
 800b7ac:	1d19      	adds	r1, r3, #4
 800b7ae:	6029      	str	r1, [r5, #0]
 800b7b0:	0601      	lsls	r1, r0, #24
 800b7b2:	d501      	bpl.n	800b7b8 <_printf_i+0xec>
 800b7b4:	681e      	ldr	r6, [r3, #0]
 800b7b6:	e002      	b.n	800b7be <_printf_i+0xf2>
 800b7b8:	0646      	lsls	r6, r0, #25
 800b7ba:	d5fb      	bpl.n	800b7b4 <_printf_i+0xe8>
 800b7bc:	881e      	ldrh	r6, [r3, #0]
 800b7be:	4854      	ldr	r0, [pc, #336]	; (800b910 <_printf_i+0x244>)
 800b7c0:	2f6f      	cmp	r7, #111	; 0x6f
 800b7c2:	bf0c      	ite	eq
 800b7c4:	2308      	moveq	r3, #8
 800b7c6:	230a      	movne	r3, #10
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b7ce:	6865      	ldr	r5, [r4, #4]
 800b7d0:	60a5      	str	r5, [r4, #8]
 800b7d2:	2d00      	cmp	r5, #0
 800b7d4:	bfa2      	ittt	ge
 800b7d6:	6821      	ldrge	r1, [r4, #0]
 800b7d8:	f021 0104 	bicge.w	r1, r1, #4
 800b7dc:	6021      	strge	r1, [r4, #0]
 800b7de:	b90e      	cbnz	r6, 800b7e4 <_printf_i+0x118>
 800b7e0:	2d00      	cmp	r5, #0
 800b7e2:	d04d      	beq.n	800b880 <_printf_i+0x1b4>
 800b7e4:	4615      	mov	r5, r2
 800b7e6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b7ea:	fb03 6711 	mls	r7, r3, r1, r6
 800b7ee:	5dc7      	ldrb	r7, [r0, r7]
 800b7f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b7f4:	4637      	mov	r7, r6
 800b7f6:	42bb      	cmp	r3, r7
 800b7f8:	460e      	mov	r6, r1
 800b7fa:	d9f4      	bls.n	800b7e6 <_printf_i+0x11a>
 800b7fc:	2b08      	cmp	r3, #8
 800b7fe:	d10b      	bne.n	800b818 <_printf_i+0x14c>
 800b800:	6823      	ldr	r3, [r4, #0]
 800b802:	07de      	lsls	r6, r3, #31
 800b804:	d508      	bpl.n	800b818 <_printf_i+0x14c>
 800b806:	6923      	ldr	r3, [r4, #16]
 800b808:	6861      	ldr	r1, [r4, #4]
 800b80a:	4299      	cmp	r1, r3
 800b80c:	bfde      	ittt	le
 800b80e:	2330      	movle	r3, #48	; 0x30
 800b810:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b814:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b818:	1b52      	subs	r2, r2, r5
 800b81a:	6122      	str	r2, [r4, #16]
 800b81c:	f8cd a000 	str.w	sl, [sp]
 800b820:	464b      	mov	r3, r9
 800b822:	aa03      	add	r2, sp, #12
 800b824:	4621      	mov	r1, r4
 800b826:	4640      	mov	r0, r8
 800b828:	f7ff fee2 	bl	800b5f0 <_printf_common>
 800b82c:	3001      	adds	r0, #1
 800b82e:	d14c      	bne.n	800b8ca <_printf_i+0x1fe>
 800b830:	f04f 30ff 	mov.w	r0, #4294967295
 800b834:	b004      	add	sp, #16
 800b836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b83a:	4835      	ldr	r0, [pc, #212]	; (800b910 <_printf_i+0x244>)
 800b83c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b840:	6829      	ldr	r1, [r5, #0]
 800b842:	6823      	ldr	r3, [r4, #0]
 800b844:	f851 6b04 	ldr.w	r6, [r1], #4
 800b848:	6029      	str	r1, [r5, #0]
 800b84a:	061d      	lsls	r5, r3, #24
 800b84c:	d514      	bpl.n	800b878 <_printf_i+0x1ac>
 800b84e:	07df      	lsls	r7, r3, #31
 800b850:	bf44      	itt	mi
 800b852:	f043 0320 	orrmi.w	r3, r3, #32
 800b856:	6023      	strmi	r3, [r4, #0]
 800b858:	b91e      	cbnz	r6, 800b862 <_printf_i+0x196>
 800b85a:	6823      	ldr	r3, [r4, #0]
 800b85c:	f023 0320 	bic.w	r3, r3, #32
 800b860:	6023      	str	r3, [r4, #0]
 800b862:	2310      	movs	r3, #16
 800b864:	e7b0      	b.n	800b7c8 <_printf_i+0xfc>
 800b866:	6823      	ldr	r3, [r4, #0]
 800b868:	f043 0320 	orr.w	r3, r3, #32
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	2378      	movs	r3, #120	; 0x78
 800b870:	4828      	ldr	r0, [pc, #160]	; (800b914 <_printf_i+0x248>)
 800b872:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b876:	e7e3      	b.n	800b840 <_printf_i+0x174>
 800b878:	0659      	lsls	r1, r3, #25
 800b87a:	bf48      	it	mi
 800b87c:	b2b6      	uxthmi	r6, r6
 800b87e:	e7e6      	b.n	800b84e <_printf_i+0x182>
 800b880:	4615      	mov	r5, r2
 800b882:	e7bb      	b.n	800b7fc <_printf_i+0x130>
 800b884:	682b      	ldr	r3, [r5, #0]
 800b886:	6826      	ldr	r6, [r4, #0]
 800b888:	6961      	ldr	r1, [r4, #20]
 800b88a:	1d18      	adds	r0, r3, #4
 800b88c:	6028      	str	r0, [r5, #0]
 800b88e:	0635      	lsls	r5, r6, #24
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	d501      	bpl.n	800b898 <_printf_i+0x1cc>
 800b894:	6019      	str	r1, [r3, #0]
 800b896:	e002      	b.n	800b89e <_printf_i+0x1d2>
 800b898:	0670      	lsls	r0, r6, #25
 800b89a:	d5fb      	bpl.n	800b894 <_printf_i+0x1c8>
 800b89c:	8019      	strh	r1, [r3, #0]
 800b89e:	2300      	movs	r3, #0
 800b8a0:	6123      	str	r3, [r4, #16]
 800b8a2:	4615      	mov	r5, r2
 800b8a4:	e7ba      	b.n	800b81c <_printf_i+0x150>
 800b8a6:	682b      	ldr	r3, [r5, #0]
 800b8a8:	1d1a      	adds	r2, r3, #4
 800b8aa:	602a      	str	r2, [r5, #0]
 800b8ac:	681d      	ldr	r5, [r3, #0]
 800b8ae:	6862      	ldr	r2, [r4, #4]
 800b8b0:	2100      	movs	r1, #0
 800b8b2:	4628      	mov	r0, r5
 800b8b4:	f7f4 fc9c 	bl	80001f0 <memchr>
 800b8b8:	b108      	cbz	r0, 800b8be <_printf_i+0x1f2>
 800b8ba:	1b40      	subs	r0, r0, r5
 800b8bc:	6060      	str	r0, [r4, #4]
 800b8be:	6863      	ldr	r3, [r4, #4]
 800b8c0:	6123      	str	r3, [r4, #16]
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8c8:	e7a8      	b.n	800b81c <_printf_i+0x150>
 800b8ca:	6923      	ldr	r3, [r4, #16]
 800b8cc:	462a      	mov	r2, r5
 800b8ce:	4649      	mov	r1, r9
 800b8d0:	4640      	mov	r0, r8
 800b8d2:	47d0      	blx	sl
 800b8d4:	3001      	adds	r0, #1
 800b8d6:	d0ab      	beq.n	800b830 <_printf_i+0x164>
 800b8d8:	6823      	ldr	r3, [r4, #0]
 800b8da:	079b      	lsls	r3, r3, #30
 800b8dc:	d413      	bmi.n	800b906 <_printf_i+0x23a>
 800b8de:	68e0      	ldr	r0, [r4, #12]
 800b8e0:	9b03      	ldr	r3, [sp, #12]
 800b8e2:	4298      	cmp	r0, r3
 800b8e4:	bfb8      	it	lt
 800b8e6:	4618      	movlt	r0, r3
 800b8e8:	e7a4      	b.n	800b834 <_printf_i+0x168>
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	4632      	mov	r2, r6
 800b8ee:	4649      	mov	r1, r9
 800b8f0:	4640      	mov	r0, r8
 800b8f2:	47d0      	blx	sl
 800b8f4:	3001      	adds	r0, #1
 800b8f6:	d09b      	beq.n	800b830 <_printf_i+0x164>
 800b8f8:	3501      	adds	r5, #1
 800b8fa:	68e3      	ldr	r3, [r4, #12]
 800b8fc:	9903      	ldr	r1, [sp, #12]
 800b8fe:	1a5b      	subs	r3, r3, r1
 800b900:	42ab      	cmp	r3, r5
 800b902:	dcf2      	bgt.n	800b8ea <_printf_i+0x21e>
 800b904:	e7eb      	b.n	800b8de <_printf_i+0x212>
 800b906:	2500      	movs	r5, #0
 800b908:	f104 0619 	add.w	r6, r4, #25
 800b90c:	e7f5      	b.n	800b8fa <_printf_i+0x22e>
 800b90e:	bf00      	nop
 800b910:	0800e43a 	.word	0x0800e43a
 800b914:	0800e44b 	.word	0x0800e44b

0800b918 <siprintf>:
 800b918:	b40e      	push	{r1, r2, r3}
 800b91a:	b500      	push	{lr}
 800b91c:	b09c      	sub	sp, #112	; 0x70
 800b91e:	ab1d      	add	r3, sp, #116	; 0x74
 800b920:	9002      	str	r0, [sp, #8]
 800b922:	9006      	str	r0, [sp, #24]
 800b924:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b928:	4809      	ldr	r0, [pc, #36]	; (800b950 <siprintf+0x38>)
 800b92a:	9107      	str	r1, [sp, #28]
 800b92c:	9104      	str	r1, [sp, #16]
 800b92e:	4909      	ldr	r1, [pc, #36]	; (800b954 <siprintf+0x3c>)
 800b930:	f853 2b04 	ldr.w	r2, [r3], #4
 800b934:	9105      	str	r1, [sp, #20]
 800b936:	6800      	ldr	r0, [r0, #0]
 800b938:	9301      	str	r3, [sp, #4]
 800b93a:	a902      	add	r1, sp, #8
 800b93c:	f001 fb76 	bl	800d02c <_svfiprintf_r>
 800b940:	9b02      	ldr	r3, [sp, #8]
 800b942:	2200      	movs	r2, #0
 800b944:	701a      	strb	r2, [r3, #0]
 800b946:	b01c      	add	sp, #112	; 0x70
 800b948:	f85d eb04 	ldr.w	lr, [sp], #4
 800b94c:	b003      	add	sp, #12
 800b94e:	4770      	bx	lr
 800b950:	20000110 	.word	0x20000110
 800b954:	ffff0208 	.word	0xffff0208

0800b958 <quorem>:
 800b958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b95c:	6903      	ldr	r3, [r0, #16]
 800b95e:	690c      	ldr	r4, [r1, #16]
 800b960:	42a3      	cmp	r3, r4
 800b962:	4607      	mov	r7, r0
 800b964:	f2c0 8081 	blt.w	800ba6a <quorem+0x112>
 800b968:	3c01      	subs	r4, #1
 800b96a:	f101 0814 	add.w	r8, r1, #20
 800b96e:	f100 0514 	add.w	r5, r0, #20
 800b972:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b976:	9301      	str	r3, [sp, #4]
 800b978:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b97c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b980:	3301      	adds	r3, #1
 800b982:	429a      	cmp	r2, r3
 800b984:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b988:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b98c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b990:	d331      	bcc.n	800b9f6 <quorem+0x9e>
 800b992:	f04f 0e00 	mov.w	lr, #0
 800b996:	4640      	mov	r0, r8
 800b998:	46ac      	mov	ip, r5
 800b99a:	46f2      	mov	sl, lr
 800b99c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b9a0:	b293      	uxth	r3, r2
 800b9a2:	fb06 e303 	mla	r3, r6, r3, lr
 800b9a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	ebaa 0303 	sub.w	r3, sl, r3
 800b9b0:	f8dc a000 	ldr.w	sl, [ip]
 800b9b4:	0c12      	lsrs	r2, r2, #16
 800b9b6:	fa13 f38a 	uxtah	r3, r3, sl
 800b9ba:	fb06 e202 	mla	r2, r6, r2, lr
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	9b00      	ldr	r3, [sp, #0]
 800b9c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b9c6:	b292      	uxth	r2, r2
 800b9c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b9cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b9d0:	f8bd 3000 	ldrh.w	r3, [sp]
 800b9d4:	4581      	cmp	r9, r0
 800b9d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9da:	f84c 3b04 	str.w	r3, [ip], #4
 800b9de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b9e2:	d2db      	bcs.n	800b99c <quorem+0x44>
 800b9e4:	f855 300b 	ldr.w	r3, [r5, fp]
 800b9e8:	b92b      	cbnz	r3, 800b9f6 <quorem+0x9e>
 800b9ea:	9b01      	ldr	r3, [sp, #4]
 800b9ec:	3b04      	subs	r3, #4
 800b9ee:	429d      	cmp	r5, r3
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	d32e      	bcc.n	800ba52 <quorem+0xfa>
 800b9f4:	613c      	str	r4, [r7, #16]
 800b9f6:	4638      	mov	r0, r7
 800b9f8:	f001 f8c4 	bl	800cb84 <__mcmp>
 800b9fc:	2800      	cmp	r0, #0
 800b9fe:	db24      	blt.n	800ba4a <quorem+0xf2>
 800ba00:	3601      	adds	r6, #1
 800ba02:	4628      	mov	r0, r5
 800ba04:	f04f 0c00 	mov.w	ip, #0
 800ba08:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba0c:	f8d0 e000 	ldr.w	lr, [r0]
 800ba10:	b293      	uxth	r3, r2
 800ba12:	ebac 0303 	sub.w	r3, ip, r3
 800ba16:	0c12      	lsrs	r2, r2, #16
 800ba18:	fa13 f38e 	uxtah	r3, r3, lr
 800ba1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ba20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba2a:	45c1      	cmp	r9, r8
 800ba2c:	f840 3b04 	str.w	r3, [r0], #4
 800ba30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ba34:	d2e8      	bcs.n	800ba08 <quorem+0xb0>
 800ba36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba3e:	b922      	cbnz	r2, 800ba4a <quorem+0xf2>
 800ba40:	3b04      	subs	r3, #4
 800ba42:	429d      	cmp	r5, r3
 800ba44:	461a      	mov	r2, r3
 800ba46:	d30a      	bcc.n	800ba5e <quorem+0x106>
 800ba48:	613c      	str	r4, [r7, #16]
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	b003      	add	sp, #12
 800ba4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba52:	6812      	ldr	r2, [r2, #0]
 800ba54:	3b04      	subs	r3, #4
 800ba56:	2a00      	cmp	r2, #0
 800ba58:	d1cc      	bne.n	800b9f4 <quorem+0x9c>
 800ba5a:	3c01      	subs	r4, #1
 800ba5c:	e7c7      	b.n	800b9ee <quorem+0x96>
 800ba5e:	6812      	ldr	r2, [r2, #0]
 800ba60:	3b04      	subs	r3, #4
 800ba62:	2a00      	cmp	r2, #0
 800ba64:	d1f0      	bne.n	800ba48 <quorem+0xf0>
 800ba66:	3c01      	subs	r4, #1
 800ba68:	e7eb      	b.n	800ba42 <quorem+0xea>
 800ba6a:	2000      	movs	r0, #0
 800ba6c:	e7ee      	b.n	800ba4c <quorem+0xf4>
	...

0800ba70 <_dtoa_r>:
 800ba70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba74:	ed2d 8b04 	vpush	{d8-d9}
 800ba78:	ec57 6b10 	vmov	r6, r7, d0
 800ba7c:	b093      	sub	sp, #76	; 0x4c
 800ba7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ba80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ba84:	9106      	str	r1, [sp, #24]
 800ba86:	ee10 aa10 	vmov	sl, s0
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	9209      	str	r2, [sp, #36]	; 0x24
 800ba8e:	930c      	str	r3, [sp, #48]	; 0x30
 800ba90:	46bb      	mov	fp, r7
 800ba92:	b975      	cbnz	r5, 800bab2 <_dtoa_r+0x42>
 800ba94:	2010      	movs	r0, #16
 800ba96:	f000 fddd 	bl	800c654 <malloc>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	6260      	str	r0, [r4, #36]	; 0x24
 800ba9e:	b920      	cbnz	r0, 800baaa <_dtoa_r+0x3a>
 800baa0:	4ba7      	ldr	r3, [pc, #668]	; (800bd40 <_dtoa_r+0x2d0>)
 800baa2:	21ea      	movs	r1, #234	; 0xea
 800baa4:	48a7      	ldr	r0, [pc, #668]	; (800bd44 <_dtoa_r+0x2d4>)
 800baa6:	f001 fbd1 	bl	800d24c <__assert_func>
 800baaa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800baae:	6005      	str	r5, [r0, #0]
 800bab0:	60c5      	str	r5, [r0, #12]
 800bab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bab4:	6819      	ldr	r1, [r3, #0]
 800bab6:	b151      	cbz	r1, 800bace <_dtoa_r+0x5e>
 800bab8:	685a      	ldr	r2, [r3, #4]
 800baba:	604a      	str	r2, [r1, #4]
 800babc:	2301      	movs	r3, #1
 800babe:	4093      	lsls	r3, r2
 800bac0:	608b      	str	r3, [r1, #8]
 800bac2:	4620      	mov	r0, r4
 800bac4:	f000 fe1c 	bl	800c700 <_Bfree>
 800bac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800baca:	2200      	movs	r2, #0
 800bacc:	601a      	str	r2, [r3, #0]
 800bace:	1e3b      	subs	r3, r7, #0
 800bad0:	bfaa      	itet	ge
 800bad2:	2300      	movge	r3, #0
 800bad4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bad8:	f8c8 3000 	strge.w	r3, [r8]
 800badc:	4b9a      	ldr	r3, [pc, #616]	; (800bd48 <_dtoa_r+0x2d8>)
 800bade:	bfbc      	itt	lt
 800bae0:	2201      	movlt	r2, #1
 800bae2:	f8c8 2000 	strlt.w	r2, [r8]
 800bae6:	ea33 030b 	bics.w	r3, r3, fp
 800baea:	d11b      	bne.n	800bb24 <_dtoa_r+0xb4>
 800baec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800baee:	f242 730f 	movw	r3, #9999	; 0x270f
 800baf2:	6013      	str	r3, [r2, #0]
 800baf4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800baf8:	4333      	orrs	r3, r6
 800bafa:	f000 8592 	beq.w	800c622 <_dtoa_r+0xbb2>
 800bafe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb00:	b963      	cbnz	r3, 800bb1c <_dtoa_r+0xac>
 800bb02:	4b92      	ldr	r3, [pc, #584]	; (800bd4c <_dtoa_r+0x2dc>)
 800bb04:	e022      	b.n	800bb4c <_dtoa_r+0xdc>
 800bb06:	4b92      	ldr	r3, [pc, #584]	; (800bd50 <_dtoa_r+0x2e0>)
 800bb08:	9301      	str	r3, [sp, #4]
 800bb0a:	3308      	adds	r3, #8
 800bb0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bb0e:	6013      	str	r3, [r2, #0]
 800bb10:	9801      	ldr	r0, [sp, #4]
 800bb12:	b013      	add	sp, #76	; 0x4c
 800bb14:	ecbd 8b04 	vpop	{d8-d9}
 800bb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb1c:	4b8b      	ldr	r3, [pc, #556]	; (800bd4c <_dtoa_r+0x2dc>)
 800bb1e:	9301      	str	r3, [sp, #4]
 800bb20:	3303      	adds	r3, #3
 800bb22:	e7f3      	b.n	800bb0c <_dtoa_r+0x9c>
 800bb24:	2200      	movs	r2, #0
 800bb26:	2300      	movs	r3, #0
 800bb28:	4650      	mov	r0, sl
 800bb2a:	4659      	mov	r1, fp
 800bb2c:	f7f4 ffd4 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb30:	ec4b ab19 	vmov	d9, sl, fp
 800bb34:	4680      	mov	r8, r0
 800bb36:	b158      	cbz	r0, 800bb50 <_dtoa_r+0xe0>
 800bb38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	6013      	str	r3, [r2, #0]
 800bb3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f000 856b 	beq.w	800c61c <_dtoa_r+0xbac>
 800bb46:	4883      	ldr	r0, [pc, #524]	; (800bd54 <_dtoa_r+0x2e4>)
 800bb48:	6018      	str	r0, [r3, #0]
 800bb4a:	1e43      	subs	r3, r0, #1
 800bb4c:	9301      	str	r3, [sp, #4]
 800bb4e:	e7df      	b.n	800bb10 <_dtoa_r+0xa0>
 800bb50:	ec4b ab10 	vmov	d0, sl, fp
 800bb54:	aa10      	add	r2, sp, #64	; 0x40
 800bb56:	a911      	add	r1, sp, #68	; 0x44
 800bb58:	4620      	mov	r0, r4
 800bb5a:	f001 f8b9 	bl	800ccd0 <__d2b>
 800bb5e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bb62:	ee08 0a10 	vmov	s16, r0
 800bb66:	2d00      	cmp	r5, #0
 800bb68:	f000 8084 	beq.w	800bc74 <_dtoa_r+0x204>
 800bb6c:	ee19 3a90 	vmov	r3, s19
 800bb70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb74:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bb78:	4656      	mov	r6, sl
 800bb7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bb7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bb82:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bb86:	4b74      	ldr	r3, [pc, #464]	; (800bd58 <_dtoa_r+0x2e8>)
 800bb88:	2200      	movs	r2, #0
 800bb8a:	4630      	mov	r0, r6
 800bb8c:	4639      	mov	r1, r7
 800bb8e:	f7f4 fb83 	bl	8000298 <__aeabi_dsub>
 800bb92:	a365      	add	r3, pc, #404	; (adr r3, 800bd28 <_dtoa_r+0x2b8>)
 800bb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb98:	f7f4 fd36 	bl	8000608 <__aeabi_dmul>
 800bb9c:	a364      	add	r3, pc, #400	; (adr r3, 800bd30 <_dtoa_r+0x2c0>)
 800bb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba2:	f7f4 fb7b 	bl	800029c <__adddf3>
 800bba6:	4606      	mov	r6, r0
 800bba8:	4628      	mov	r0, r5
 800bbaa:	460f      	mov	r7, r1
 800bbac:	f7f4 fcc2 	bl	8000534 <__aeabi_i2d>
 800bbb0:	a361      	add	r3, pc, #388	; (adr r3, 800bd38 <_dtoa_r+0x2c8>)
 800bbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb6:	f7f4 fd27 	bl	8000608 <__aeabi_dmul>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	4630      	mov	r0, r6
 800bbc0:	4639      	mov	r1, r7
 800bbc2:	f7f4 fb6b 	bl	800029c <__adddf3>
 800bbc6:	4606      	mov	r6, r0
 800bbc8:	460f      	mov	r7, r1
 800bbca:	f7f4 ffcd 	bl	8000b68 <__aeabi_d2iz>
 800bbce:	2200      	movs	r2, #0
 800bbd0:	9000      	str	r0, [sp, #0]
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	4639      	mov	r1, r7
 800bbd8:	f7f4 ff88 	bl	8000aec <__aeabi_dcmplt>
 800bbdc:	b150      	cbz	r0, 800bbf4 <_dtoa_r+0x184>
 800bbde:	9800      	ldr	r0, [sp, #0]
 800bbe0:	f7f4 fca8 	bl	8000534 <__aeabi_i2d>
 800bbe4:	4632      	mov	r2, r6
 800bbe6:	463b      	mov	r3, r7
 800bbe8:	f7f4 ff76 	bl	8000ad8 <__aeabi_dcmpeq>
 800bbec:	b910      	cbnz	r0, 800bbf4 <_dtoa_r+0x184>
 800bbee:	9b00      	ldr	r3, [sp, #0]
 800bbf0:	3b01      	subs	r3, #1
 800bbf2:	9300      	str	r3, [sp, #0]
 800bbf4:	9b00      	ldr	r3, [sp, #0]
 800bbf6:	2b16      	cmp	r3, #22
 800bbf8:	d85a      	bhi.n	800bcb0 <_dtoa_r+0x240>
 800bbfa:	9a00      	ldr	r2, [sp, #0]
 800bbfc:	4b57      	ldr	r3, [pc, #348]	; (800bd5c <_dtoa_r+0x2ec>)
 800bbfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc06:	ec51 0b19 	vmov	r0, r1, d9
 800bc0a:	f7f4 ff6f 	bl	8000aec <__aeabi_dcmplt>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	d050      	beq.n	800bcb4 <_dtoa_r+0x244>
 800bc12:	9b00      	ldr	r3, [sp, #0]
 800bc14:	3b01      	subs	r3, #1
 800bc16:	9300      	str	r3, [sp, #0]
 800bc18:	2300      	movs	r3, #0
 800bc1a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc1e:	1b5d      	subs	r5, r3, r5
 800bc20:	1e6b      	subs	r3, r5, #1
 800bc22:	9305      	str	r3, [sp, #20]
 800bc24:	bf45      	ittet	mi
 800bc26:	f1c5 0301 	rsbmi	r3, r5, #1
 800bc2a:	9304      	strmi	r3, [sp, #16]
 800bc2c:	2300      	movpl	r3, #0
 800bc2e:	2300      	movmi	r3, #0
 800bc30:	bf4c      	ite	mi
 800bc32:	9305      	strmi	r3, [sp, #20]
 800bc34:	9304      	strpl	r3, [sp, #16]
 800bc36:	9b00      	ldr	r3, [sp, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	db3d      	blt.n	800bcb8 <_dtoa_r+0x248>
 800bc3c:	9b05      	ldr	r3, [sp, #20]
 800bc3e:	9a00      	ldr	r2, [sp, #0]
 800bc40:	920a      	str	r2, [sp, #40]	; 0x28
 800bc42:	4413      	add	r3, r2
 800bc44:	9305      	str	r3, [sp, #20]
 800bc46:	2300      	movs	r3, #0
 800bc48:	9307      	str	r3, [sp, #28]
 800bc4a:	9b06      	ldr	r3, [sp, #24]
 800bc4c:	2b09      	cmp	r3, #9
 800bc4e:	f200 8089 	bhi.w	800bd64 <_dtoa_r+0x2f4>
 800bc52:	2b05      	cmp	r3, #5
 800bc54:	bfc4      	itt	gt
 800bc56:	3b04      	subgt	r3, #4
 800bc58:	9306      	strgt	r3, [sp, #24]
 800bc5a:	9b06      	ldr	r3, [sp, #24]
 800bc5c:	f1a3 0302 	sub.w	r3, r3, #2
 800bc60:	bfcc      	ite	gt
 800bc62:	2500      	movgt	r5, #0
 800bc64:	2501      	movle	r5, #1
 800bc66:	2b03      	cmp	r3, #3
 800bc68:	f200 8087 	bhi.w	800bd7a <_dtoa_r+0x30a>
 800bc6c:	e8df f003 	tbb	[pc, r3]
 800bc70:	59383a2d 	.word	0x59383a2d
 800bc74:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bc78:	441d      	add	r5, r3
 800bc7a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bc7e:	2b20      	cmp	r3, #32
 800bc80:	bfc1      	itttt	gt
 800bc82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bc86:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bc8a:	fa0b f303 	lslgt.w	r3, fp, r3
 800bc8e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bc92:	bfda      	itte	le
 800bc94:	f1c3 0320 	rsble	r3, r3, #32
 800bc98:	fa06 f003 	lslle.w	r0, r6, r3
 800bc9c:	4318      	orrgt	r0, r3
 800bc9e:	f7f4 fc39 	bl	8000514 <__aeabi_ui2d>
 800bca2:	2301      	movs	r3, #1
 800bca4:	4606      	mov	r6, r0
 800bca6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bcaa:	3d01      	subs	r5, #1
 800bcac:	930e      	str	r3, [sp, #56]	; 0x38
 800bcae:	e76a      	b.n	800bb86 <_dtoa_r+0x116>
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	e7b2      	b.n	800bc1a <_dtoa_r+0x1aa>
 800bcb4:	900b      	str	r0, [sp, #44]	; 0x2c
 800bcb6:	e7b1      	b.n	800bc1c <_dtoa_r+0x1ac>
 800bcb8:	9b04      	ldr	r3, [sp, #16]
 800bcba:	9a00      	ldr	r2, [sp, #0]
 800bcbc:	1a9b      	subs	r3, r3, r2
 800bcbe:	9304      	str	r3, [sp, #16]
 800bcc0:	4253      	negs	r3, r2
 800bcc2:	9307      	str	r3, [sp, #28]
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	930a      	str	r3, [sp, #40]	; 0x28
 800bcc8:	e7bf      	b.n	800bc4a <_dtoa_r+0x1da>
 800bcca:	2300      	movs	r3, #0
 800bccc:	9308      	str	r3, [sp, #32]
 800bcce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	dc55      	bgt.n	800bd80 <_dtoa_r+0x310>
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bcda:	461a      	mov	r2, r3
 800bcdc:	9209      	str	r2, [sp, #36]	; 0x24
 800bcde:	e00c      	b.n	800bcfa <_dtoa_r+0x28a>
 800bce0:	2301      	movs	r3, #1
 800bce2:	e7f3      	b.n	800bccc <_dtoa_r+0x25c>
 800bce4:	2300      	movs	r3, #0
 800bce6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bce8:	9308      	str	r3, [sp, #32]
 800bcea:	9b00      	ldr	r3, [sp, #0]
 800bcec:	4413      	add	r3, r2
 800bcee:	9302      	str	r3, [sp, #8]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	9303      	str	r3, [sp, #12]
 800bcf6:	bfb8      	it	lt
 800bcf8:	2301      	movlt	r3, #1
 800bcfa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	6042      	str	r2, [r0, #4]
 800bd00:	2204      	movs	r2, #4
 800bd02:	f102 0614 	add.w	r6, r2, #20
 800bd06:	429e      	cmp	r6, r3
 800bd08:	6841      	ldr	r1, [r0, #4]
 800bd0a:	d93d      	bls.n	800bd88 <_dtoa_r+0x318>
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	f000 fcb7 	bl	800c680 <_Balloc>
 800bd12:	9001      	str	r0, [sp, #4]
 800bd14:	2800      	cmp	r0, #0
 800bd16:	d13b      	bne.n	800bd90 <_dtoa_r+0x320>
 800bd18:	4b11      	ldr	r3, [pc, #68]	; (800bd60 <_dtoa_r+0x2f0>)
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bd20:	e6c0      	b.n	800baa4 <_dtoa_r+0x34>
 800bd22:	2301      	movs	r3, #1
 800bd24:	e7df      	b.n	800bce6 <_dtoa_r+0x276>
 800bd26:	bf00      	nop
 800bd28:	636f4361 	.word	0x636f4361
 800bd2c:	3fd287a7 	.word	0x3fd287a7
 800bd30:	8b60c8b3 	.word	0x8b60c8b3
 800bd34:	3fc68a28 	.word	0x3fc68a28
 800bd38:	509f79fb 	.word	0x509f79fb
 800bd3c:	3fd34413 	.word	0x3fd34413
 800bd40:	0800e469 	.word	0x0800e469
 800bd44:	0800e480 	.word	0x0800e480
 800bd48:	7ff00000 	.word	0x7ff00000
 800bd4c:	0800e465 	.word	0x0800e465
 800bd50:	0800e45c 	.word	0x0800e45c
 800bd54:	0800e439 	.word	0x0800e439
 800bd58:	3ff80000 	.word	0x3ff80000
 800bd5c:	0800e570 	.word	0x0800e570
 800bd60:	0800e4db 	.word	0x0800e4db
 800bd64:	2501      	movs	r5, #1
 800bd66:	2300      	movs	r3, #0
 800bd68:	9306      	str	r3, [sp, #24]
 800bd6a:	9508      	str	r5, [sp, #32]
 800bd6c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd70:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bd74:	2200      	movs	r2, #0
 800bd76:	2312      	movs	r3, #18
 800bd78:	e7b0      	b.n	800bcdc <_dtoa_r+0x26c>
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	9308      	str	r3, [sp, #32]
 800bd7e:	e7f5      	b.n	800bd6c <_dtoa_r+0x2fc>
 800bd80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd82:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bd86:	e7b8      	b.n	800bcfa <_dtoa_r+0x28a>
 800bd88:	3101      	adds	r1, #1
 800bd8a:	6041      	str	r1, [r0, #4]
 800bd8c:	0052      	lsls	r2, r2, #1
 800bd8e:	e7b8      	b.n	800bd02 <_dtoa_r+0x292>
 800bd90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd92:	9a01      	ldr	r2, [sp, #4]
 800bd94:	601a      	str	r2, [r3, #0]
 800bd96:	9b03      	ldr	r3, [sp, #12]
 800bd98:	2b0e      	cmp	r3, #14
 800bd9a:	f200 809d 	bhi.w	800bed8 <_dtoa_r+0x468>
 800bd9e:	2d00      	cmp	r5, #0
 800bda0:	f000 809a 	beq.w	800bed8 <_dtoa_r+0x468>
 800bda4:	9b00      	ldr	r3, [sp, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	dd32      	ble.n	800be10 <_dtoa_r+0x3a0>
 800bdaa:	4ab7      	ldr	r2, [pc, #732]	; (800c088 <_dtoa_r+0x618>)
 800bdac:	f003 030f 	and.w	r3, r3, #15
 800bdb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bdb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bdb8:	9b00      	ldr	r3, [sp, #0]
 800bdba:	05d8      	lsls	r0, r3, #23
 800bdbc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bdc0:	d516      	bpl.n	800bdf0 <_dtoa_r+0x380>
 800bdc2:	4bb2      	ldr	r3, [pc, #712]	; (800c08c <_dtoa_r+0x61c>)
 800bdc4:	ec51 0b19 	vmov	r0, r1, d9
 800bdc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bdcc:	f7f4 fd46 	bl	800085c <__aeabi_ddiv>
 800bdd0:	f007 070f 	and.w	r7, r7, #15
 800bdd4:	4682      	mov	sl, r0
 800bdd6:	468b      	mov	fp, r1
 800bdd8:	2503      	movs	r5, #3
 800bdda:	4eac      	ldr	r6, [pc, #688]	; (800c08c <_dtoa_r+0x61c>)
 800bddc:	b957      	cbnz	r7, 800bdf4 <_dtoa_r+0x384>
 800bdde:	4642      	mov	r2, r8
 800bde0:	464b      	mov	r3, r9
 800bde2:	4650      	mov	r0, sl
 800bde4:	4659      	mov	r1, fp
 800bde6:	f7f4 fd39 	bl	800085c <__aeabi_ddiv>
 800bdea:	4682      	mov	sl, r0
 800bdec:	468b      	mov	fp, r1
 800bdee:	e028      	b.n	800be42 <_dtoa_r+0x3d2>
 800bdf0:	2502      	movs	r5, #2
 800bdf2:	e7f2      	b.n	800bdda <_dtoa_r+0x36a>
 800bdf4:	07f9      	lsls	r1, r7, #31
 800bdf6:	d508      	bpl.n	800be0a <_dtoa_r+0x39a>
 800bdf8:	4640      	mov	r0, r8
 800bdfa:	4649      	mov	r1, r9
 800bdfc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800be00:	f7f4 fc02 	bl	8000608 <__aeabi_dmul>
 800be04:	3501      	adds	r5, #1
 800be06:	4680      	mov	r8, r0
 800be08:	4689      	mov	r9, r1
 800be0a:	107f      	asrs	r7, r7, #1
 800be0c:	3608      	adds	r6, #8
 800be0e:	e7e5      	b.n	800bddc <_dtoa_r+0x36c>
 800be10:	f000 809b 	beq.w	800bf4a <_dtoa_r+0x4da>
 800be14:	9b00      	ldr	r3, [sp, #0]
 800be16:	4f9d      	ldr	r7, [pc, #628]	; (800c08c <_dtoa_r+0x61c>)
 800be18:	425e      	negs	r6, r3
 800be1a:	4b9b      	ldr	r3, [pc, #620]	; (800c088 <_dtoa_r+0x618>)
 800be1c:	f006 020f 	and.w	r2, r6, #15
 800be20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be28:	ec51 0b19 	vmov	r0, r1, d9
 800be2c:	f7f4 fbec 	bl	8000608 <__aeabi_dmul>
 800be30:	1136      	asrs	r6, r6, #4
 800be32:	4682      	mov	sl, r0
 800be34:	468b      	mov	fp, r1
 800be36:	2300      	movs	r3, #0
 800be38:	2502      	movs	r5, #2
 800be3a:	2e00      	cmp	r6, #0
 800be3c:	d17a      	bne.n	800bf34 <_dtoa_r+0x4c4>
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d1d3      	bne.n	800bdea <_dtoa_r+0x37a>
 800be42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be44:	2b00      	cmp	r3, #0
 800be46:	f000 8082 	beq.w	800bf4e <_dtoa_r+0x4de>
 800be4a:	4b91      	ldr	r3, [pc, #580]	; (800c090 <_dtoa_r+0x620>)
 800be4c:	2200      	movs	r2, #0
 800be4e:	4650      	mov	r0, sl
 800be50:	4659      	mov	r1, fp
 800be52:	f7f4 fe4b 	bl	8000aec <__aeabi_dcmplt>
 800be56:	2800      	cmp	r0, #0
 800be58:	d079      	beq.n	800bf4e <_dtoa_r+0x4de>
 800be5a:	9b03      	ldr	r3, [sp, #12]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d076      	beq.n	800bf4e <_dtoa_r+0x4de>
 800be60:	9b02      	ldr	r3, [sp, #8]
 800be62:	2b00      	cmp	r3, #0
 800be64:	dd36      	ble.n	800bed4 <_dtoa_r+0x464>
 800be66:	9b00      	ldr	r3, [sp, #0]
 800be68:	4650      	mov	r0, sl
 800be6a:	4659      	mov	r1, fp
 800be6c:	1e5f      	subs	r7, r3, #1
 800be6e:	2200      	movs	r2, #0
 800be70:	4b88      	ldr	r3, [pc, #544]	; (800c094 <_dtoa_r+0x624>)
 800be72:	f7f4 fbc9 	bl	8000608 <__aeabi_dmul>
 800be76:	9e02      	ldr	r6, [sp, #8]
 800be78:	4682      	mov	sl, r0
 800be7a:	468b      	mov	fp, r1
 800be7c:	3501      	adds	r5, #1
 800be7e:	4628      	mov	r0, r5
 800be80:	f7f4 fb58 	bl	8000534 <__aeabi_i2d>
 800be84:	4652      	mov	r2, sl
 800be86:	465b      	mov	r3, fp
 800be88:	f7f4 fbbe 	bl	8000608 <__aeabi_dmul>
 800be8c:	4b82      	ldr	r3, [pc, #520]	; (800c098 <_dtoa_r+0x628>)
 800be8e:	2200      	movs	r2, #0
 800be90:	f7f4 fa04 	bl	800029c <__adddf3>
 800be94:	46d0      	mov	r8, sl
 800be96:	46d9      	mov	r9, fp
 800be98:	4682      	mov	sl, r0
 800be9a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800be9e:	2e00      	cmp	r6, #0
 800bea0:	d158      	bne.n	800bf54 <_dtoa_r+0x4e4>
 800bea2:	4b7e      	ldr	r3, [pc, #504]	; (800c09c <_dtoa_r+0x62c>)
 800bea4:	2200      	movs	r2, #0
 800bea6:	4640      	mov	r0, r8
 800bea8:	4649      	mov	r1, r9
 800beaa:	f7f4 f9f5 	bl	8000298 <__aeabi_dsub>
 800beae:	4652      	mov	r2, sl
 800beb0:	465b      	mov	r3, fp
 800beb2:	4680      	mov	r8, r0
 800beb4:	4689      	mov	r9, r1
 800beb6:	f7f4 fe37 	bl	8000b28 <__aeabi_dcmpgt>
 800beba:	2800      	cmp	r0, #0
 800bebc:	f040 8295 	bne.w	800c3ea <_dtoa_r+0x97a>
 800bec0:	4652      	mov	r2, sl
 800bec2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bec6:	4640      	mov	r0, r8
 800bec8:	4649      	mov	r1, r9
 800beca:	f7f4 fe0f 	bl	8000aec <__aeabi_dcmplt>
 800bece:	2800      	cmp	r0, #0
 800bed0:	f040 8289 	bne.w	800c3e6 <_dtoa_r+0x976>
 800bed4:	ec5b ab19 	vmov	sl, fp, d9
 800bed8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f2c0 8148 	blt.w	800c170 <_dtoa_r+0x700>
 800bee0:	9a00      	ldr	r2, [sp, #0]
 800bee2:	2a0e      	cmp	r2, #14
 800bee4:	f300 8144 	bgt.w	800c170 <_dtoa_r+0x700>
 800bee8:	4b67      	ldr	r3, [pc, #412]	; (800c088 <_dtoa_r+0x618>)
 800beea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800beee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	f280 80d5 	bge.w	800c0a4 <_dtoa_r+0x634>
 800befa:	9b03      	ldr	r3, [sp, #12]
 800befc:	2b00      	cmp	r3, #0
 800befe:	f300 80d1 	bgt.w	800c0a4 <_dtoa_r+0x634>
 800bf02:	f040 826f 	bne.w	800c3e4 <_dtoa_r+0x974>
 800bf06:	4b65      	ldr	r3, [pc, #404]	; (800c09c <_dtoa_r+0x62c>)
 800bf08:	2200      	movs	r2, #0
 800bf0a:	4640      	mov	r0, r8
 800bf0c:	4649      	mov	r1, r9
 800bf0e:	f7f4 fb7b 	bl	8000608 <__aeabi_dmul>
 800bf12:	4652      	mov	r2, sl
 800bf14:	465b      	mov	r3, fp
 800bf16:	f7f4 fdfd 	bl	8000b14 <__aeabi_dcmpge>
 800bf1a:	9e03      	ldr	r6, [sp, #12]
 800bf1c:	4637      	mov	r7, r6
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	f040 8245 	bne.w	800c3ae <_dtoa_r+0x93e>
 800bf24:	9d01      	ldr	r5, [sp, #4]
 800bf26:	2331      	movs	r3, #49	; 0x31
 800bf28:	f805 3b01 	strb.w	r3, [r5], #1
 800bf2c:	9b00      	ldr	r3, [sp, #0]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	9300      	str	r3, [sp, #0]
 800bf32:	e240      	b.n	800c3b6 <_dtoa_r+0x946>
 800bf34:	07f2      	lsls	r2, r6, #31
 800bf36:	d505      	bpl.n	800bf44 <_dtoa_r+0x4d4>
 800bf38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf3c:	f7f4 fb64 	bl	8000608 <__aeabi_dmul>
 800bf40:	3501      	adds	r5, #1
 800bf42:	2301      	movs	r3, #1
 800bf44:	1076      	asrs	r6, r6, #1
 800bf46:	3708      	adds	r7, #8
 800bf48:	e777      	b.n	800be3a <_dtoa_r+0x3ca>
 800bf4a:	2502      	movs	r5, #2
 800bf4c:	e779      	b.n	800be42 <_dtoa_r+0x3d2>
 800bf4e:	9f00      	ldr	r7, [sp, #0]
 800bf50:	9e03      	ldr	r6, [sp, #12]
 800bf52:	e794      	b.n	800be7e <_dtoa_r+0x40e>
 800bf54:	9901      	ldr	r1, [sp, #4]
 800bf56:	4b4c      	ldr	r3, [pc, #304]	; (800c088 <_dtoa_r+0x618>)
 800bf58:	4431      	add	r1, r6
 800bf5a:	910d      	str	r1, [sp, #52]	; 0x34
 800bf5c:	9908      	ldr	r1, [sp, #32]
 800bf5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bf62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bf66:	2900      	cmp	r1, #0
 800bf68:	d043      	beq.n	800bff2 <_dtoa_r+0x582>
 800bf6a:	494d      	ldr	r1, [pc, #308]	; (800c0a0 <_dtoa_r+0x630>)
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	f7f4 fc75 	bl	800085c <__aeabi_ddiv>
 800bf72:	4652      	mov	r2, sl
 800bf74:	465b      	mov	r3, fp
 800bf76:	f7f4 f98f 	bl	8000298 <__aeabi_dsub>
 800bf7a:	9d01      	ldr	r5, [sp, #4]
 800bf7c:	4682      	mov	sl, r0
 800bf7e:	468b      	mov	fp, r1
 800bf80:	4649      	mov	r1, r9
 800bf82:	4640      	mov	r0, r8
 800bf84:	f7f4 fdf0 	bl	8000b68 <__aeabi_d2iz>
 800bf88:	4606      	mov	r6, r0
 800bf8a:	f7f4 fad3 	bl	8000534 <__aeabi_i2d>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	460b      	mov	r3, r1
 800bf92:	4640      	mov	r0, r8
 800bf94:	4649      	mov	r1, r9
 800bf96:	f7f4 f97f 	bl	8000298 <__aeabi_dsub>
 800bf9a:	3630      	adds	r6, #48	; 0x30
 800bf9c:	f805 6b01 	strb.w	r6, [r5], #1
 800bfa0:	4652      	mov	r2, sl
 800bfa2:	465b      	mov	r3, fp
 800bfa4:	4680      	mov	r8, r0
 800bfa6:	4689      	mov	r9, r1
 800bfa8:	f7f4 fda0 	bl	8000aec <__aeabi_dcmplt>
 800bfac:	2800      	cmp	r0, #0
 800bfae:	d163      	bne.n	800c078 <_dtoa_r+0x608>
 800bfb0:	4642      	mov	r2, r8
 800bfb2:	464b      	mov	r3, r9
 800bfb4:	4936      	ldr	r1, [pc, #216]	; (800c090 <_dtoa_r+0x620>)
 800bfb6:	2000      	movs	r0, #0
 800bfb8:	f7f4 f96e 	bl	8000298 <__aeabi_dsub>
 800bfbc:	4652      	mov	r2, sl
 800bfbe:	465b      	mov	r3, fp
 800bfc0:	f7f4 fd94 	bl	8000aec <__aeabi_dcmplt>
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	f040 80b5 	bne.w	800c134 <_dtoa_r+0x6c4>
 800bfca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bfcc:	429d      	cmp	r5, r3
 800bfce:	d081      	beq.n	800bed4 <_dtoa_r+0x464>
 800bfd0:	4b30      	ldr	r3, [pc, #192]	; (800c094 <_dtoa_r+0x624>)
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	4650      	mov	r0, sl
 800bfd6:	4659      	mov	r1, fp
 800bfd8:	f7f4 fb16 	bl	8000608 <__aeabi_dmul>
 800bfdc:	4b2d      	ldr	r3, [pc, #180]	; (800c094 <_dtoa_r+0x624>)
 800bfde:	4682      	mov	sl, r0
 800bfe0:	468b      	mov	fp, r1
 800bfe2:	4640      	mov	r0, r8
 800bfe4:	4649      	mov	r1, r9
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f7f4 fb0e 	bl	8000608 <__aeabi_dmul>
 800bfec:	4680      	mov	r8, r0
 800bfee:	4689      	mov	r9, r1
 800bff0:	e7c6      	b.n	800bf80 <_dtoa_r+0x510>
 800bff2:	4650      	mov	r0, sl
 800bff4:	4659      	mov	r1, fp
 800bff6:	f7f4 fb07 	bl	8000608 <__aeabi_dmul>
 800bffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bffc:	9d01      	ldr	r5, [sp, #4]
 800bffe:	930f      	str	r3, [sp, #60]	; 0x3c
 800c000:	4682      	mov	sl, r0
 800c002:	468b      	mov	fp, r1
 800c004:	4649      	mov	r1, r9
 800c006:	4640      	mov	r0, r8
 800c008:	f7f4 fdae 	bl	8000b68 <__aeabi_d2iz>
 800c00c:	4606      	mov	r6, r0
 800c00e:	f7f4 fa91 	bl	8000534 <__aeabi_i2d>
 800c012:	3630      	adds	r6, #48	; 0x30
 800c014:	4602      	mov	r2, r0
 800c016:	460b      	mov	r3, r1
 800c018:	4640      	mov	r0, r8
 800c01a:	4649      	mov	r1, r9
 800c01c:	f7f4 f93c 	bl	8000298 <__aeabi_dsub>
 800c020:	f805 6b01 	strb.w	r6, [r5], #1
 800c024:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c026:	429d      	cmp	r5, r3
 800c028:	4680      	mov	r8, r0
 800c02a:	4689      	mov	r9, r1
 800c02c:	f04f 0200 	mov.w	r2, #0
 800c030:	d124      	bne.n	800c07c <_dtoa_r+0x60c>
 800c032:	4b1b      	ldr	r3, [pc, #108]	; (800c0a0 <_dtoa_r+0x630>)
 800c034:	4650      	mov	r0, sl
 800c036:	4659      	mov	r1, fp
 800c038:	f7f4 f930 	bl	800029c <__adddf3>
 800c03c:	4602      	mov	r2, r0
 800c03e:	460b      	mov	r3, r1
 800c040:	4640      	mov	r0, r8
 800c042:	4649      	mov	r1, r9
 800c044:	f7f4 fd70 	bl	8000b28 <__aeabi_dcmpgt>
 800c048:	2800      	cmp	r0, #0
 800c04a:	d173      	bne.n	800c134 <_dtoa_r+0x6c4>
 800c04c:	4652      	mov	r2, sl
 800c04e:	465b      	mov	r3, fp
 800c050:	4913      	ldr	r1, [pc, #76]	; (800c0a0 <_dtoa_r+0x630>)
 800c052:	2000      	movs	r0, #0
 800c054:	f7f4 f920 	bl	8000298 <__aeabi_dsub>
 800c058:	4602      	mov	r2, r0
 800c05a:	460b      	mov	r3, r1
 800c05c:	4640      	mov	r0, r8
 800c05e:	4649      	mov	r1, r9
 800c060:	f7f4 fd44 	bl	8000aec <__aeabi_dcmplt>
 800c064:	2800      	cmp	r0, #0
 800c066:	f43f af35 	beq.w	800bed4 <_dtoa_r+0x464>
 800c06a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c06c:	1e6b      	subs	r3, r5, #1
 800c06e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c070:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c074:	2b30      	cmp	r3, #48	; 0x30
 800c076:	d0f8      	beq.n	800c06a <_dtoa_r+0x5fa>
 800c078:	9700      	str	r7, [sp, #0]
 800c07a:	e049      	b.n	800c110 <_dtoa_r+0x6a0>
 800c07c:	4b05      	ldr	r3, [pc, #20]	; (800c094 <_dtoa_r+0x624>)
 800c07e:	f7f4 fac3 	bl	8000608 <__aeabi_dmul>
 800c082:	4680      	mov	r8, r0
 800c084:	4689      	mov	r9, r1
 800c086:	e7bd      	b.n	800c004 <_dtoa_r+0x594>
 800c088:	0800e570 	.word	0x0800e570
 800c08c:	0800e548 	.word	0x0800e548
 800c090:	3ff00000 	.word	0x3ff00000
 800c094:	40240000 	.word	0x40240000
 800c098:	401c0000 	.word	0x401c0000
 800c09c:	40140000 	.word	0x40140000
 800c0a0:	3fe00000 	.word	0x3fe00000
 800c0a4:	9d01      	ldr	r5, [sp, #4]
 800c0a6:	4656      	mov	r6, sl
 800c0a8:	465f      	mov	r7, fp
 800c0aa:	4642      	mov	r2, r8
 800c0ac:	464b      	mov	r3, r9
 800c0ae:	4630      	mov	r0, r6
 800c0b0:	4639      	mov	r1, r7
 800c0b2:	f7f4 fbd3 	bl	800085c <__aeabi_ddiv>
 800c0b6:	f7f4 fd57 	bl	8000b68 <__aeabi_d2iz>
 800c0ba:	4682      	mov	sl, r0
 800c0bc:	f7f4 fa3a 	bl	8000534 <__aeabi_i2d>
 800c0c0:	4642      	mov	r2, r8
 800c0c2:	464b      	mov	r3, r9
 800c0c4:	f7f4 faa0 	bl	8000608 <__aeabi_dmul>
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	460b      	mov	r3, r1
 800c0cc:	4630      	mov	r0, r6
 800c0ce:	4639      	mov	r1, r7
 800c0d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c0d4:	f7f4 f8e0 	bl	8000298 <__aeabi_dsub>
 800c0d8:	f805 6b01 	strb.w	r6, [r5], #1
 800c0dc:	9e01      	ldr	r6, [sp, #4]
 800c0de:	9f03      	ldr	r7, [sp, #12]
 800c0e0:	1bae      	subs	r6, r5, r6
 800c0e2:	42b7      	cmp	r7, r6
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	460b      	mov	r3, r1
 800c0e8:	d135      	bne.n	800c156 <_dtoa_r+0x6e6>
 800c0ea:	f7f4 f8d7 	bl	800029c <__adddf3>
 800c0ee:	4642      	mov	r2, r8
 800c0f0:	464b      	mov	r3, r9
 800c0f2:	4606      	mov	r6, r0
 800c0f4:	460f      	mov	r7, r1
 800c0f6:	f7f4 fd17 	bl	8000b28 <__aeabi_dcmpgt>
 800c0fa:	b9d0      	cbnz	r0, 800c132 <_dtoa_r+0x6c2>
 800c0fc:	4642      	mov	r2, r8
 800c0fe:	464b      	mov	r3, r9
 800c100:	4630      	mov	r0, r6
 800c102:	4639      	mov	r1, r7
 800c104:	f7f4 fce8 	bl	8000ad8 <__aeabi_dcmpeq>
 800c108:	b110      	cbz	r0, 800c110 <_dtoa_r+0x6a0>
 800c10a:	f01a 0f01 	tst.w	sl, #1
 800c10e:	d110      	bne.n	800c132 <_dtoa_r+0x6c2>
 800c110:	4620      	mov	r0, r4
 800c112:	ee18 1a10 	vmov	r1, s16
 800c116:	f000 faf3 	bl	800c700 <_Bfree>
 800c11a:	2300      	movs	r3, #0
 800c11c:	9800      	ldr	r0, [sp, #0]
 800c11e:	702b      	strb	r3, [r5, #0]
 800c120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c122:	3001      	adds	r0, #1
 800c124:	6018      	str	r0, [r3, #0]
 800c126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f43f acf1 	beq.w	800bb10 <_dtoa_r+0xa0>
 800c12e:	601d      	str	r5, [r3, #0]
 800c130:	e4ee      	b.n	800bb10 <_dtoa_r+0xa0>
 800c132:	9f00      	ldr	r7, [sp, #0]
 800c134:	462b      	mov	r3, r5
 800c136:	461d      	mov	r5, r3
 800c138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c13c:	2a39      	cmp	r2, #57	; 0x39
 800c13e:	d106      	bne.n	800c14e <_dtoa_r+0x6de>
 800c140:	9a01      	ldr	r2, [sp, #4]
 800c142:	429a      	cmp	r2, r3
 800c144:	d1f7      	bne.n	800c136 <_dtoa_r+0x6c6>
 800c146:	9901      	ldr	r1, [sp, #4]
 800c148:	2230      	movs	r2, #48	; 0x30
 800c14a:	3701      	adds	r7, #1
 800c14c:	700a      	strb	r2, [r1, #0]
 800c14e:	781a      	ldrb	r2, [r3, #0]
 800c150:	3201      	adds	r2, #1
 800c152:	701a      	strb	r2, [r3, #0]
 800c154:	e790      	b.n	800c078 <_dtoa_r+0x608>
 800c156:	4ba6      	ldr	r3, [pc, #664]	; (800c3f0 <_dtoa_r+0x980>)
 800c158:	2200      	movs	r2, #0
 800c15a:	f7f4 fa55 	bl	8000608 <__aeabi_dmul>
 800c15e:	2200      	movs	r2, #0
 800c160:	2300      	movs	r3, #0
 800c162:	4606      	mov	r6, r0
 800c164:	460f      	mov	r7, r1
 800c166:	f7f4 fcb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800c16a:	2800      	cmp	r0, #0
 800c16c:	d09d      	beq.n	800c0aa <_dtoa_r+0x63a>
 800c16e:	e7cf      	b.n	800c110 <_dtoa_r+0x6a0>
 800c170:	9a08      	ldr	r2, [sp, #32]
 800c172:	2a00      	cmp	r2, #0
 800c174:	f000 80d7 	beq.w	800c326 <_dtoa_r+0x8b6>
 800c178:	9a06      	ldr	r2, [sp, #24]
 800c17a:	2a01      	cmp	r2, #1
 800c17c:	f300 80ba 	bgt.w	800c2f4 <_dtoa_r+0x884>
 800c180:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c182:	2a00      	cmp	r2, #0
 800c184:	f000 80b2 	beq.w	800c2ec <_dtoa_r+0x87c>
 800c188:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c18c:	9e07      	ldr	r6, [sp, #28]
 800c18e:	9d04      	ldr	r5, [sp, #16]
 800c190:	9a04      	ldr	r2, [sp, #16]
 800c192:	441a      	add	r2, r3
 800c194:	9204      	str	r2, [sp, #16]
 800c196:	9a05      	ldr	r2, [sp, #20]
 800c198:	2101      	movs	r1, #1
 800c19a:	441a      	add	r2, r3
 800c19c:	4620      	mov	r0, r4
 800c19e:	9205      	str	r2, [sp, #20]
 800c1a0:	f000 fb66 	bl	800c870 <__i2b>
 800c1a4:	4607      	mov	r7, r0
 800c1a6:	2d00      	cmp	r5, #0
 800c1a8:	dd0c      	ble.n	800c1c4 <_dtoa_r+0x754>
 800c1aa:	9b05      	ldr	r3, [sp, #20]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	dd09      	ble.n	800c1c4 <_dtoa_r+0x754>
 800c1b0:	42ab      	cmp	r3, r5
 800c1b2:	9a04      	ldr	r2, [sp, #16]
 800c1b4:	bfa8      	it	ge
 800c1b6:	462b      	movge	r3, r5
 800c1b8:	1ad2      	subs	r2, r2, r3
 800c1ba:	9204      	str	r2, [sp, #16]
 800c1bc:	9a05      	ldr	r2, [sp, #20]
 800c1be:	1aed      	subs	r5, r5, r3
 800c1c0:	1ad3      	subs	r3, r2, r3
 800c1c2:	9305      	str	r3, [sp, #20]
 800c1c4:	9b07      	ldr	r3, [sp, #28]
 800c1c6:	b31b      	cbz	r3, 800c210 <_dtoa_r+0x7a0>
 800c1c8:	9b08      	ldr	r3, [sp, #32]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	f000 80af 	beq.w	800c32e <_dtoa_r+0x8be>
 800c1d0:	2e00      	cmp	r6, #0
 800c1d2:	dd13      	ble.n	800c1fc <_dtoa_r+0x78c>
 800c1d4:	4639      	mov	r1, r7
 800c1d6:	4632      	mov	r2, r6
 800c1d8:	4620      	mov	r0, r4
 800c1da:	f000 fc09 	bl	800c9f0 <__pow5mult>
 800c1de:	ee18 2a10 	vmov	r2, s16
 800c1e2:	4601      	mov	r1, r0
 800c1e4:	4607      	mov	r7, r0
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f000 fb58 	bl	800c89c <__multiply>
 800c1ec:	ee18 1a10 	vmov	r1, s16
 800c1f0:	4680      	mov	r8, r0
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	f000 fa84 	bl	800c700 <_Bfree>
 800c1f8:	ee08 8a10 	vmov	s16, r8
 800c1fc:	9b07      	ldr	r3, [sp, #28]
 800c1fe:	1b9a      	subs	r2, r3, r6
 800c200:	d006      	beq.n	800c210 <_dtoa_r+0x7a0>
 800c202:	ee18 1a10 	vmov	r1, s16
 800c206:	4620      	mov	r0, r4
 800c208:	f000 fbf2 	bl	800c9f0 <__pow5mult>
 800c20c:	ee08 0a10 	vmov	s16, r0
 800c210:	2101      	movs	r1, #1
 800c212:	4620      	mov	r0, r4
 800c214:	f000 fb2c 	bl	800c870 <__i2b>
 800c218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	4606      	mov	r6, r0
 800c21e:	f340 8088 	ble.w	800c332 <_dtoa_r+0x8c2>
 800c222:	461a      	mov	r2, r3
 800c224:	4601      	mov	r1, r0
 800c226:	4620      	mov	r0, r4
 800c228:	f000 fbe2 	bl	800c9f0 <__pow5mult>
 800c22c:	9b06      	ldr	r3, [sp, #24]
 800c22e:	2b01      	cmp	r3, #1
 800c230:	4606      	mov	r6, r0
 800c232:	f340 8081 	ble.w	800c338 <_dtoa_r+0x8c8>
 800c236:	f04f 0800 	mov.w	r8, #0
 800c23a:	6933      	ldr	r3, [r6, #16]
 800c23c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c240:	6918      	ldr	r0, [r3, #16]
 800c242:	f000 fac5 	bl	800c7d0 <__hi0bits>
 800c246:	f1c0 0020 	rsb	r0, r0, #32
 800c24a:	9b05      	ldr	r3, [sp, #20]
 800c24c:	4418      	add	r0, r3
 800c24e:	f010 001f 	ands.w	r0, r0, #31
 800c252:	f000 8092 	beq.w	800c37a <_dtoa_r+0x90a>
 800c256:	f1c0 0320 	rsb	r3, r0, #32
 800c25a:	2b04      	cmp	r3, #4
 800c25c:	f340 808a 	ble.w	800c374 <_dtoa_r+0x904>
 800c260:	f1c0 001c 	rsb	r0, r0, #28
 800c264:	9b04      	ldr	r3, [sp, #16]
 800c266:	4403      	add	r3, r0
 800c268:	9304      	str	r3, [sp, #16]
 800c26a:	9b05      	ldr	r3, [sp, #20]
 800c26c:	4403      	add	r3, r0
 800c26e:	4405      	add	r5, r0
 800c270:	9305      	str	r3, [sp, #20]
 800c272:	9b04      	ldr	r3, [sp, #16]
 800c274:	2b00      	cmp	r3, #0
 800c276:	dd07      	ble.n	800c288 <_dtoa_r+0x818>
 800c278:	ee18 1a10 	vmov	r1, s16
 800c27c:	461a      	mov	r2, r3
 800c27e:	4620      	mov	r0, r4
 800c280:	f000 fc10 	bl	800caa4 <__lshift>
 800c284:	ee08 0a10 	vmov	s16, r0
 800c288:	9b05      	ldr	r3, [sp, #20]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	dd05      	ble.n	800c29a <_dtoa_r+0x82a>
 800c28e:	4631      	mov	r1, r6
 800c290:	461a      	mov	r2, r3
 800c292:	4620      	mov	r0, r4
 800c294:	f000 fc06 	bl	800caa4 <__lshift>
 800c298:	4606      	mov	r6, r0
 800c29a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d06e      	beq.n	800c37e <_dtoa_r+0x90e>
 800c2a0:	ee18 0a10 	vmov	r0, s16
 800c2a4:	4631      	mov	r1, r6
 800c2a6:	f000 fc6d 	bl	800cb84 <__mcmp>
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	da67      	bge.n	800c37e <_dtoa_r+0x90e>
 800c2ae:	9b00      	ldr	r3, [sp, #0]
 800c2b0:	3b01      	subs	r3, #1
 800c2b2:	ee18 1a10 	vmov	r1, s16
 800c2b6:	9300      	str	r3, [sp, #0]
 800c2b8:	220a      	movs	r2, #10
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	4620      	mov	r0, r4
 800c2be:	f000 fa41 	bl	800c744 <__multadd>
 800c2c2:	9b08      	ldr	r3, [sp, #32]
 800c2c4:	ee08 0a10 	vmov	s16, r0
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	f000 81b1 	beq.w	800c630 <_dtoa_r+0xbc0>
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	4639      	mov	r1, r7
 800c2d2:	220a      	movs	r2, #10
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	f000 fa35 	bl	800c744 <__multadd>
 800c2da:	9b02      	ldr	r3, [sp, #8]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	4607      	mov	r7, r0
 800c2e0:	f300 808e 	bgt.w	800c400 <_dtoa_r+0x990>
 800c2e4:	9b06      	ldr	r3, [sp, #24]
 800c2e6:	2b02      	cmp	r3, #2
 800c2e8:	dc51      	bgt.n	800c38e <_dtoa_r+0x91e>
 800c2ea:	e089      	b.n	800c400 <_dtoa_r+0x990>
 800c2ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c2ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c2f2:	e74b      	b.n	800c18c <_dtoa_r+0x71c>
 800c2f4:	9b03      	ldr	r3, [sp, #12]
 800c2f6:	1e5e      	subs	r6, r3, #1
 800c2f8:	9b07      	ldr	r3, [sp, #28]
 800c2fa:	42b3      	cmp	r3, r6
 800c2fc:	bfbf      	itttt	lt
 800c2fe:	9b07      	ldrlt	r3, [sp, #28]
 800c300:	9607      	strlt	r6, [sp, #28]
 800c302:	1af2      	sublt	r2, r6, r3
 800c304:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c306:	bfb6      	itet	lt
 800c308:	189b      	addlt	r3, r3, r2
 800c30a:	1b9e      	subge	r6, r3, r6
 800c30c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c30e:	9b03      	ldr	r3, [sp, #12]
 800c310:	bfb8      	it	lt
 800c312:	2600      	movlt	r6, #0
 800c314:	2b00      	cmp	r3, #0
 800c316:	bfb7      	itett	lt
 800c318:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c31c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c320:	1a9d      	sublt	r5, r3, r2
 800c322:	2300      	movlt	r3, #0
 800c324:	e734      	b.n	800c190 <_dtoa_r+0x720>
 800c326:	9e07      	ldr	r6, [sp, #28]
 800c328:	9d04      	ldr	r5, [sp, #16]
 800c32a:	9f08      	ldr	r7, [sp, #32]
 800c32c:	e73b      	b.n	800c1a6 <_dtoa_r+0x736>
 800c32e:	9a07      	ldr	r2, [sp, #28]
 800c330:	e767      	b.n	800c202 <_dtoa_r+0x792>
 800c332:	9b06      	ldr	r3, [sp, #24]
 800c334:	2b01      	cmp	r3, #1
 800c336:	dc18      	bgt.n	800c36a <_dtoa_r+0x8fa>
 800c338:	f1ba 0f00 	cmp.w	sl, #0
 800c33c:	d115      	bne.n	800c36a <_dtoa_r+0x8fa>
 800c33e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c342:	b993      	cbnz	r3, 800c36a <_dtoa_r+0x8fa>
 800c344:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c348:	0d1b      	lsrs	r3, r3, #20
 800c34a:	051b      	lsls	r3, r3, #20
 800c34c:	b183      	cbz	r3, 800c370 <_dtoa_r+0x900>
 800c34e:	9b04      	ldr	r3, [sp, #16]
 800c350:	3301      	adds	r3, #1
 800c352:	9304      	str	r3, [sp, #16]
 800c354:	9b05      	ldr	r3, [sp, #20]
 800c356:	3301      	adds	r3, #1
 800c358:	9305      	str	r3, [sp, #20]
 800c35a:	f04f 0801 	mov.w	r8, #1
 800c35e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c360:	2b00      	cmp	r3, #0
 800c362:	f47f af6a 	bne.w	800c23a <_dtoa_r+0x7ca>
 800c366:	2001      	movs	r0, #1
 800c368:	e76f      	b.n	800c24a <_dtoa_r+0x7da>
 800c36a:	f04f 0800 	mov.w	r8, #0
 800c36e:	e7f6      	b.n	800c35e <_dtoa_r+0x8ee>
 800c370:	4698      	mov	r8, r3
 800c372:	e7f4      	b.n	800c35e <_dtoa_r+0x8ee>
 800c374:	f43f af7d 	beq.w	800c272 <_dtoa_r+0x802>
 800c378:	4618      	mov	r0, r3
 800c37a:	301c      	adds	r0, #28
 800c37c:	e772      	b.n	800c264 <_dtoa_r+0x7f4>
 800c37e:	9b03      	ldr	r3, [sp, #12]
 800c380:	2b00      	cmp	r3, #0
 800c382:	dc37      	bgt.n	800c3f4 <_dtoa_r+0x984>
 800c384:	9b06      	ldr	r3, [sp, #24]
 800c386:	2b02      	cmp	r3, #2
 800c388:	dd34      	ble.n	800c3f4 <_dtoa_r+0x984>
 800c38a:	9b03      	ldr	r3, [sp, #12]
 800c38c:	9302      	str	r3, [sp, #8]
 800c38e:	9b02      	ldr	r3, [sp, #8]
 800c390:	b96b      	cbnz	r3, 800c3ae <_dtoa_r+0x93e>
 800c392:	4631      	mov	r1, r6
 800c394:	2205      	movs	r2, #5
 800c396:	4620      	mov	r0, r4
 800c398:	f000 f9d4 	bl	800c744 <__multadd>
 800c39c:	4601      	mov	r1, r0
 800c39e:	4606      	mov	r6, r0
 800c3a0:	ee18 0a10 	vmov	r0, s16
 800c3a4:	f000 fbee 	bl	800cb84 <__mcmp>
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	f73f adbb 	bgt.w	800bf24 <_dtoa_r+0x4b4>
 800c3ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3b0:	9d01      	ldr	r5, [sp, #4]
 800c3b2:	43db      	mvns	r3, r3
 800c3b4:	9300      	str	r3, [sp, #0]
 800c3b6:	f04f 0800 	mov.w	r8, #0
 800c3ba:	4631      	mov	r1, r6
 800c3bc:	4620      	mov	r0, r4
 800c3be:	f000 f99f 	bl	800c700 <_Bfree>
 800c3c2:	2f00      	cmp	r7, #0
 800c3c4:	f43f aea4 	beq.w	800c110 <_dtoa_r+0x6a0>
 800c3c8:	f1b8 0f00 	cmp.w	r8, #0
 800c3cc:	d005      	beq.n	800c3da <_dtoa_r+0x96a>
 800c3ce:	45b8      	cmp	r8, r7
 800c3d0:	d003      	beq.n	800c3da <_dtoa_r+0x96a>
 800c3d2:	4641      	mov	r1, r8
 800c3d4:	4620      	mov	r0, r4
 800c3d6:	f000 f993 	bl	800c700 <_Bfree>
 800c3da:	4639      	mov	r1, r7
 800c3dc:	4620      	mov	r0, r4
 800c3de:	f000 f98f 	bl	800c700 <_Bfree>
 800c3e2:	e695      	b.n	800c110 <_dtoa_r+0x6a0>
 800c3e4:	2600      	movs	r6, #0
 800c3e6:	4637      	mov	r7, r6
 800c3e8:	e7e1      	b.n	800c3ae <_dtoa_r+0x93e>
 800c3ea:	9700      	str	r7, [sp, #0]
 800c3ec:	4637      	mov	r7, r6
 800c3ee:	e599      	b.n	800bf24 <_dtoa_r+0x4b4>
 800c3f0:	40240000 	.word	0x40240000
 800c3f4:	9b08      	ldr	r3, [sp, #32]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	f000 80ca 	beq.w	800c590 <_dtoa_r+0xb20>
 800c3fc:	9b03      	ldr	r3, [sp, #12]
 800c3fe:	9302      	str	r3, [sp, #8]
 800c400:	2d00      	cmp	r5, #0
 800c402:	dd05      	ble.n	800c410 <_dtoa_r+0x9a0>
 800c404:	4639      	mov	r1, r7
 800c406:	462a      	mov	r2, r5
 800c408:	4620      	mov	r0, r4
 800c40a:	f000 fb4b 	bl	800caa4 <__lshift>
 800c40e:	4607      	mov	r7, r0
 800c410:	f1b8 0f00 	cmp.w	r8, #0
 800c414:	d05b      	beq.n	800c4ce <_dtoa_r+0xa5e>
 800c416:	6879      	ldr	r1, [r7, #4]
 800c418:	4620      	mov	r0, r4
 800c41a:	f000 f931 	bl	800c680 <_Balloc>
 800c41e:	4605      	mov	r5, r0
 800c420:	b928      	cbnz	r0, 800c42e <_dtoa_r+0x9be>
 800c422:	4b87      	ldr	r3, [pc, #540]	; (800c640 <_dtoa_r+0xbd0>)
 800c424:	4602      	mov	r2, r0
 800c426:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c42a:	f7ff bb3b 	b.w	800baa4 <_dtoa_r+0x34>
 800c42e:	693a      	ldr	r2, [r7, #16]
 800c430:	3202      	adds	r2, #2
 800c432:	0092      	lsls	r2, r2, #2
 800c434:	f107 010c 	add.w	r1, r7, #12
 800c438:	300c      	adds	r0, #12
 800c43a:	f000 f913 	bl	800c664 <memcpy>
 800c43e:	2201      	movs	r2, #1
 800c440:	4629      	mov	r1, r5
 800c442:	4620      	mov	r0, r4
 800c444:	f000 fb2e 	bl	800caa4 <__lshift>
 800c448:	9b01      	ldr	r3, [sp, #4]
 800c44a:	f103 0901 	add.w	r9, r3, #1
 800c44e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c452:	4413      	add	r3, r2
 800c454:	9305      	str	r3, [sp, #20]
 800c456:	f00a 0301 	and.w	r3, sl, #1
 800c45a:	46b8      	mov	r8, r7
 800c45c:	9304      	str	r3, [sp, #16]
 800c45e:	4607      	mov	r7, r0
 800c460:	4631      	mov	r1, r6
 800c462:	ee18 0a10 	vmov	r0, s16
 800c466:	f7ff fa77 	bl	800b958 <quorem>
 800c46a:	4641      	mov	r1, r8
 800c46c:	9002      	str	r0, [sp, #8]
 800c46e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c472:	ee18 0a10 	vmov	r0, s16
 800c476:	f000 fb85 	bl	800cb84 <__mcmp>
 800c47a:	463a      	mov	r2, r7
 800c47c:	9003      	str	r0, [sp, #12]
 800c47e:	4631      	mov	r1, r6
 800c480:	4620      	mov	r0, r4
 800c482:	f000 fb9b 	bl	800cbbc <__mdiff>
 800c486:	68c2      	ldr	r2, [r0, #12]
 800c488:	f109 3bff 	add.w	fp, r9, #4294967295
 800c48c:	4605      	mov	r5, r0
 800c48e:	bb02      	cbnz	r2, 800c4d2 <_dtoa_r+0xa62>
 800c490:	4601      	mov	r1, r0
 800c492:	ee18 0a10 	vmov	r0, s16
 800c496:	f000 fb75 	bl	800cb84 <__mcmp>
 800c49a:	4602      	mov	r2, r0
 800c49c:	4629      	mov	r1, r5
 800c49e:	4620      	mov	r0, r4
 800c4a0:	9207      	str	r2, [sp, #28]
 800c4a2:	f000 f92d 	bl	800c700 <_Bfree>
 800c4a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c4aa:	ea43 0102 	orr.w	r1, r3, r2
 800c4ae:	9b04      	ldr	r3, [sp, #16]
 800c4b0:	430b      	orrs	r3, r1
 800c4b2:	464d      	mov	r5, r9
 800c4b4:	d10f      	bne.n	800c4d6 <_dtoa_r+0xa66>
 800c4b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c4ba:	d02a      	beq.n	800c512 <_dtoa_r+0xaa2>
 800c4bc:	9b03      	ldr	r3, [sp, #12]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	dd02      	ble.n	800c4c8 <_dtoa_r+0xa58>
 800c4c2:	9b02      	ldr	r3, [sp, #8]
 800c4c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c4c8:	f88b a000 	strb.w	sl, [fp]
 800c4cc:	e775      	b.n	800c3ba <_dtoa_r+0x94a>
 800c4ce:	4638      	mov	r0, r7
 800c4d0:	e7ba      	b.n	800c448 <_dtoa_r+0x9d8>
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	e7e2      	b.n	800c49c <_dtoa_r+0xa2c>
 800c4d6:	9b03      	ldr	r3, [sp, #12]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	db04      	blt.n	800c4e6 <_dtoa_r+0xa76>
 800c4dc:	9906      	ldr	r1, [sp, #24]
 800c4de:	430b      	orrs	r3, r1
 800c4e0:	9904      	ldr	r1, [sp, #16]
 800c4e2:	430b      	orrs	r3, r1
 800c4e4:	d122      	bne.n	800c52c <_dtoa_r+0xabc>
 800c4e6:	2a00      	cmp	r2, #0
 800c4e8:	ddee      	ble.n	800c4c8 <_dtoa_r+0xa58>
 800c4ea:	ee18 1a10 	vmov	r1, s16
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	4620      	mov	r0, r4
 800c4f2:	f000 fad7 	bl	800caa4 <__lshift>
 800c4f6:	4631      	mov	r1, r6
 800c4f8:	ee08 0a10 	vmov	s16, r0
 800c4fc:	f000 fb42 	bl	800cb84 <__mcmp>
 800c500:	2800      	cmp	r0, #0
 800c502:	dc03      	bgt.n	800c50c <_dtoa_r+0xa9c>
 800c504:	d1e0      	bne.n	800c4c8 <_dtoa_r+0xa58>
 800c506:	f01a 0f01 	tst.w	sl, #1
 800c50a:	d0dd      	beq.n	800c4c8 <_dtoa_r+0xa58>
 800c50c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c510:	d1d7      	bne.n	800c4c2 <_dtoa_r+0xa52>
 800c512:	2339      	movs	r3, #57	; 0x39
 800c514:	f88b 3000 	strb.w	r3, [fp]
 800c518:	462b      	mov	r3, r5
 800c51a:	461d      	mov	r5, r3
 800c51c:	3b01      	subs	r3, #1
 800c51e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c522:	2a39      	cmp	r2, #57	; 0x39
 800c524:	d071      	beq.n	800c60a <_dtoa_r+0xb9a>
 800c526:	3201      	adds	r2, #1
 800c528:	701a      	strb	r2, [r3, #0]
 800c52a:	e746      	b.n	800c3ba <_dtoa_r+0x94a>
 800c52c:	2a00      	cmp	r2, #0
 800c52e:	dd07      	ble.n	800c540 <_dtoa_r+0xad0>
 800c530:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c534:	d0ed      	beq.n	800c512 <_dtoa_r+0xaa2>
 800c536:	f10a 0301 	add.w	r3, sl, #1
 800c53a:	f88b 3000 	strb.w	r3, [fp]
 800c53e:	e73c      	b.n	800c3ba <_dtoa_r+0x94a>
 800c540:	9b05      	ldr	r3, [sp, #20]
 800c542:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c546:	4599      	cmp	r9, r3
 800c548:	d047      	beq.n	800c5da <_dtoa_r+0xb6a>
 800c54a:	ee18 1a10 	vmov	r1, s16
 800c54e:	2300      	movs	r3, #0
 800c550:	220a      	movs	r2, #10
 800c552:	4620      	mov	r0, r4
 800c554:	f000 f8f6 	bl	800c744 <__multadd>
 800c558:	45b8      	cmp	r8, r7
 800c55a:	ee08 0a10 	vmov	s16, r0
 800c55e:	f04f 0300 	mov.w	r3, #0
 800c562:	f04f 020a 	mov.w	r2, #10
 800c566:	4641      	mov	r1, r8
 800c568:	4620      	mov	r0, r4
 800c56a:	d106      	bne.n	800c57a <_dtoa_r+0xb0a>
 800c56c:	f000 f8ea 	bl	800c744 <__multadd>
 800c570:	4680      	mov	r8, r0
 800c572:	4607      	mov	r7, r0
 800c574:	f109 0901 	add.w	r9, r9, #1
 800c578:	e772      	b.n	800c460 <_dtoa_r+0x9f0>
 800c57a:	f000 f8e3 	bl	800c744 <__multadd>
 800c57e:	4639      	mov	r1, r7
 800c580:	4680      	mov	r8, r0
 800c582:	2300      	movs	r3, #0
 800c584:	220a      	movs	r2, #10
 800c586:	4620      	mov	r0, r4
 800c588:	f000 f8dc 	bl	800c744 <__multadd>
 800c58c:	4607      	mov	r7, r0
 800c58e:	e7f1      	b.n	800c574 <_dtoa_r+0xb04>
 800c590:	9b03      	ldr	r3, [sp, #12]
 800c592:	9302      	str	r3, [sp, #8]
 800c594:	9d01      	ldr	r5, [sp, #4]
 800c596:	ee18 0a10 	vmov	r0, s16
 800c59a:	4631      	mov	r1, r6
 800c59c:	f7ff f9dc 	bl	800b958 <quorem>
 800c5a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c5a4:	9b01      	ldr	r3, [sp, #4]
 800c5a6:	f805 ab01 	strb.w	sl, [r5], #1
 800c5aa:	1aea      	subs	r2, r5, r3
 800c5ac:	9b02      	ldr	r3, [sp, #8]
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	dd09      	ble.n	800c5c6 <_dtoa_r+0xb56>
 800c5b2:	ee18 1a10 	vmov	r1, s16
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	220a      	movs	r2, #10
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f000 f8c2 	bl	800c744 <__multadd>
 800c5c0:	ee08 0a10 	vmov	s16, r0
 800c5c4:	e7e7      	b.n	800c596 <_dtoa_r+0xb26>
 800c5c6:	9b02      	ldr	r3, [sp, #8]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	bfc8      	it	gt
 800c5cc:	461d      	movgt	r5, r3
 800c5ce:	9b01      	ldr	r3, [sp, #4]
 800c5d0:	bfd8      	it	le
 800c5d2:	2501      	movle	r5, #1
 800c5d4:	441d      	add	r5, r3
 800c5d6:	f04f 0800 	mov.w	r8, #0
 800c5da:	ee18 1a10 	vmov	r1, s16
 800c5de:	2201      	movs	r2, #1
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	f000 fa5f 	bl	800caa4 <__lshift>
 800c5e6:	4631      	mov	r1, r6
 800c5e8:	ee08 0a10 	vmov	s16, r0
 800c5ec:	f000 faca 	bl	800cb84 <__mcmp>
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	dc91      	bgt.n	800c518 <_dtoa_r+0xaa8>
 800c5f4:	d102      	bne.n	800c5fc <_dtoa_r+0xb8c>
 800c5f6:	f01a 0f01 	tst.w	sl, #1
 800c5fa:	d18d      	bne.n	800c518 <_dtoa_r+0xaa8>
 800c5fc:	462b      	mov	r3, r5
 800c5fe:	461d      	mov	r5, r3
 800c600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c604:	2a30      	cmp	r2, #48	; 0x30
 800c606:	d0fa      	beq.n	800c5fe <_dtoa_r+0xb8e>
 800c608:	e6d7      	b.n	800c3ba <_dtoa_r+0x94a>
 800c60a:	9a01      	ldr	r2, [sp, #4]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d184      	bne.n	800c51a <_dtoa_r+0xaaa>
 800c610:	9b00      	ldr	r3, [sp, #0]
 800c612:	3301      	adds	r3, #1
 800c614:	9300      	str	r3, [sp, #0]
 800c616:	2331      	movs	r3, #49	; 0x31
 800c618:	7013      	strb	r3, [r2, #0]
 800c61a:	e6ce      	b.n	800c3ba <_dtoa_r+0x94a>
 800c61c:	4b09      	ldr	r3, [pc, #36]	; (800c644 <_dtoa_r+0xbd4>)
 800c61e:	f7ff ba95 	b.w	800bb4c <_dtoa_r+0xdc>
 800c622:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c624:	2b00      	cmp	r3, #0
 800c626:	f47f aa6e 	bne.w	800bb06 <_dtoa_r+0x96>
 800c62a:	4b07      	ldr	r3, [pc, #28]	; (800c648 <_dtoa_r+0xbd8>)
 800c62c:	f7ff ba8e 	b.w	800bb4c <_dtoa_r+0xdc>
 800c630:	9b02      	ldr	r3, [sp, #8]
 800c632:	2b00      	cmp	r3, #0
 800c634:	dcae      	bgt.n	800c594 <_dtoa_r+0xb24>
 800c636:	9b06      	ldr	r3, [sp, #24]
 800c638:	2b02      	cmp	r3, #2
 800c63a:	f73f aea8 	bgt.w	800c38e <_dtoa_r+0x91e>
 800c63e:	e7a9      	b.n	800c594 <_dtoa_r+0xb24>
 800c640:	0800e4db 	.word	0x0800e4db
 800c644:	0800e438 	.word	0x0800e438
 800c648:	0800e45c 	.word	0x0800e45c

0800c64c <_localeconv_r>:
 800c64c:	4800      	ldr	r0, [pc, #0]	; (800c650 <_localeconv_r+0x4>)
 800c64e:	4770      	bx	lr
 800c650:	20000264 	.word	0x20000264

0800c654 <malloc>:
 800c654:	4b02      	ldr	r3, [pc, #8]	; (800c660 <malloc+0xc>)
 800c656:	4601      	mov	r1, r0
 800c658:	6818      	ldr	r0, [r3, #0]
 800c65a:	f000 bc17 	b.w	800ce8c <_malloc_r>
 800c65e:	bf00      	nop
 800c660:	20000110 	.word	0x20000110

0800c664 <memcpy>:
 800c664:	440a      	add	r2, r1
 800c666:	4291      	cmp	r1, r2
 800c668:	f100 33ff 	add.w	r3, r0, #4294967295
 800c66c:	d100      	bne.n	800c670 <memcpy+0xc>
 800c66e:	4770      	bx	lr
 800c670:	b510      	push	{r4, lr}
 800c672:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c67a:	4291      	cmp	r1, r2
 800c67c:	d1f9      	bne.n	800c672 <memcpy+0xe>
 800c67e:	bd10      	pop	{r4, pc}

0800c680 <_Balloc>:
 800c680:	b570      	push	{r4, r5, r6, lr}
 800c682:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c684:	4604      	mov	r4, r0
 800c686:	460d      	mov	r5, r1
 800c688:	b976      	cbnz	r6, 800c6a8 <_Balloc+0x28>
 800c68a:	2010      	movs	r0, #16
 800c68c:	f7ff ffe2 	bl	800c654 <malloc>
 800c690:	4602      	mov	r2, r0
 800c692:	6260      	str	r0, [r4, #36]	; 0x24
 800c694:	b920      	cbnz	r0, 800c6a0 <_Balloc+0x20>
 800c696:	4b18      	ldr	r3, [pc, #96]	; (800c6f8 <_Balloc+0x78>)
 800c698:	4818      	ldr	r0, [pc, #96]	; (800c6fc <_Balloc+0x7c>)
 800c69a:	2166      	movs	r1, #102	; 0x66
 800c69c:	f000 fdd6 	bl	800d24c <__assert_func>
 800c6a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6a4:	6006      	str	r6, [r0, #0]
 800c6a6:	60c6      	str	r6, [r0, #12]
 800c6a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c6aa:	68f3      	ldr	r3, [r6, #12]
 800c6ac:	b183      	cbz	r3, 800c6d0 <_Balloc+0x50>
 800c6ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6b0:	68db      	ldr	r3, [r3, #12]
 800c6b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c6b6:	b9b8      	cbnz	r0, 800c6e8 <_Balloc+0x68>
 800c6b8:	2101      	movs	r1, #1
 800c6ba:	fa01 f605 	lsl.w	r6, r1, r5
 800c6be:	1d72      	adds	r2, r6, #5
 800c6c0:	0092      	lsls	r2, r2, #2
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	f000 fb60 	bl	800cd88 <_calloc_r>
 800c6c8:	b160      	cbz	r0, 800c6e4 <_Balloc+0x64>
 800c6ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c6ce:	e00e      	b.n	800c6ee <_Balloc+0x6e>
 800c6d0:	2221      	movs	r2, #33	; 0x21
 800c6d2:	2104      	movs	r1, #4
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	f000 fb57 	bl	800cd88 <_calloc_r>
 800c6da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6dc:	60f0      	str	r0, [r6, #12]
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d1e4      	bne.n	800c6ae <_Balloc+0x2e>
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	bd70      	pop	{r4, r5, r6, pc}
 800c6e8:	6802      	ldr	r2, [r0, #0]
 800c6ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c6f4:	e7f7      	b.n	800c6e6 <_Balloc+0x66>
 800c6f6:	bf00      	nop
 800c6f8:	0800e469 	.word	0x0800e469
 800c6fc:	0800e4ec 	.word	0x0800e4ec

0800c700 <_Bfree>:
 800c700:	b570      	push	{r4, r5, r6, lr}
 800c702:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c704:	4605      	mov	r5, r0
 800c706:	460c      	mov	r4, r1
 800c708:	b976      	cbnz	r6, 800c728 <_Bfree+0x28>
 800c70a:	2010      	movs	r0, #16
 800c70c:	f7ff ffa2 	bl	800c654 <malloc>
 800c710:	4602      	mov	r2, r0
 800c712:	6268      	str	r0, [r5, #36]	; 0x24
 800c714:	b920      	cbnz	r0, 800c720 <_Bfree+0x20>
 800c716:	4b09      	ldr	r3, [pc, #36]	; (800c73c <_Bfree+0x3c>)
 800c718:	4809      	ldr	r0, [pc, #36]	; (800c740 <_Bfree+0x40>)
 800c71a:	218a      	movs	r1, #138	; 0x8a
 800c71c:	f000 fd96 	bl	800d24c <__assert_func>
 800c720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c724:	6006      	str	r6, [r0, #0]
 800c726:	60c6      	str	r6, [r0, #12]
 800c728:	b13c      	cbz	r4, 800c73a <_Bfree+0x3a>
 800c72a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c72c:	6862      	ldr	r2, [r4, #4]
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c734:	6021      	str	r1, [r4, #0]
 800c736:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c73a:	bd70      	pop	{r4, r5, r6, pc}
 800c73c:	0800e469 	.word	0x0800e469
 800c740:	0800e4ec 	.word	0x0800e4ec

0800c744 <__multadd>:
 800c744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c748:	690d      	ldr	r5, [r1, #16]
 800c74a:	4607      	mov	r7, r0
 800c74c:	460c      	mov	r4, r1
 800c74e:	461e      	mov	r6, r3
 800c750:	f101 0c14 	add.w	ip, r1, #20
 800c754:	2000      	movs	r0, #0
 800c756:	f8dc 3000 	ldr.w	r3, [ip]
 800c75a:	b299      	uxth	r1, r3
 800c75c:	fb02 6101 	mla	r1, r2, r1, r6
 800c760:	0c1e      	lsrs	r6, r3, #16
 800c762:	0c0b      	lsrs	r3, r1, #16
 800c764:	fb02 3306 	mla	r3, r2, r6, r3
 800c768:	b289      	uxth	r1, r1
 800c76a:	3001      	adds	r0, #1
 800c76c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c770:	4285      	cmp	r5, r0
 800c772:	f84c 1b04 	str.w	r1, [ip], #4
 800c776:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c77a:	dcec      	bgt.n	800c756 <__multadd+0x12>
 800c77c:	b30e      	cbz	r6, 800c7c2 <__multadd+0x7e>
 800c77e:	68a3      	ldr	r3, [r4, #8]
 800c780:	42ab      	cmp	r3, r5
 800c782:	dc19      	bgt.n	800c7b8 <__multadd+0x74>
 800c784:	6861      	ldr	r1, [r4, #4]
 800c786:	4638      	mov	r0, r7
 800c788:	3101      	adds	r1, #1
 800c78a:	f7ff ff79 	bl	800c680 <_Balloc>
 800c78e:	4680      	mov	r8, r0
 800c790:	b928      	cbnz	r0, 800c79e <__multadd+0x5a>
 800c792:	4602      	mov	r2, r0
 800c794:	4b0c      	ldr	r3, [pc, #48]	; (800c7c8 <__multadd+0x84>)
 800c796:	480d      	ldr	r0, [pc, #52]	; (800c7cc <__multadd+0x88>)
 800c798:	21b5      	movs	r1, #181	; 0xb5
 800c79a:	f000 fd57 	bl	800d24c <__assert_func>
 800c79e:	6922      	ldr	r2, [r4, #16]
 800c7a0:	3202      	adds	r2, #2
 800c7a2:	f104 010c 	add.w	r1, r4, #12
 800c7a6:	0092      	lsls	r2, r2, #2
 800c7a8:	300c      	adds	r0, #12
 800c7aa:	f7ff ff5b 	bl	800c664 <memcpy>
 800c7ae:	4621      	mov	r1, r4
 800c7b0:	4638      	mov	r0, r7
 800c7b2:	f7ff ffa5 	bl	800c700 <_Bfree>
 800c7b6:	4644      	mov	r4, r8
 800c7b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c7bc:	3501      	adds	r5, #1
 800c7be:	615e      	str	r6, [r3, #20]
 800c7c0:	6125      	str	r5, [r4, #16]
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7c8:	0800e4db 	.word	0x0800e4db
 800c7cc:	0800e4ec 	.word	0x0800e4ec

0800c7d0 <__hi0bits>:
 800c7d0:	0c03      	lsrs	r3, r0, #16
 800c7d2:	041b      	lsls	r3, r3, #16
 800c7d4:	b9d3      	cbnz	r3, 800c80c <__hi0bits+0x3c>
 800c7d6:	0400      	lsls	r0, r0, #16
 800c7d8:	2310      	movs	r3, #16
 800c7da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c7de:	bf04      	itt	eq
 800c7e0:	0200      	lsleq	r0, r0, #8
 800c7e2:	3308      	addeq	r3, #8
 800c7e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c7e8:	bf04      	itt	eq
 800c7ea:	0100      	lsleq	r0, r0, #4
 800c7ec:	3304      	addeq	r3, #4
 800c7ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c7f2:	bf04      	itt	eq
 800c7f4:	0080      	lsleq	r0, r0, #2
 800c7f6:	3302      	addeq	r3, #2
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	db05      	blt.n	800c808 <__hi0bits+0x38>
 800c7fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c800:	f103 0301 	add.w	r3, r3, #1
 800c804:	bf08      	it	eq
 800c806:	2320      	moveq	r3, #32
 800c808:	4618      	mov	r0, r3
 800c80a:	4770      	bx	lr
 800c80c:	2300      	movs	r3, #0
 800c80e:	e7e4      	b.n	800c7da <__hi0bits+0xa>

0800c810 <__lo0bits>:
 800c810:	6803      	ldr	r3, [r0, #0]
 800c812:	f013 0207 	ands.w	r2, r3, #7
 800c816:	4601      	mov	r1, r0
 800c818:	d00b      	beq.n	800c832 <__lo0bits+0x22>
 800c81a:	07da      	lsls	r2, r3, #31
 800c81c:	d423      	bmi.n	800c866 <__lo0bits+0x56>
 800c81e:	0798      	lsls	r0, r3, #30
 800c820:	bf49      	itett	mi
 800c822:	085b      	lsrmi	r3, r3, #1
 800c824:	089b      	lsrpl	r3, r3, #2
 800c826:	2001      	movmi	r0, #1
 800c828:	600b      	strmi	r3, [r1, #0]
 800c82a:	bf5c      	itt	pl
 800c82c:	600b      	strpl	r3, [r1, #0]
 800c82e:	2002      	movpl	r0, #2
 800c830:	4770      	bx	lr
 800c832:	b298      	uxth	r0, r3
 800c834:	b9a8      	cbnz	r0, 800c862 <__lo0bits+0x52>
 800c836:	0c1b      	lsrs	r3, r3, #16
 800c838:	2010      	movs	r0, #16
 800c83a:	b2da      	uxtb	r2, r3
 800c83c:	b90a      	cbnz	r2, 800c842 <__lo0bits+0x32>
 800c83e:	3008      	adds	r0, #8
 800c840:	0a1b      	lsrs	r3, r3, #8
 800c842:	071a      	lsls	r2, r3, #28
 800c844:	bf04      	itt	eq
 800c846:	091b      	lsreq	r3, r3, #4
 800c848:	3004      	addeq	r0, #4
 800c84a:	079a      	lsls	r2, r3, #30
 800c84c:	bf04      	itt	eq
 800c84e:	089b      	lsreq	r3, r3, #2
 800c850:	3002      	addeq	r0, #2
 800c852:	07da      	lsls	r2, r3, #31
 800c854:	d403      	bmi.n	800c85e <__lo0bits+0x4e>
 800c856:	085b      	lsrs	r3, r3, #1
 800c858:	f100 0001 	add.w	r0, r0, #1
 800c85c:	d005      	beq.n	800c86a <__lo0bits+0x5a>
 800c85e:	600b      	str	r3, [r1, #0]
 800c860:	4770      	bx	lr
 800c862:	4610      	mov	r0, r2
 800c864:	e7e9      	b.n	800c83a <__lo0bits+0x2a>
 800c866:	2000      	movs	r0, #0
 800c868:	4770      	bx	lr
 800c86a:	2020      	movs	r0, #32
 800c86c:	4770      	bx	lr
	...

0800c870 <__i2b>:
 800c870:	b510      	push	{r4, lr}
 800c872:	460c      	mov	r4, r1
 800c874:	2101      	movs	r1, #1
 800c876:	f7ff ff03 	bl	800c680 <_Balloc>
 800c87a:	4602      	mov	r2, r0
 800c87c:	b928      	cbnz	r0, 800c88a <__i2b+0x1a>
 800c87e:	4b05      	ldr	r3, [pc, #20]	; (800c894 <__i2b+0x24>)
 800c880:	4805      	ldr	r0, [pc, #20]	; (800c898 <__i2b+0x28>)
 800c882:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c886:	f000 fce1 	bl	800d24c <__assert_func>
 800c88a:	2301      	movs	r3, #1
 800c88c:	6144      	str	r4, [r0, #20]
 800c88e:	6103      	str	r3, [r0, #16]
 800c890:	bd10      	pop	{r4, pc}
 800c892:	bf00      	nop
 800c894:	0800e4db 	.word	0x0800e4db
 800c898:	0800e4ec 	.word	0x0800e4ec

0800c89c <__multiply>:
 800c89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8a0:	4691      	mov	r9, r2
 800c8a2:	690a      	ldr	r2, [r1, #16]
 800c8a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	bfb8      	it	lt
 800c8ac:	460b      	movlt	r3, r1
 800c8ae:	460c      	mov	r4, r1
 800c8b0:	bfbc      	itt	lt
 800c8b2:	464c      	movlt	r4, r9
 800c8b4:	4699      	movlt	r9, r3
 800c8b6:	6927      	ldr	r7, [r4, #16]
 800c8b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c8bc:	68a3      	ldr	r3, [r4, #8]
 800c8be:	6861      	ldr	r1, [r4, #4]
 800c8c0:	eb07 060a 	add.w	r6, r7, sl
 800c8c4:	42b3      	cmp	r3, r6
 800c8c6:	b085      	sub	sp, #20
 800c8c8:	bfb8      	it	lt
 800c8ca:	3101      	addlt	r1, #1
 800c8cc:	f7ff fed8 	bl	800c680 <_Balloc>
 800c8d0:	b930      	cbnz	r0, 800c8e0 <__multiply+0x44>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	4b44      	ldr	r3, [pc, #272]	; (800c9e8 <__multiply+0x14c>)
 800c8d6:	4845      	ldr	r0, [pc, #276]	; (800c9ec <__multiply+0x150>)
 800c8d8:	f240 115d 	movw	r1, #349	; 0x15d
 800c8dc:	f000 fcb6 	bl	800d24c <__assert_func>
 800c8e0:	f100 0514 	add.w	r5, r0, #20
 800c8e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c8e8:	462b      	mov	r3, r5
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	4543      	cmp	r3, r8
 800c8ee:	d321      	bcc.n	800c934 <__multiply+0x98>
 800c8f0:	f104 0314 	add.w	r3, r4, #20
 800c8f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c8f8:	f109 0314 	add.w	r3, r9, #20
 800c8fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c900:	9202      	str	r2, [sp, #8]
 800c902:	1b3a      	subs	r2, r7, r4
 800c904:	3a15      	subs	r2, #21
 800c906:	f022 0203 	bic.w	r2, r2, #3
 800c90a:	3204      	adds	r2, #4
 800c90c:	f104 0115 	add.w	r1, r4, #21
 800c910:	428f      	cmp	r7, r1
 800c912:	bf38      	it	cc
 800c914:	2204      	movcc	r2, #4
 800c916:	9201      	str	r2, [sp, #4]
 800c918:	9a02      	ldr	r2, [sp, #8]
 800c91a:	9303      	str	r3, [sp, #12]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d80c      	bhi.n	800c93a <__multiply+0x9e>
 800c920:	2e00      	cmp	r6, #0
 800c922:	dd03      	ble.n	800c92c <__multiply+0x90>
 800c924:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d05a      	beq.n	800c9e2 <__multiply+0x146>
 800c92c:	6106      	str	r6, [r0, #16]
 800c92e:	b005      	add	sp, #20
 800c930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c934:	f843 2b04 	str.w	r2, [r3], #4
 800c938:	e7d8      	b.n	800c8ec <__multiply+0x50>
 800c93a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c93e:	f1ba 0f00 	cmp.w	sl, #0
 800c942:	d024      	beq.n	800c98e <__multiply+0xf2>
 800c944:	f104 0e14 	add.w	lr, r4, #20
 800c948:	46a9      	mov	r9, r5
 800c94a:	f04f 0c00 	mov.w	ip, #0
 800c94e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c952:	f8d9 1000 	ldr.w	r1, [r9]
 800c956:	fa1f fb82 	uxth.w	fp, r2
 800c95a:	b289      	uxth	r1, r1
 800c95c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c960:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c964:	f8d9 2000 	ldr.w	r2, [r9]
 800c968:	4461      	add	r1, ip
 800c96a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c96e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c972:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c976:	b289      	uxth	r1, r1
 800c978:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c97c:	4577      	cmp	r7, lr
 800c97e:	f849 1b04 	str.w	r1, [r9], #4
 800c982:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c986:	d8e2      	bhi.n	800c94e <__multiply+0xb2>
 800c988:	9a01      	ldr	r2, [sp, #4]
 800c98a:	f845 c002 	str.w	ip, [r5, r2]
 800c98e:	9a03      	ldr	r2, [sp, #12]
 800c990:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c994:	3304      	adds	r3, #4
 800c996:	f1b9 0f00 	cmp.w	r9, #0
 800c99a:	d020      	beq.n	800c9de <__multiply+0x142>
 800c99c:	6829      	ldr	r1, [r5, #0]
 800c99e:	f104 0c14 	add.w	ip, r4, #20
 800c9a2:	46ae      	mov	lr, r5
 800c9a4:	f04f 0a00 	mov.w	sl, #0
 800c9a8:	f8bc b000 	ldrh.w	fp, [ip]
 800c9ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c9b0:	fb09 220b 	mla	r2, r9, fp, r2
 800c9b4:	4492      	add	sl, r2
 800c9b6:	b289      	uxth	r1, r1
 800c9b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c9bc:	f84e 1b04 	str.w	r1, [lr], #4
 800c9c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c9c4:	f8be 1000 	ldrh.w	r1, [lr]
 800c9c8:	0c12      	lsrs	r2, r2, #16
 800c9ca:	fb09 1102 	mla	r1, r9, r2, r1
 800c9ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c9d2:	4567      	cmp	r7, ip
 800c9d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c9d8:	d8e6      	bhi.n	800c9a8 <__multiply+0x10c>
 800c9da:	9a01      	ldr	r2, [sp, #4]
 800c9dc:	50a9      	str	r1, [r5, r2]
 800c9de:	3504      	adds	r5, #4
 800c9e0:	e79a      	b.n	800c918 <__multiply+0x7c>
 800c9e2:	3e01      	subs	r6, #1
 800c9e4:	e79c      	b.n	800c920 <__multiply+0x84>
 800c9e6:	bf00      	nop
 800c9e8:	0800e4db 	.word	0x0800e4db
 800c9ec:	0800e4ec 	.word	0x0800e4ec

0800c9f0 <__pow5mult>:
 800c9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9f4:	4615      	mov	r5, r2
 800c9f6:	f012 0203 	ands.w	r2, r2, #3
 800c9fa:	4606      	mov	r6, r0
 800c9fc:	460f      	mov	r7, r1
 800c9fe:	d007      	beq.n	800ca10 <__pow5mult+0x20>
 800ca00:	4c25      	ldr	r4, [pc, #148]	; (800ca98 <__pow5mult+0xa8>)
 800ca02:	3a01      	subs	r2, #1
 800ca04:	2300      	movs	r3, #0
 800ca06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca0a:	f7ff fe9b 	bl	800c744 <__multadd>
 800ca0e:	4607      	mov	r7, r0
 800ca10:	10ad      	asrs	r5, r5, #2
 800ca12:	d03d      	beq.n	800ca90 <__pow5mult+0xa0>
 800ca14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ca16:	b97c      	cbnz	r4, 800ca38 <__pow5mult+0x48>
 800ca18:	2010      	movs	r0, #16
 800ca1a:	f7ff fe1b 	bl	800c654 <malloc>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	6270      	str	r0, [r6, #36]	; 0x24
 800ca22:	b928      	cbnz	r0, 800ca30 <__pow5mult+0x40>
 800ca24:	4b1d      	ldr	r3, [pc, #116]	; (800ca9c <__pow5mult+0xac>)
 800ca26:	481e      	ldr	r0, [pc, #120]	; (800caa0 <__pow5mult+0xb0>)
 800ca28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ca2c:	f000 fc0e 	bl	800d24c <__assert_func>
 800ca30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ca34:	6004      	str	r4, [r0, #0]
 800ca36:	60c4      	str	r4, [r0, #12]
 800ca38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ca3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ca40:	b94c      	cbnz	r4, 800ca56 <__pow5mult+0x66>
 800ca42:	f240 2171 	movw	r1, #625	; 0x271
 800ca46:	4630      	mov	r0, r6
 800ca48:	f7ff ff12 	bl	800c870 <__i2b>
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ca52:	4604      	mov	r4, r0
 800ca54:	6003      	str	r3, [r0, #0]
 800ca56:	f04f 0900 	mov.w	r9, #0
 800ca5a:	07eb      	lsls	r3, r5, #31
 800ca5c:	d50a      	bpl.n	800ca74 <__pow5mult+0x84>
 800ca5e:	4639      	mov	r1, r7
 800ca60:	4622      	mov	r2, r4
 800ca62:	4630      	mov	r0, r6
 800ca64:	f7ff ff1a 	bl	800c89c <__multiply>
 800ca68:	4639      	mov	r1, r7
 800ca6a:	4680      	mov	r8, r0
 800ca6c:	4630      	mov	r0, r6
 800ca6e:	f7ff fe47 	bl	800c700 <_Bfree>
 800ca72:	4647      	mov	r7, r8
 800ca74:	106d      	asrs	r5, r5, #1
 800ca76:	d00b      	beq.n	800ca90 <__pow5mult+0xa0>
 800ca78:	6820      	ldr	r0, [r4, #0]
 800ca7a:	b938      	cbnz	r0, 800ca8c <__pow5mult+0x9c>
 800ca7c:	4622      	mov	r2, r4
 800ca7e:	4621      	mov	r1, r4
 800ca80:	4630      	mov	r0, r6
 800ca82:	f7ff ff0b 	bl	800c89c <__multiply>
 800ca86:	6020      	str	r0, [r4, #0]
 800ca88:	f8c0 9000 	str.w	r9, [r0]
 800ca8c:	4604      	mov	r4, r0
 800ca8e:	e7e4      	b.n	800ca5a <__pow5mult+0x6a>
 800ca90:	4638      	mov	r0, r7
 800ca92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca96:	bf00      	nop
 800ca98:	0800e638 	.word	0x0800e638
 800ca9c:	0800e469 	.word	0x0800e469
 800caa0:	0800e4ec 	.word	0x0800e4ec

0800caa4 <__lshift>:
 800caa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caa8:	460c      	mov	r4, r1
 800caaa:	6849      	ldr	r1, [r1, #4]
 800caac:	6923      	ldr	r3, [r4, #16]
 800caae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cab2:	68a3      	ldr	r3, [r4, #8]
 800cab4:	4607      	mov	r7, r0
 800cab6:	4691      	mov	r9, r2
 800cab8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cabc:	f108 0601 	add.w	r6, r8, #1
 800cac0:	42b3      	cmp	r3, r6
 800cac2:	db0b      	blt.n	800cadc <__lshift+0x38>
 800cac4:	4638      	mov	r0, r7
 800cac6:	f7ff fddb 	bl	800c680 <_Balloc>
 800caca:	4605      	mov	r5, r0
 800cacc:	b948      	cbnz	r0, 800cae2 <__lshift+0x3e>
 800cace:	4602      	mov	r2, r0
 800cad0:	4b2a      	ldr	r3, [pc, #168]	; (800cb7c <__lshift+0xd8>)
 800cad2:	482b      	ldr	r0, [pc, #172]	; (800cb80 <__lshift+0xdc>)
 800cad4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cad8:	f000 fbb8 	bl	800d24c <__assert_func>
 800cadc:	3101      	adds	r1, #1
 800cade:	005b      	lsls	r3, r3, #1
 800cae0:	e7ee      	b.n	800cac0 <__lshift+0x1c>
 800cae2:	2300      	movs	r3, #0
 800cae4:	f100 0114 	add.w	r1, r0, #20
 800cae8:	f100 0210 	add.w	r2, r0, #16
 800caec:	4618      	mov	r0, r3
 800caee:	4553      	cmp	r3, sl
 800caf0:	db37      	blt.n	800cb62 <__lshift+0xbe>
 800caf2:	6920      	ldr	r0, [r4, #16]
 800caf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800caf8:	f104 0314 	add.w	r3, r4, #20
 800cafc:	f019 091f 	ands.w	r9, r9, #31
 800cb00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cb04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cb08:	d02f      	beq.n	800cb6a <__lshift+0xc6>
 800cb0a:	f1c9 0e20 	rsb	lr, r9, #32
 800cb0e:	468a      	mov	sl, r1
 800cb10:	f04f 0c00 	mov.w	ip, #0
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	fa02 f209 	lsl.w	r2, r2, r9
 800cb1a:	ea42 020c 	orr.w	r2, r2, ip
 800cb1e:	f84a 2b04 	str.w	r2, [sl], #4
 800cb22:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb26:	4298      	cmp	r0, r3
 800cb28:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cb2c:	d8f2      	bhi.n	800cb14 <__lshift+0x70>
 800cb2e:	1b03      	subs	r3, r0, r4
 800cb30:	3b15      	subs	r3, #21
 800cb32:	f023 0303 	bic.w	r3, r3, #3
 800cb36:	3304      	adds	r3, #4
 800cb38:	f104 0215 	add.w	r2, r4, #21
 800cb3c:	4290      	cmp	r0, r2
 800cb3e:	bf38      	it	cc
 800cb40:	2304      	movcc	r3, #4
 800cb42:	f841 c003 	str.w	ip, [r1, r3]
 800cb46:	f1bc 0f00 	cmp.w	ip, #0
 800cb4a:	d001      	beq.n	800cb50 <__lshift+0xac>
 800cb4c:	f108 0602 	add.w	r6, r8, #2
 800cb50:	3e01      	subs	r6, #1
 800cb52:	4638      	mov	r0, r7
 800cb54:	612e      	str	r6, [r5, #16]
 800cb56:	4621      	mov	r1, r4
 800cb58:	f7ff fdd2 	bl	800c700 <_Bfree>
 800cb5c:	4628      	mov	r0, r5
 800cb5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb62:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb66:	3301      	adds	r3, #1
 800cb68:	e7c1      	b.n	800caee <__lshift+0x4a>
 800cb6a:	3904      	subs	r1, #4
 800cb6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb70:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb74:	4298      	cmp	r0, r3
 800cb76:	d8f9      	bhi.n	800cb6c <__lshift+0xc8>
 800cb78:	e7ea      	b.n	800cb50 <__lshift+0xac>
 800cb7a:	bf00      	nop
 800cb7c:	0800e4db 	.word	0x0800e4db
 800cb80:	0800e4ec 	.word	0x0800e4ec

0800cb84 <__mcmp>:
 800cb84:	b530      	push	{r4, r5, lr}
 800cb86:	6902      	ldr	r2, [r0, #16]
 800cb88:	690c      	ldr	r4, [r1, #16]
 800cb8a:	1b12      	subs	r2, r2, r4
 800cb8c:	d10e      	bne.n	800cbac <__mcmp+0x28>
 800cb8e:	f100 0314 	add.w	r3, r0, #20
 800cb92:	3114      	adds	r1, #20
 800cb94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cb98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cb9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cba0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cba4:	42a5      	cmp	r5, r4
 800cba6:	d003      	beq.n	800cbb0 <__mcmp+0x2c>
 800cba8:	d305      	bcc.n	800cbb6 <__mcmp+0x32>
 800cbaa:	2201      	movs	r2, #1
 800cbac:	4610      	mov	r0, r2
 800cbae:	bd30      	pop	{r4, r5, pc}
 800cbb0:	4283      	cmp	r3, r0
 800cbb2:	d3f3      	bcc.n	800cb9c <__mcmp+0x18>
 800cbb4:	e7fa      	b.n	800cbac <__mcmp+0x28>
 800cbb6:	f04f 32ff 	mov.w	r2, #4294967295
 800cbba:	e7f7      	b.n	800cbac <__mcmp+0x28>

0800cbbc <__mdiff>:
 800cbbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc0:	460c      	mov	r4, r1
 800cbc2:	4606      	mov	r6, r0
 800cbc4:	4611      	mov	r1, r2
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	4690      	mov	r8, r2
 800cbca:	f7ff ffdb 	bl	800cb84 <__mcmp>
 800cbce:	1e05      	subs	r5, r0, #0
 800cbd0:	d110      	bne.n	800cbf4 <__mdiff+0x38>
 800cbd2:	4629      	mov	r1, r5
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	f7ff fd53 	bl	800c680 <_Balloc>
 800cbda:	b930      	cbnz	r0, 800cbea <__mdiff+0x2e>
 800cbdc:	4b3a      	ldr	r3, [pc, #232]	; (800ccc8 <__mdiff+0x10c>)
 800cbde:	4602      	mov	r2, r0
 800cbe0:	f240 2132 	movw	r1, #562	; 0x232
 800cbe4:	4839      	ldr	r0, [pc, #228]	; (800cccc <__mdiff+0x110>)
 800cbe6:	f000 fb31 	bl	800d24c <__assert_func>
 800cbea:	2301      	movs	r3, #1
 800cbec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cbf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbf4:	bfa4      	itt	ge
 800cbf6:	4643      	movge	r3, r8
 800cbf8:	46a0      	movge	r8, r4
 800cbfa:	4630      	mov	r0, r6
 800cbfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cc00:	bfa6      	itte	ge
 800cc02:	461c      	movge	r4, r3
 800cc04:	2500      	movge	r5, #0
 800cc06:	2501      	movlt	r5, #1
 800cc08:	f7ff fd3a 	bl	800c680 <_Balloc>
 800cc0c:	b920      	cbnz	r0, 800cc18 <__mdiff+0x5c>
 800cc0e:	4b2e      	ldr	r3, [pc, #184]	; (800ccc8 <__mdiff+0x10c>)
 800cc10:	4602      	mov	r2, r0
 800cc12:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cc16:	e7e5      	b.n	800cbe4 <__mdiff+0x28>
 800cc18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cc1c:	6926      	ldr	r6, [r4, #16]
 800cc1e:	60c5      	str	r5, [r0, #12]
 800cc20:	f104 0914 	add.w	r9, r4, #20
 800cc24:	f108 0514 	add.w	r5, r8, #20
 800cc28:	f100 0e14 	add.w	lr, r0, #20
 800cc2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cc30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cc34:	f108 0210 	add.w	r2, r8, #16
 800cc38:	46f2      	mov	sl, lr
 800cc3a:	2100      	movs	r1, #0
 800cc3c:	f859 3b04 	ldr.w	r3, [r9], #4
 800cc40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cc44:	fa1f f883 	uxth.w	r8, r3
 800cc48:	fa11 f18b 	uxtah	r1, r1, fp
 800cc4c:	0c1b      	lsrs	r3, r3, #16
 800cc4e:	eba1 0808 	sub.w	r8, r1, r8
 800cc52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cc56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cc5a:	fa1f f888 	uxth.w	r8, r8
 800cc5e:	1419      	asrs	r1, r3, #16
 800cc60:	454e      	cmp	r6, r9
 800cc62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cc66:	f84a 3b04 	str.w	r3, [sl], #4
 800cc6a:	d8e7      	bhi.n	800cc3c <__mdiff+0x80>
 800cc6c:	1b33      	subs	r3, r6, r4
 800cc6e:	3b15      	subs	r3, #21
 800cc70:	f023 0303 	bic.w	r3, r3, #3
 800cc74:	3304      	adds	r3, #4
 800cc76:	3415      	adds	r4, #21
 800cc78:	42a6      	cmp	r6, r4
 800cc7a:	bf38      	it	cc
 800cc7c:	2304      	movcc	r3, #4
 800cc7e:	441d      	add	r5, r3
 800cc80:	4473      	add	r3, lr
 800cc82:	469e      	mov	lr, r3
 800cc84:	462e      	mov	r6, r5
 800cc86:	4566      	cmp	r6, ip
 800cc88:	d30e      	bcc.n	800cca8 <__mdiff+0xec>
 800cc8a:	f10c 0203 	add.w	r2, ip, #3
 800cc8e:	1b52      	subs	r2, r2, r5
 800cc90:	f022 0203 	bic.w	r2, r2, #3
 800cc94:	3d03      	subs	r5, #3
 800cc96:	45ac      	cmp	ip, r5
 800cc98:	bf38      	it	cc
 800cc9a:	2200      	movcc	r2, #0
 800cc9c:	441a      	add	r2, r3
 800cc9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cca2:	b17b      	cbz	r3, 800ccc4 <__mdiff+0x108>
 800cca4:	6107      	str	r7, [r0, #16]
 800cca6:	e7a3      	b.n	800cbf0 <__mdiff+0x34>
 800cca8:	f856 8b04 	ldr.w	r8, [r6], #4
 800ccac:	fa11 f288 	uxtah	r2, r1, r8
 800ccb0:	1414      	asrs	r4, r2, #16
 800ccb2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ccb6:	b292      	uxth	r2, r2
 800ccb8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ccbc:	f84e 2b04 	str.w	r2, [lr], #4
 800ccc0:	1421      	asrs	r1, r4, #16
 800ccc2:	e7e0      	b.n	800cc86 <__mdiff+0xca>
 800ccc4:	3f01      	subs	r7, #1
 800ccc6:	e7ea      	b.n	800cc9e <__mdiff+0xe2>
 800ccc8:	0800e4db 	.word	0x0800e4db
 800cccc:	0800e4ec 	.word	0x0800e4ec

0800ccd0 <__d2b>:
 800ccd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ccd4:	4689      	mov	r9, r1
 800ccd6:	2101      	movs	r1, #1
 800ccd8:	ec57 6b10 	vmov	r6, r7, d0
 800ccdc:	4690      	mov	r8, r2
 800ccde:	f7ff fccf 	bl	800c680 <_Balloc>
 800cce2:	4604      	mov	r4, r0
 800cce4:	b930      	cbnz	r0, 800ccf4 <__d2b+0x24>
 800cce6:	4602      	mov	r2, r0
 800cce8:	4b25      	ldr	r3, [pc, #148]	; (800cd80 <__d2b+0xb0>)
 800ccea:	4826      	ldr	r0, [pc, #152]	; (800cd84 <__d2b+0xb4>)
 800ccec:	f240 310a 	movw	r1, #778	; 0x30a
 800ccf0:	f000 faac 	bl	800d24c <__assert_func>
 800ccf4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ccf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ccfc:	bb35      	cbnz	r5, 800cd4c <__d2b+0x7c>
 800ccfe:	2e00      	cmp	r6, #0
 800cd00:	9301      	str	r3, [sp, #4]
 800cd02:	d028      	beq.n	800cd56 <__d2b+0x86>
 800cd04:	4668      	mov	r0, sp
 800cd06:	9600      	str	r6, [sp, #0]
 800cd08:	f7ff fd82 	bl	800c810 <__lo0bits>
 800cd0c:	9900      	ldr	r1, [sp, #0]
 800cd0e:	b300      	cbz	r0, 800cd52 <__d2b+0x82>
 800cd10:	9a01      	ldr	r2, [sp, #4]
 800cd12:	f1c0 0320 	rsb	r3, r0, #32
 800cd16:	fa02 f303 	lsl.w	r3, r2, r3
 800cd1a:	430b      	orrs	r3, r1
 800cd1c:	40c2      	lsrs	r2, r0
 800cd1e:	6163      	str	r3, [r4, #20]
 800cd20:	9201      	str	r2, [sp, #4]
 800cd22:	9b01      	ldr	r3, [sp, #4]
 800cd24:	61a3      	str	r3, [r4, #24]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	bf14      	ite	ne
 800cd2a:	2202      	movne	r2, #2
 800cd2c:	2201      	moveq	r2, #1
 800cd2e:	6122      	str	r2, [r4, #16]
 800cd30:	b1d5      	cbz	r5, 800cd68 <__d2b+0x98>
 800cd32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cd36:	4405      	add	r5, r0
 800cd38:	f8c9 5000 	str.w	r5, [r9]
 800cd3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cd40:	f8c8 0000 	str.w	r0, [r8]
 800cd44:	4620      	mov	r0, r4
 800cd46:	b003      	add	sp, #12
 800cd48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd50:	e7d5      	b.n	800ccfe <__d2b+0x2e>
 800cd52:	6161      	str	r1, [r4, #20]
 800cd54:	e7e5      	b.n	800cd22 <__d2b+0x52>
 800cd56:	a801      	add	r0, sp, #4
 800cd58:	f7ff fd5a 	bl	800c810 <__lo0bits>
 800cd5c:	9b01      	ldr	r3, [sp, #4]
 800cd5e:	6163      	str	r3, [r4, #20]
 800cd60:	2201      	movs	r2, #1
 800cd62:	6122      	str	r2, [r4, #16]
 800cd64:	3020      	adds	r0, #32
 800cd66:	e7e3      	b.n	800cd30 <__d2b+0x60>
 800cd68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cd70:	f8c9 0000 	str.w	r0, [r9]
 800cd74:	6918      	ldr	r0, [r3, #16]
 800cd76:	f7ff fd2b 	bl	800c7d0 <__hi0bits>
 800cd7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd7e:	e7df      	b.n	800cd40 <__d2b+0x70>
 800cd80:	0800e4db 	.word	0x0800e4db
 800cd84:	0800e4ec 	.word	0x0800e4ec

0800cd88 <_calloc_r>:
 800cd88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd8a:	fba1 2402 	umull	r2, r4, r1, r2
 800cd8e:	b94c      	cbnz	r4, 800cda4 <_calloc_r+0x1c>
 800cd90:	4611      	mov	r1, r2
 800cd92:	9201      	str	r2, [sp, #4]
 800cd94:	f000 f87a 	bl	800ce8c <_malloc_r>
 800cd98:	9a01      	ldr	r2, [sp, #4]
 800cd9a:	4605      	mov	r5, r0
 800cd9c:	b930      	cbnz	r0, 800cdac <_calloc_r+0x24>
 800cd9e:	4628      	mov	r0, r5
 800cda0:	b003      	add	sp, #12
 800cda2:	bd30      	pop	{r4, r5, pc}
 800cda4:	220c      	movs	r2, #12
 800cda6:	6002      	str	r2, [r0, #0]
 800cda8:	2500      	movs	r5, #0
 800cdaa:	e7f8      	b.n	800cd9e <_calloc_r+0x16>
 800cdac:	4621      	mov	r1, r4
 800cdae:	f7fe f941 	bl	800b034 <memset>
 800cdb2:	e7f4      	b.n	800cd9e <_calloc_r+0x16>

0800cdb4 <_free_r>:
 800cdb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdb6:	2900      	cmp	r1, #0
 800cdb8:	d044      	beq.n	800ce44 <_free_r+0x90>
 800cdba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdbe:	9001      	str	r0, [sp, #4]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	f1a1 0404 	sub.w	r4, r1, #4
 800cdc6:	bfb8      	it	lt
 800cdc8:	18e4      	addlt	r4, r4, r3
 800cdca:	f000 fa9b 	bl	800d304 <__malloc_lock>
 800cdce:	4a1e      	ldr	r2, [pc, #120]	; (800ce48 <_free_r+0x94>)
 800cdd0:	9801      	ldr	r0, [sp, #4]
 800cdd2:	6813      	ldr	r3, [r2, #0]
 800cdd4:	b933      	cbnz	r3, 800cde4 <_free_r+0x30>
 800cdd6:	6063      	str	r3, [r4, #4]
 800cdd8:	6014      	str	r4, [r2, #0]
 800cdda:	b003      	add	sp, #12
 800cddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cde0:	f000 ba96 	b.w	800d310 <__malloc_unlock>
 800cde4:	42a3      	cmp	r3, r4
 800cde6:	d908      	bls.n	800cdfa <_free_r+0x46>
 800cde8:	6825      	ldr	r5, [r4, #0]
 800cdea:	1961      	adds	r1, r4, r5
 800cdec:	428b      	cmp	r3, r1
 800cdee:	bf01      	itttt	eq
 800cdf0:	6819      	ldreq	r1, [r3, #0]
 800cdf2:	685b      	ldreq	r3, [r3, #4]
 800cdf4:	1949      	addeq	r1, r1, r5
 800cdf6:	6021      	streq	r1, [r4, #0]
 800cdf8:	e7ed      	b.n	800cdd6 <_free_r+0x22>
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	b10b      	cbz	r3, 800ce04 <_free_r+0x50>
 800ce00:	42a3      	cmp	r3, r4
 800ce02:	d9fa      	bls.n	800cdfa <_free_r+0x46>
 800ce04:	6811      	ldr	r1, [r2, #0]
 800ce06:	1855      	adds	r5, r2, r1
 800ce08:	42a5      	cmp	r5, r4
 800ce0a:	d10b      	bne.n	800ce24 <_free_r+0x70>
 800ce0c:	6824      	ldr	r4, [r4, #0]
 800ce0e:	4421      	add	r1, r4
 800ce10:	1854      	adds	r4, r2, r1
 800ce12:	42a3      	cmp	r3, r4
 800ce14:	6011      	str	r1, [r2, #0]
 800ce16:	d1e0      	bne.n	800cdda <_free_r+0x26>
 800ce18:	681c      	ldr	r4, [r3, #0]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	6053      	str	r3, [r2, #4]
 800ce1e:	4421      	add	r1, r4
 800ce20:	6011      	str	r1, [r2, #0]
 800ce22:	e7da      	b.n	800cdda <_free_r+0x26>
 800ce24:	d902      	bls.n	800ce2c <_free_r+0x78>
 800ce26:	230c      	movs	r3, #12
 800ce28:	6003      	str	r3, [r0, #0]
 800ce2a:	e7d6      	b.n	800cdda <_free_r+0x26>
 800ce2c:	6825      	ldr	r5, [r4, #0]
 800ce2e:	1961      	adds	r1, r4, r5
 800ce30:	428b      	cmp	r3, r1
 800ce32:	bf04      	itt	eq
 800ce34:	6819      	ldreq	r1, [r3, #0]
 800ce36:	685b      	ldreq	r3, [r3, #4]
 800ce38:	6063      	str	r3, [r4, #4]
 800ce3a:	bf04      	itt	eq
 800ce3c:	1949      	addeq	r1, r1, r5
 800ce3e:	6021      	streq	r1, [r4, #0]
 800ce40:	6054      	str	r4, [r2, #4]
 800ce42:	e7ca      	b.n	800cdda <_free_r+0x26>
 800ce44:	b003      	add	sp, #12
 800ce46:	bd30      	pop	{r4, r5, pc}
 800ce48:	2000213c 	.word	0x2000213c

0800ce4c <sbrk_aligned>:
 800ce4c:	b570      	push	{r4, r5, r6, lr}
 800ce4e:	4e0e      	ldr	r6, [pc, #56]	; (800ce88 <sbrk_aligned+0x3c>)
 800ce50:	460c      	mov	r4, r1
 800ce52:	6831      	ldr	r1, [r6, #0]
 800ce54:	4605      	mov	r5, r0
 800ce56:	b911      	cbnz	r1, 800ce5e <sbrk_aligned+0x12>
 800ce58:	f000 f9e8 	bl	800d22c <_sbrk_r>
 800ce5c:	6030      	str	r0, [r6, #0]
 800ce5e:	4621      	mov	r1, r4
 800ce60:	4628      	mov	r0, r5
 800ce62:	f000 f9e3 	bl	800d22c <_sbrk_r>
 800ce66:	1c43      	adds	r3, r0, #1
 800ce68:	d00a      	beq.n	800ce80 <sbrk_aligned+0x34>
 800ce6a:	1cc4      	adds	r4, r0, #3
 800ce6c:	f024 0403 	bic.w	r4, r4, #3
 800ce70:	42a0      	cmp	r0, r4
 800ce72:	d007      	beq.n	800ce84 <sbrk_aligned+0x38>
 800ce74:	1a21      	subs	r1, r4, r0
 800ce76:	4628      	mov	r0, r5
 800ce78:	f000 f9d8 	bl	800d22c <_sbrk_r>
 800ce7c:	3001      	adds	r0, #1
 800ce7e:	d101      	bne.n	800ce84 <sbrk_aligned+0x38>
 800ce80:	f04f 34ff 	mov.w	r4, #4294967295
 800ce84:	4620      	mov	r0, r4
 800ce86:	bd70      	pop	{r4, r5, r6, pc}
 800ce88:	20002140 	.word	0x20002140

0800ce8c <_malloc_r>:
 800ce8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce90:	1ccd      	adds	r5, r1, #3
 800ce92:	f025 0503 	bic.w	r5, r5, #3
 800ce96:	3508      	adds	r5, #8
 800ce98:	2d0c      	cmp	r5, #12
 800ce9a:	bf38      	it	cc
 800ce9c:	250c      	movcc	r5, #12
 800ce9e:	2d00      	cmp	r5, #0
 800cea0:	4607      	mov	r7, r0
 800cea2:	db01      	blt.n	800cea8 <_malloc_r+0x1c>
 800cea4:	42a9      	cmp	r1, r5
 800cea6:	d905      	bls.n	800ceb4 <_malloc_r+0x28>
 800cea8:	230c      	movs	r3, #12
 800ceaa:	603b      	str	r3, [r7, #0]
 800ceac:	2600      	movs	r6, #0
 800ceae:	4630      	mov	r0, r6
 800ceb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceb4:	4e2e      	ldr	r6, [pc, #184]	; (800cf70 <_malloc_r+0xe4>)
 800ceb6:	f000 fa25 	bl	800d304 <__malloc_lock>
 800ceba:	6833      	ldr	r3, [r6, #0]
 800cebc:	461c      	mov	r4, r3
 800cebe:	bb34      	cbnz	r4, 800cf0e <_malloc_r+0x82>
 800cec0:	4629      	mov	r1, r5
 800cec2:	4638      	mov	r0, r7
 800cec4:	f7ff ffc2 	bl	800ce4c <sbrk_aligned>
 800cec8:	1c43      	adds	r3, r0, #1
 800ceca:	4604      	mov	r4, r0
 800cecc:	d14d      	bne.n	800cf6a <_malloc_r+0xde>
 800cece:	6834      	ldr	r4, [r6, #0]
 800ced0:	4626      	mov	r6, r4
 800ced2:	2e00      	cmp	r6, #0
 800ced4:	d140      	bne.n	800cf58 <_malloc_r+0xcc>
 800ced6:	6823      	ldr	r3, [r4, #0]
 800ced8:	4631      	mov	r1, r6
 800ceda:	4638      	mov	r0, r7
 800cedc:	eb04 0803 	add.w	r8, r4, r3
 800cee0:	f000 f9a4 	bl	800d22c <_sbrk_r>
 800cee4:	4580      	cmp	r8, r0
 800cee6:	d13a      	bne.n	800cf5e <_malloc_r+0xd2>
 800cee8:	6821      	ldr	r1, [r4, #0]
 800ceea:	3503      	adds	r5, #3
 800ceec:	1a6d      	subs	r5, r5, r1
 800ceee:	f025 0503 	bic.w	r5, r5, #3
 800cef2:	3508      	adds	r5, #8
 800cef4:	2d0c      	cmp	r5, #12
 800cef6:	bf38      	it	cc
 800cef8:	250c      	movcc	r5, #12
 800cefa:	4629      	mov	r1, r5
 800cefc:	4638      	mov	r0, r7
 800cefe:	f7ff ffa5 	bl	800ce4c <sbrk_aligned>
 800cf02:	3001      	adds	r0, #1
 800cf04:	d02b      	beq.n	800cf5e <_malloc_r+0xd2>
 800cf06:	6823      	ldr	r3, [r4, #0]
 800cf08:	442b      	add	r3, r5
 800cf0a:	6023      	str	r3, [r4, #0]
 800cf0c:	e00e      	b.n	800cf2c <_malloc_r+0xa0>
 800cf0e:	6822      	ldr	r2, [r4, #0]
 800cf10:	1b52      	subs	r2, r2, r5
 800cf12:	d41e      	bmi.n	800cf52 <_malloc_r+0xc6>
 800cf14:	2a0b      	cmp	r2, #11
 800cf16:	d916      	bls.n	800cf46 <_malloc_r+0xba>
 800cf18:	1961      	adds	r1, r4, r5
 800cf1a:	42a3      	cmp	r3, r4
 800cf1c:	6025      	str	r5, [r4, #0]
 800cf1e:	bf18      	it	ne
 800cf20:	6059      	strne	r1, [r3, #4]
 800cf22:	6863      	ldr	r3, [r4, #4]
 800cf24:	bf08      	it	eq
 800cf26:	6031      	streq	r1, [r6, #0]
 800cf28:	5162      	str	r2, [r4, r5]
 800cf2a:	604b      	str	r3, [r1, #4]
 800cf2c:	4638      	mov	r0, r7
 800cf2e:	f104 060b 	add.w	r6, r4, #11
 800cf32:	f000 f9ed 	bl	800d310 <__malloc_unlock>
 800cf36:	f026 0607 	bic.w	r6, r6, #7
 800cf3a:	1d23      	adds	r3, r4, #4
 800cf3c:	1af2      	subs	r2, r6, r3
 800cf3e:	d0b6      	beq.n	800ceae <_malloc_r+0x22>
 800cf40:	1b9b      	subs	r3, r3, r6
 800cf42:	50a3      	str	r3, [r4, r2]
 800cf44:	e7b3      	b.n	800ceae <_malloc_r+0x22>
 800cf46:	6862      	ldr	r2, [r4, #4]
 800cf48:	42a3      	cmp	r3, r4
 800cf4a:	bf0c      	ite	eq
 800cf4c:	6032      	streq	r2, [r6, #0]
 800cf4e:	605a      	strne	r2, [r3, #4]
 800cf50:	e7ec      	b.n	800cf2c <_malloc_r+0xa0>
 800cf52:	4623      	mov	r3, r4
 800cf54:	6864      	ldr	r4, [r4, #4]
 800cf56:	e7b2      	b.n	800cebe <_malloc_r+0x32>
 800cf58:	4634      	mov	r4, r6
 800cf5a:	6876      	ldr	r6, [r6, #4]
 800cf5c:	e7b9      	b.n	800ced2 <_malloc_r+0x46>
 800cf5e:	230c      	movs	r3, #12
 800cf60:	603b      	str	r3, [r7, #0]
 800cf62:	4638      	mov	r0, r7
 800cf64:	f000 f9d4 	bl	800d310 <__malloc_unlock>
 800cf68:	e7a1      	b.n	800ceae <_malloc_r+0x22>
 800cf6a:	6025      	str	r5, [r4, #0]
 800cf6c:	e7de      	b.n	800cf2c <_malloc_r+0xa0>
 800cf6e:	bf00      	nop
 800cf70:	2000213c 	.word	0x2000213c

0800cf74 <__ssputs_r>:
 800cf74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf78:	688e      	ldr	r6, [r1, #8]
 800cf7a:	429e      	cmp	r6, r3
 800cf7c:	4682      	mov	sl, r0
 800cf7e:	460c      	mov	r4, r1
 800cf80:	4690      	mov	r8, r2
 800cf82:	461f      	mov	r7, r3
 800cf84:	d838      	bhi.n	800cff8 <__ssputs_r+0x84>
 800cf86:	898a      	ldrh	r2, [r1, #12]
 800cf88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf8c:	d032      	beq.n	800cff4 <__ssputs_r+0x80>
 800cf8e:	6825      	ldr	r5, [r4, #0]
 800cf90:	6909      	ldr	r1, [r1, #16]
 800cf92:	eba5 0901 	sub.w	r9, r5, r1
 800cf96:	6965      	ldr	r5, [r4, #20]
 800cf98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	444b      	add	r3, r9
 800cfa4:	106d      	asrs	r5, r5, #1
 800cfa6:	429d      	cmp	r5, r3
 800cfa8:	bf38      	it	cc
 800cfaa:	461d      	movcc	r5, r3
 800cfac:	0553      	lsls	r3, r2, #21
 800cfae:	d531      	bpl.n	800d014 <__ssputs_r+0xa0>
 800cfb0:	4629      	mov	r1, r5
 800cfb2:	f7ff ff6b 	bl	800ce8c <_malloc_r>
 800cfb6:	4606      	mov	r6, r0
 800cfb8:	b950      	cbnz	r0, 800cfd0 <__ssputs_r+0x5c>
 800cfba:	230c      	movs	r3, #12
 800cfbc:	f8ca 3000 	str.w	r3, [sl]
 800cfc0:	89a3      	ldrh	r3, [r4, #12]
 800cfc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfc6:	81a3      	strh	r3, [r4, #12]
 800cfc8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfd0:	6921      	ldr	r1, [r4, #16]
 800cfd2:	464a      	mov	r2, r9
 800cfd4:	f7ff fb46 	bl	800c664 <memcpy>
 800cfd8:	89a3      	ldrh	r3, [r4, #12]
 800cfda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cfde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfe2:	81a3      	strh	r3, [r4, #12]
 800cfe4:	6126      	str	r6, [r4, #16]
 800cfe6:	6165      	str	r5, [r4, #20]
 800cfe8:	444e      	add	r6, r9
 800cfea:	eba5 0509 	sub.w	r5, r5, r9
 800cfee:	6026      	str	r6, [r4, #0]
 800cff0:	60a5      	str	r5, [r4, #8]
 800cff2:	463e      	mov	r6, r7
 800cff4:	42be      	cmp	r6, r7
 800cff6:	d900      	bls.n	800cffa <__ssputs_r+0x86>
 800cff8:	463e      	mov	r6, r7
 800cffa:	6820      	ldr	r0, [r4, #0]
 800cffc:	4632      	mov	r2, r6
 800cffe:	4641      	mov	r1, r8
 800d000:	f000 f966 	bl	800d2d0 <memmove>
 800d004:	68a3      	ldr	r3, [r4, #8]
 800d006:	1b9b      	subs	r3, r3, r6
 800d008:	60a3      	str	r3, [r4, #8]
 800d00a:	6823      	ldr	r3, [r4, #0]
 800d00c:	4433      	add	r3, r6
 800d00e:	6023      	str	r3, [r4, #0]
 800d010:	2000      	movs	r0, #0
 800d012:	e7db      	b.n	800cfcc <__ssputs_r+0x58>
 800d014:	462a      	mov	r2, r5
 800d016:	f000 f981 	bl	800d31c <_realloc_r>
 800d01a:	4606      	mov	r6, r0
 800d01c:	2800      	cmp	r0, #0
 800d01e:	d1e1      	bne.n	800cfe4 <__ssputs_r+0x70>
 800d020:	6921      	ldr	r1, [r4, #16]
 800d022:	4650      	mov	r0, sl
 800d024:	f7ff fec6 	bl	800cdb4 <_free_r>
 800d028:	e7c7      	b.n	800cfba <__ssputs_r+0x46>
	...

0800d02c <_svfiprintf_r>:
 800d02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d030:	4698      	mov	r8, r3
 800d032:	898b      	ldrh	r3, [r1, #12]
 800d034:	061b      	lsls	r3, r3, #24
 800d036:	b09d      	sub	sp, #116	; 0x74
 800d038:	4607      	mov	r7, r0
 800d03a:	460d      	mov	r5, r1
 800d03c:	4614      	mov	r4, r2
 800d03e:	d50e      	bpl.n	800d05e <_svfiprintf_r+0x32>
 800d040:	690b      	ldr	r3, [r1, #16]
 800d042:	b963      	cbnz	r3, 800d05e <_svfiprintf_r+0x32>
 800d044:	2140      	movs	r1, #64	; 0x40
 800d046:	f7ff ff21 	bl	800ce8c <_malloc_r>
 800d04a:	6028      	str	r0, [r5, #0]
 800d04c:	6128      	str	r0, [r5, #16]
 800d04e:	b920      	cbnz	r0, 800d05a <_svfiprintf_r+0x2e>
 800d050:	230c      	movs	r3, #12
 800d052:	603b      	str	r3, [r7, #0]
 800d054:	f04f 30ff 	mov.w	r0, #4294967295
 800d058:	e0d1      	b.n	800d1fe <_svfiprintf_r+0x1d2>
 800d05a:	2340      	movs	r3, #64	; 0x40
 800d05c:	616b      	str	r3, [r5, #20]
 800d05e:	2300      	movs	r3, #0
 800d060:	9309      	str	r3, [sp, #36]	; 0x24
 800d062:	2320      	movs	r3, #32
 800d064:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d068:	f8cd 800c 	str.w	r8, [sp, #12]
 800d06c:	2330      	movs	r3, #48	; 0x30
 800d06e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d218 <_svfiprintf_r+0x1ec>
 800d072:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d076:	f04f 0901 	mov.w	r9, #1
 800d07a:	4623      	mov	r3, r4
 800d07c:	469a      	mov	sl, r3
 800d07e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d082:	b10a      	cbz	r2, 800d088 <_svfiprintf_r+0x5c>
 800d084:	2a25      	cmp	r2, #37	; 0x25
 800d086:	d1f9      	bne.n	800d07c <_svfiprintf_r+0x50>
 800d088:	ebba 0b04 	subs.w	fp, sl, r4
 800d08c:	d00b      	beq.n	800d0a6 <_svfiprintf_r+0x7a>
 800d08e:	465b      	mov	r3, fp
 800d090:	4622      	mov	r2, r4
 800d092:	4629      	mov	r1, r5
 800d094:	4638      	mov	r0, r7
 800d096:	f7ff ff6d 	bl	800cf74 <__ssputs_r>
 800d09a:	3001      	adds	r0, #1
 800d09c:	f000 80aa 	beq.w	800d1f4 <_svfiprintf_r+0x1c8>
 800d0a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0a2:	445a      	add	r2, fp
 800d0a4:	9209      	str	r2, [sp, #36]	; 0x24
 800d0a6:	f89a 3000 	ldrb.w	r3, [sl]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	f000 80a2 	beq.w	800d1f4 <_svfiprintf_r+0x1c8>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d0b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0ba:	f10a 0a01 	add.w	sl, sl, #1
 800d0be:	9304      	str	r3, [sp, #16]
 800d0c0:	9307      	str	r3, [sp, #28]
 800d0c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0c6:	931a      	str	r3, [sp, #104]	; 0x68
 800d0c8:	4654      	mov	r4, sl
 800d0ca:	2205      	movs	r2, #5
 800d0cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0d0:	4851      	ldr	r0, [pc, #324]	; (800d218 <_svfiprintf_r+0x1ec>)
 800d0d2:	f7f3 f88d 	bl	80001f0 <memchr>
 800d0d6:	9a04      	ldr	r2, [sp, #16]
 800d0d8:	b9d8      	cbnz	r0, 800d112 <_svfiprintf_r+0xe6>
 800d0da:	06d0      	lsls	r0, r2, #27
 800d0dc:	bf44      	itt	mi
 800d0de:	2320      	movmi	r3, #32
 800d0e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0e4:	0711      	lsls	r1, r2, #28
 800d0e6:	bf44      	itt	mi
 800d0e8:	232b      	movmi	r3, #43	; 0x2b
 800d0ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0ee:	f89a 3000 	ldrb.w	r3, [sl]
 800d0f2:	2b2a      	cmp	r3, #42	; 0x2a
 800d0f4:	d015      	beq.n	800d122 <_svfiprintf_r+0xf6>
 800d0f6:	9a07      	ldr	r2, [sp, #28]
 800d0f8:	4654      	mov	r4, sl
 800d0fa:	2000      	movs	r0, #0
 800d0fc:	f04f 0c0a 	mov.w	ip, #10
 800d100:	4621      	mov	r1, r4
 800d102:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d106:	3b30      	subs	r3, #48	; 0x30
 800d108:	2b09      	cmp	r3, #9
 800d10a:	d94e      	bls.n	800d1aa <_svfiprintf_r+0x17e>
 800d10c:	b1b0      	cbz	r0, 800d13c <_svfiprintf_r+0x110>
 800d10e:	9207      	str	r2, [sp, #28]
 800d110:	e014      	b.n	800d13c <_svfiprintf_r+0x110>
 800d112:	eba0 0308 	sub.w	r3, r0, r8
 800d116:	fa09 f303 	lsl.w	r3, r9, r3
 800d11a:	4313      	orrs	r3, r2
 800d11c:	9304      	str	r3, [sp, #16]
 800d11e:	46a2      	mov	sl, r4
 800d120:	e7d2      	b.n	800d0c8 <_svfiprintf_r+0x9c>
 800d122:	9b03      	ldr	r3, [sp, #12]
 800d124:	1d19      	adds	r1, r3, #4
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	9103      	str	r1, [sp, #12]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	bfbb      	ittet	lt
 800d12e:	425b      	neglt	r3, r3
 800d130:	f042 0202 	orrlt.w	r2, r2, #2
 800d134:	9307      	strge	r3, [sp, #28]
 800d136:	9307      	strlt	r3, [sp, #28]
 800d138:	bfb8      	it	lt
 800d13a:	9204      	strlt	r2, [sp, #16]
 800d13c:	7823      	ldrb	r3, [r4, #0]
 800d13e:	2b2e      	cmp	r3, #46	; 0x2e
 800d140:	d10c      	bne.n	800d15c <_svfiprintf_r+0x130>
 800d142:	7863      	ldrb	r3, [r4, #1]
 800d144:	2b2a      	cmp	r3, #42	; 0x2a
 800d146:	d135      	bne.n	800d1b4 <_svfiprintf_r+0x188>
 800d148:	9b03      	ldr	r3, [sp, #12]
 800d14a:	1d1a      	adds	r2, r3, #4
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	9203      	str	r2, [sp, #12]
 800d150:	2b00      	cmp	r3, #0
 800d152:	bfb8      	it	lt
 800d154:	f04f 33ff 	movlt.w	r3, #4294967295
 800d158:	3402      	adds	r4, #2
 800d15a:	9305      	str	r3, [sp, #20]
 800d15c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d228 <_svfiprintf_r+0x1fc>
 800d160:	7821      	ldrb	r1, [r4, #0]
 800d162:	2203      	movs	r2, #3
 800d164:	4650      	mov	r0, sl
 800d166:	f7f3 f843 	bl	80001f0 <memchr>
 800d16a:	b140      	cbz	r0, 800d17e <_svfiprintf_r+0x152>
 800d16c:	2340      	movs	r3, #64	; 0x40
 800d16e:	eba0 000a 	sub.w	r0, r0, sl
 800d172:	fa03 f000 	lsl.w	r0, r3, r0
 800d176:	9b04      	ldr	r3, [sp, #16]
 800d178:	4303      	orrs	r3, r0
 800d17a:	3401      	adds	r4, #1
 800d17c:	9304      	str	r3, [sp, #16]
 800d17e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d182:	4826      	ldr	r0, [pc, #152]	; (800d21c <_svfiprintf_r+0x1f0>)
 800d184:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d188:	2206      	movs	r2, #6
 800d18a:	f7f3 f831 	bl	80001f0 <memchr>
 800d18e:	2800      	cmp	r0, #0
 800d190:	d038      	beq.n	800d204 <_svfiprintf_r+0x1d8>
 800d192:	4b23      	ldr	r3, [pc, #140]	; (800d220 <_svfiprintf_r+0x1f4>)
 800d194:	bb1b      	cbnz	r3, 800d1de <_svfiprintf_r+0x1b2>
 800d196:	9b03      	ldr	r3, [sp, #12]
 800d198:	3307      	adds	r3, #7
 800d19a:	f023 0307 	bic.w	r3, r3, #7
 800d19e:	3308      	adds	r3, #8
 800d1a0:	9303      	str	r3, [sp, #12]
 800d1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1a4:	4433      	add	r3, r6
 800d1a6:	9309      	str	r3, [sp, #36]	; 0x24
 800d1a8:	e767      	b.n	800d07a <_svfiprintf_r+0x4e>
 800d1aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1ae:	460c      	mov	r4, r1
 800d1b0:	2001      	movs	r0, #1
 800d1b2:	e7a5      	b.n	800d100 <_svfiprintf_r+0xd4>
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	3401      	adds	r4, #1
 800d1b8:	9305      	str	r3, [sp, #20]
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	f04f 0c0a 	mov.w	ip, #10
 800d1c0:	4620      	mov	r0, r4
 800d1c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1c6:	3a30      	subs	r2, #48	; 0x30
 800d1c8:	2a09      	cmp	r2, #9
 800d1ca:	d903      	bls.n	800d1d4 <_svfiprintf_r+0x1a8>
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d0c5      	beq.n	800d15c <_svfiprintf_r+0x130>
 800d1d0:	9105      	str	r1, [sp, #20]
 800d1d2:	e7c3      	b.n	800d15c <_svfiprintf_r+0x130>
 800d1d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1d8:	4604      	mov	r4, r0
 800d1da:	2301      	movs	r3, #1
 800d1dc:	e7f0      	b.n	800d1c0 <_svfiprintf_r+0x194>
 800d1de:	ab03      	add	r3, sp, #12
 800d1e0:	9300      	str	r3, [sp, #0]
 800d1e2:	462a      	mov	r2, r5
 800d1e4:	4b0f      	ldr	r3, [pc, #60]	; (800d224 <_svfiprintf_r+0x1f8>)
 800d1e6:	a904      	add	r1, sp, #16
 800d1e8:	4638      	mov	r0, r7
 800d1ea:	f7fd ffcb 	bl	800b184 <_printf_float>
 800d1ee:	1c42      	adds	r2, r0, #1
 800d1f0:	4606      	mov	r6, r0
 800d1f2:	d1d6      	bne.n	800d1a2 <_svfiprintf_r+0x176>
 800d1f4:	89ab      	ldrh	r3, [r5, #12]
 800d1f6:	065b      	lsls	r3, r3, #25
 800d1f8:	f53f af2c 	bmi.w	800d054 <_svfiprintf_r+0x28>
 800d1fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1fe:	b01d      	add	sp, #116	; 0x74
 800d200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d204:	ab03      	add	r3, sp, #12
 800d206:	9300      	str	r3, [sp, #0]
 800d208:	462a      	mov	r2, r5
 800d20a:	4b06      	ldr	r3, [pc, #24]	; (800d224 <_svfiprintf_r+0x1f8>)
 800d20c:	a904      	add	r1, sp, #16
 800d20e:	4638      	mov	r0, r7
 800d210:	f7fe fa5c 	bl	800b6cc <_printf_i>
 800d214:	e7eb      	b.n	800d1ee <_svfiprintf_r+0x1c2>
 800d216:	bf00      	nop
 800d218:	0800e644 	.word	0x0800e644
 800d21c:	0800e64e 	.word	0x0800e64e
 800d220:	0800b185 	.word	0x0800b185
 800d224:	0800cf75 	.word	0x0800cf75
 800d228:	0800e64a 	.word	0x0800e64a

0800d22c <_sbrk_r>:
 800d22c:	b538      	push	{r3, r4, r5, lr}
 800d22e:	4d06      	ldr	r5, [pc, #24]	; (800d248 <_sbrk_r+0x1c>)
 800d230:	2300      	movs	r3, #0
 800d232:	4604      	mov	r4, r0
 800d234:	4608      	mov	r0, r1
 800d236:	602b      	str	r3, [r5, #0]
 800d238:	f7f4 fdce 	bl	8001dd8 <_sbrk>
 800d23c:	1c43      	adds	r3, r0, #1
 800d23e:	d102      	bne.n	800d246 <_sbrk_r+0x1a>
 800d240:	682b      	ldr	r3, [r5, #0]
 800d242:	b103      	cbz	r3, 800d246 <_sbrk_r+0x1a>
 800d244:	6023      	str	r3, [r4, #0]
 800d246:	bd38      	pop	{r3, r4, r5, pc}
 800d248:	20002144 	.word	0x20002144

0800d24c <__assert_func>:
 800d24c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d24e:	4614      	mov	r4, r2
 800d250:	461a      	mov	r2, r3
 800d252:	4b09      	ldr	r3, [pc, #36]	; (800d278 <__assert_func+0x2c>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4605      	mov	r5, r0
 800d258:	68d8      	ldr	r0, [r3, #12]
 800d25a:	b14c      	cbz	r4, 800d270 <__assert_func+0x24>
 800d25c:	4b07      	ldr	r3, [pc, #28]	; (800d27c <__assert_func+0x30>)
 800d25e:	9100      	str	r1, [sp, #0]
 800d260:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d264:	4906      	ldr	r1, [pc, #24]	; (800d280 <__assert_func+0x34>)
 800d266:	462b      	mov	r3, r5
 800d268:	f000 f80e 	bl	800d288 <fiprintf>
 800d26c:	f000 faac 	bl	800d7c8 <abort>
 800d270:	4b04      	ldr	r3, [pc, #16]	; (800d284 <__assert_func+0x38>)
 800d272:	461c      	mov	r4, r3
 800d274:	e7f3      	b.n	800d25e <__assert_func+0x12>
 800d276:	bf00      	nop
 800d278:	20000110 	.word	0x20000110
 800d27c:	0800e655 	.word	0x0800e655
 800d280:	0800e662 	.word	0x0800e662
 800d284:	0800e690 	.word	0x0800e690

0800d288 <fiprintf>:
 800d288:	b40e      	push	{r1, r2, r3}
 800d28a:	b503      	push	{r0, r1, lr}
 800d28c:	4601      	mov	r1, r0
 800d28e:	ab03      	add	r3, sp, #12
 800d290:	4805      	ldr	r0, [pc, #20]	; (800d2a8 <fiprintf+0x20>)
 800d292:	f853 2b04 	ldr.w	r2, [r3], #4
 800d296:	6800      	ldr	r0, [r0, #0]
 800d298:	9301      	str	r3, [sp, #4]
 800d29a:	f000 f897 	bl	800d3cc <_vfiprintf_r>
 800d29e:	b002      	add	sp, #8
 800d2a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2a4:	b003      	add	sp, #12
 800d2a6:	4770      	bx	lr
 800d2a8:	20000110 	.word	0x20000110

0800d2ac <__ascii_mbtowc>:
 800d2ac:	b082      	sub	sp, #8
 800d2ae:	b901      	cbnz	r1, 800d2b2 <__ascii_mbtowc+0x6>
 800d2b0:	a901      	add	r1, sp, #4
 800d2b2:	b142      	cbz	r2, 800d2c6 <__ascii_mbtowc+0x1a>
 800d2b4:	b14b      	cbz	r3, 800d2ca <__ascii_mbtowc+0x1e>
 800d2b6:	7813      	ldrb	r3, [r2, #0]
 800d2b8:	600b      	str	r3, [r1, #0]
 800d2ba:	7812      	ldrb	r2, [r2, #0]
 800d2bc:	1e10      	subs	r0, r2, #0
 800d2be:	bf18      	it	ne
 800d2c0:	2001      	movne	r0, #1
 800d2c2:	b002      	add	sp, #8
 800d2c4:	4770      	bx	lr
 800d2c6:	4610      	mov	r0, r2
 800d2c8:	e7fb      	b.n	800d2c2 <__ascii_mbtowc+0x16>
 800d2ca:	f06f 0001 	mvn.w	r0, #1
 800d2ce:	e7f8      	b.n	800d2c2 <__ascii_mbtowc+0x16>

0800d2d0 <memmove>:
 800d2d0:	4288      	cmp	r0, r1
 800d2d2:	b510      	push	{r4, lr}
 800d2d4:	eb01 0402 	add.w	r4, r1, r2
 800d2d8:	d902      	bls.n	800d2e0 <memmove+0x10>
 800d2da:	4284      	cmp	r4, r0
 800d2dc:	4623      	mov	r3, r4
 800d2de:	d807      	bhi.n	800d2f0 <memmove+0x20>
 800d2e0:	1e43      	subs	r3, r0, #1
 800d2e2:	42a1      	cmp	r1, r4
 800d2e4:	d008      	beq.n	800d2f8 <memmove+0x28>
 800d2e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d2ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d2ee:	e7f8      	b.n	800d2e2 <memmove+0x12>
 800d2f0:	4402      	add	r2, r0
 800d2f2:	4601      	mov	r1, r0
 800d2f4:	428a      	cmp	r2, r1
 800d2f6:	d100      	bne.n	800d2fa <memmove+0x2a>
 800d2f8:	bd10      	pop	{r4, pc}
 800d2fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d2fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d302:	e7f7      	b.n	800d2f4 <memmove+0x24>

0800d304 <__malloc_lock>:
 800d304:	4801      	ldr	r0, [pc, #4]	; (800d30c <__malloc_lock+0x8>)
 800d306:	f000 bc1f 	b.w	800db48 <__retarget_lock_acquire_recursive>
 800d30a:	bf00      	nop
 800d30c:	20002148 	.word	0x20002148

0800d310 <__malloc_unlock>:
 800d310:	4801      	ldr	r0, [pc, #4]	; (800d318 <__malloc_unlock+0x8>)
 800d312:	f000 bc1a 	b.w	800db4a <__retarget_lock_release_recursive>
 800d316:	bf00      	nop
 800d318:	20002148 	.word	0x20002148

0800d31c <_realloc_r>:
 800d31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d320:	4680      	mov	r8, r0
 800d322:	4614      	mov	r4, r2
 800d324:	460e      	mov	r6, r1
 800d326:	b921      	cbnz	r1, 800d332 <_realloc_r+0x16>
 800d328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d32c:	4611      	mov	r1, r2
 800d32e:	f7ff bdad 	b.w	800ce8c <_malloc_r>
 800d332:	b92a      	cbnz	r2, 800d340 <_realloc_r+0x24>
 800d334:	f7ff fd3e 	bl	800cdb4 <_free_r>
 800d338:	4625      	mov	r5, r4
 800d33a:	4628      	mov	r0, r5
 800d33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d340:	f000 fc6a 	bl	800dc18 <_malloc_usable_size_r>
 800d344:	4284      	cmp	r4, r0
 800d346:	4607      	mov	r7, r0
 800d348:	d802      	bhi.n	800d350 <_realloc_r+0x34>
 800d34a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d34e:	d812      	bhi.n	800d376 <_realloc_r+0x5a>
 800d350:	4621      	mov	r1, r4
 800d352:	4640      	mov	r0, r8
 800d354:	f7ff fd9a 	bl	800ce8c <_malloc_r>
 800d358:	4605      	mov	r5, r0
 800d35a:	2800      	cmp	r0, #0
 800d35c:	d0ed      	beq.n	800d33a <_realloc_r+0x1e>
 800d35e:	42bc      	cmp	r4, r7
 800d360:	4622      	mov	r2, r4
 800d362:	4631      	mov	r1, r6
 800d364:	bf28      	it	cs
 800d366:	463a      	movcs	r2, r7
 800d368:	f7ff f97c 	bl	800c664 <memcpy>
 800d36c:	4631      	mov	r1, r6
 800d36e:	4640      	mov	r0, r8
 800d370:	f7ff fd20 	bl	800cdb4 <_free_r>
 800d374:	e7e1      	b.n	800d33a <_realloc_r+0x1e>
 800d376:	4635      	mov	r5, r6
 800d378:	e7df      	b.n	800d33a <_realloc_r+0x1e>

0800d37a <__sfputc_r>:
 800d37a:	6893      	ldr	r3, [r2, #8]
 800d37c:	3b01      	subs	r3, #1
 800d37e:	2b00      	cmp	r3, #0
 800d380:	b410      	push	{r4}
 800d382:	6093      	str	r3, [r2, #8]
 800d384:	da08      	bge.n	800d398 <__sfputc_r+0x1e>
 800d386:	6994      	ldr	r4, [r2, #24]
 800d388:	42a3      	cmp	r3, r4
 800d38a:	db01      	blt.n	800d390 <__sfputc_r+0x16>
 800d38c:	290a      	cmp	r1, #10
 800d38e:	d103      	bne.n	800d398 <__sfputc_r+0x1e>
 800d390:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d394:	f000 b94a 	b.w	800d62c <__swbuf_r>
 800d398:	6813      	ldr	r3, [r2, #0]
 800d39a:	1c58      	adds	r0, r3, #1
 800d39c:	6010      	str	r0, [r2, #0]
 800d39e:	7019      	strb	r1, [r3, #0]
 800d3a0:	4608      	mov	r0, r1
 800d3a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3a6:	4770      	bx	lr

0800d3a8 <__sfputs_r>:
 800d3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3aa:	4606      	mov	r6, r0
 800d3ac:	460f      	mov	r7, r1
 800d3ae:	4614      	mov	r4, r2
 800d3b0:	18d5      	adds	r5, r2, r3
 800d3b2:	42ac      	cmp	r4, r5
 800d3b4:	d101      	bne.n	800d3ba <__sfputs_r+0x12>
 800d3b6:	2000      	movs	r0, #0
 800d3b8:	e007      	b.n	800d3ca <__sfputs_r+0x22>
 800d3ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3be:	463a      	mov	r2, r7
 800d3c0:	4630      	mov	r0, r6
 800d3c2:	f7ff ffda 	bl	800d37a <__sfputc_r>
 800d3c6:	1c43      	adds	r3, r0, #1
 800d3c8:	d1f3      	bne.n	800d3b2 <__sfputs_r+0xa>
 800d3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d3cc <_vfiprintf_r>:
 800d3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d0:	460d      	mov	r5, r1
 800d3d2:	b09d      	sub	sp, #116	; 0x74
 800d3d4:	4614      	mov	r4, r2
 800d3d6:	4698      	mov	r8, r3
 800d3d8:	4606      	mov	r6, r0
 800d3da:	b118      	cbz	r0, 800d3e4 <_vfiprintf_r+0x18>
 800d3dc:	6983      	ldr	r3, [r0, #24]
 800d3de:	b90b      	cbnz	r3, 800d3e4 <_vfiprintf_r+0x18>
 800d3e0:	f000 fb14 	bl	800da0c <__sinit>
 800d3e4:	4b89      	ldr	r3, [pc, #548]	; (800d60c <_vfiprintf_r+0x240>)
 800d3e6:	429d      	cmp	r5, r3
 800d3e8:	d11b      	bne.n	800d422 <_vfiprintf_r+0x56>
 800d3ea:	6875      	ldr	r5, [r6, #4]
 800d3ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3ee:	07d9      	lsls	r1, r3, #31
 800d3f0:	d405      	bmi.n	800d3fe <_vfiprintf_r+0x32>
 800d3f2:	89ab      	ldrh	r3, [r5, #12]
 800d3f4:	059a      	lsls	r2, r3, #22
 800d3f6:	d402      	bmi.n	800d3fe <_vfiprintf_r+0x32>
 800d3f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3fa:	f000 fba5 	bl	800db48 <__retarget_lock_acquire_recursive>
 800d3fe:	89ab      	ldrh	r3, [r5, #12]
 800d400:	071b      	lsls	r3, r3, #28
 800d402:	d501      	bpl.n	800d408 <_vfiprintf_r+0x3c>
 800d404:	692b      	ldr	r3, [r5, #16]
 800d406:	b9eb      	cbnz	r3, 800d444 <_vfiprintf_r+0x78>
 800d408:	4629      	mov	r1, r5
 800d40a:	4630      	mov	r0, r6
 800d40c:	f000 f96e 	bl	800d6ec <__swsetup_r>
 800d410:	b1c0      	cbz	r0, 800d444 <_vfiprintf_r+0x78>
 800d412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d414:	07dc      	lsls	r4, r3, #31
 800d416:	d50e      	bpl.n	800d436 <_vfiprintf_r+0x6a>
 800d418:	f04f 30ff 	mov.w	r0, #4294967295
 800d41c:	b01d      	add	sp, #116	; 0x74
 800d41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d422:	4b7b      	ldr	r3, [pc, #492]	; (800d610 <_vfiprintf_r+0x244>)
 800d424:	429d      	cmp	r5, r3
 800d426:	d101      	bne.n	800d42c <_vfiprintf_r+0x60>
 800d428:	68b5      	ldr	r5, [r6, #8]
 800d42a:	e7df      	b.n	800d3ec <_vfiprintf_r+0x20>
 800d42c:	4b79      	ldr	r3, [pc, #484]	; (800d614 <_vfiprintf_r+0x248>)
 800d42e:	429d      	cmp	r5, r3
 800d430:	bf08      	it	eq
 800d432:	68f5      	ldreq	r5, [r6, #12]
 800d434:	e7da      	b.n	800d3ec <_vfiprintf_r+0x20>
 800d436:	89ab      	ldrh	r3, [r5, #12]
 800d438:	0598      	lsls	r0, r3, #22
 800d43a:	d4ed      	bmi.n	800d418 <_vfiprintf_r+0x4c>
 800d43c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d43e:	f000 fb84 	bl	800db4a <__retarget_lock_release_recursive>
 800d442:	e7e9      	b.n	800d418 <_vfiprintf_r+0x4c>
 800d444:	2300      	movs	r3, #0
 800d446:	9309      	str	r3, [sp, #36]	; 0x24
 800d448:	2320      	movs	r3, #32
 800d44a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d44e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d452:	2330      	movs	r3, #48	; 0x30
 800d454:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d618 <_vfiprintf_r+0x24c>
 800d458:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d45c:	f04f 0901 	mov.w	r9, #1
 800d460:	4623      	mov	r3, r4
 800d462:	469a      	mov	sl, r3
 800d464:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d468:	b10a      	cbz	r2, 800d46e <_vfiprintf_r+0xa2>
 800d46a:	2a25      	cmp	r2, #37	; 0x25
 800d46c:	d1f9      	bne.n	800d462 <_vfiprintf_r+0x96>
 800d46e:	ebba 0b04 	subs.w	fp, sl, r4
 800d472:	d00b      	beq.n	800d48c <_vfiprintf_r+0xc0>
 800d474:	465b      	mov	r3, fp
 800d476:	4622      	mov	r2, r4
 800d478:	4629      	mov	r1, r5
 800d47a:	4630      	mov	r0, r6
 800d47c:	f7ff ff94 	bl	800d3a8 <__sfputs_r>
 800d480:	3001      	adds	r0, #1
 800d482:	f000 80aa 	beq.w	800d5da <_vfiprintf_r+0x20e>
 800d486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d488:	445a      	add	r2, fp
 800d48a:	9209      	str	r2, [sp, #36]	; 0x24
 800d48c:	f89a 3000 	ldrb.w	r3, [sl]
 800d490:	2b00      	cmp	r3, #0
 800d492:	f000 80a2 	beq.w	800d5da <_vfiprintf_r+0x20e>
 800d496:	2300      	movs	r3, #0
 800d498:	f04f 32ff 	mov.w	r2, #4294967295
 800d49c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4a0:	f10a 0a01 	add.w	sl, sl, #1
 800d4a4:	9304      	str	r3, [sp, #16]
 800d4a6:	9307      	str	r3, [sp, #28]
 800d4a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4ac:	931a      	str	r3, [sp, #104]	; 0x68
 800d4ae:	4654      	mov	r4, sl
 800d4b0:	2205      	movs	r2, #5
 800d4b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4b6:	4858      	ldr	r0, [pc, #352]	; (800d618 <_vfiprintf_r+0x24c>)
 800d4b8:	f7f2 fe9a 	bl	80001f0 <memchr>
 800d4bc:	9a04      	ldr	r2, [sp, #16]
 800d4be:	b9d8      	cbnz	r0, 800d4f8 <_vfiprintf_r+0x12c>
 800d4c0:	06d1      	lsls	r1, r2, #27
 800d4c2:	bf44      	itt	mi
 800d4c4:	2320      	movmi	r3, #32
 800d4c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4ca:	0713      	lsls	r3, r2, #28
 800d4cc:	bf44      	itt	mi
 800d4ce:	232b      	movmi	r3, #43	; 0x2b
 800d4d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4d4:	f89a 3000 	ldrb.w	r3, [sl]
 800d4d8:	2b2a      	cmp	r3, #42	; 0x2a
 800d4da:	d015      	beq.n	800d508 <_vfiprintf_r+0x13c>
 800d4dc:	9a07      	ldr	r2, [sp, #28]
 800d4de:	4654      	mov	r4, sl
 800d4e0:	2000      	movs	r0, #0
 800d4e2:	f04f 0c0a 	mov.w	ip, #10
 800d4e6:	4621      	mov	r1, r4
 800d4e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4ec:	3b30      	subs	r3, #48	; 0x30
 800d4ee:	2b09      	cmp	r3, #9
 800d4f0:	d94e      	bls.n	800d590 <_vfiprintf_r+0x1c4>
 800d4f2:	b1b0      	cbz	r0, 800d522 <_vfiprintf_r+0x156>
 800d4f4:	9207      	str	r2, [sp, #28]
 800d4f6:	e014      	b.n	800d522 <_vfiprintf_r+0x156>
 800d4f8:	eba0 0308 	sub.w	r3, r0, r8
 800d4fc:	fa09 f303 	lsl.w	r3, r9, r3
 800d500:	4313      	orrs	r3, r2
 800d502:	9304      	str	r3, [sp, #16]
 800d504:	46a2      	mov	sl, r4
 800d506:	e7d2      	b.n	800d4ae <_vfiprintf_r+0xe2>
 800d508:	9b03      	ldr	r3, [sp, #12]
 800d50a:	1d19      	adds	r1, r3, #4
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	9103      	str	r1, [sp, #12]
 800d510:	2b00      	cmp	r3, #0
 800d512:	bfbb      	ittet	lt
 800d514:	425b      	neglt	r3, r3
 800d516:	f042 0202 	orrlt.w	r2, r2, #2
 800d51a:	9307      	strge	r3, [sp, #28]
 800d51c:	9307      	strlt	r3, [sp, #28]
 800d51e:	bfb8      	it	lt
 800d520:	9204      	strlt	r2, [sp, #16]
 800d522:	7823      	ldrb	r3, [r4, #0]
 800d524:	2b2e      	cmp	r3, #46	; 0x2e
 800d526:	d10c      	bne.n	800d542 <_vfiprintf_r+0x176>
 800d528:	7863      	ldrb	r3, [r4, #1]
 800d52a:	2b2a      	cmp	r3, #42	; 0x2a
 800d52c:	d135      	bne.n	800d59a <_vfiprintf_r+0x1ce>
 800d52e:	9b03      	ldr	r3, [sp, #12]
 800d530:	1d1a      	adds	r2, r3, #4
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	9203      	str	r2, [sp, #12]
 800d536:	2b00      	cmp	r3, #0
 800d538:	bfb8      	it	lt
 800d53a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d53e:	3402      	adds	r4, #2
 800d540:	9305      	str	r3, [sp, #20]
 800d542:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d628 <_vfiprintf_r+0x25c>
 800d546:	7821      	ldrb	r1, [r4, #0]
 800d548:	2203      	movs	r2, #3
 800d54a:	4650      	mov	r0, sl
 800d54c:	f7f2 fe50 	bl	80001f0 <memchr>
 800d550:	b140      	cbz	r0, 800d564 <_vfiprintf_r+0x198>
 800d552:	2340      	movs	r3, #64	; 0x40
 800d554:	eba0 000a 	sub.w	r0, r0, sl
 800d558:	fa03 f000 	lsl.w	r0, r3, r0
 800d55c:	9b04      	ldr	r3, [sp, #16]
 800d55e:	4303      	orrs	r3, r0
 800d560:	3401      	adds	r4, #1
 800d562:	9304      	str	r3, [sp, #16]
 800d564:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d568:	482c      	ldr	r0, [pc, #176]	; (800d61c <_vfiprintf_r+0x250>)
 800d56a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d56e:	2206      	movs	r2, #6
 800d570:	f7f2 fe3e 	bl	80001f0 <memchr>
 800d574:	2800      	cmp	r0, #0
 800d576:	d03f      	beq.n	800d5f8 <_vfiprintf_r+0x22c>
 800d578:	4b29      	ldr	r3, [pc, #164]	; (800d620 <_vfiprintf_r+0x254>)
 800d57a:	bb1b      	cbnz	r3, 800d5c4 <_vfiprintf_r+0x1f8>
 800d57c:	9b03      	ldr	r3, [sp, #12]
 800d57e:	3307      	adds	r3, #7
 800d580:	f023 0307 	bic.w	r3, r3, #7
 800d584:	3308      	adds	r3, #8
 800d586:	9303      	str	r3, [sp, #12]
 800d588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d58a:	443b      	add	r3, r7
 800d58c:	9309      	str	r3, [sp, #36]	; 0x24
 800d58e:	e767      	b.n	800d460 <_vfiprintf_r+0x94>
 800d590:	fb0c 3202 	mla	r2, ip, r2, r3
 800d594:	460c      	mov	r4, r1
 800d596:	2001      	movs	r0, #1
 800d598:	e7a5      	b.n	800d4e6 <_vfiprintf_r+0x11a>
 800d59a:	2300      	movs	r3, #0
 800d59c:	3401      	adds	r4, #1
 800d59e:	9305      	str	r3, [sp, #20]
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	f04f 0c0a 	mov.w	ip, #10
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5ac:	3a30      	subs	r2, #48	; 0x30
 800d5ae:	2a09      	cmp	r2, #9
 800d5b0:	d903      	bls.n	800d5ba <_vfiprintf_r+0x1ee>
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d0c5      	beq.n	800d542 <_vfiprintf_r+0x176>
 800d5b6:	9105      	str	r1, [sp, #20]
 800d5b8:	e7c3      	b.n	800d542 <_vfiprintf_r+0x176>
 800d5ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5be:	4604      	mov	r4, r0
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	e7f0      	b.n	800d5a6 <_vfiprintf_r+0x1da>
 800d5c4:	ab03      	add	r3, sp, #12
 800d5c6:	9300      	str	r3, [sp, #0]
 800d5c8:	462a      	mov	r2, r5
 800d5ca:	4b16      	ldr	r3, [pc, #88]	; (800d624 <_vfiprintf_r+0x258>)
 800d5cc:	a904      	add	r1, sp, #16
 800d5ce:	4630      	mov	r0, r6
 800d5d0:	f7fd fdd8 	bl	800b184 <_printf_float>
 800d5d4:	4607      	mov	r7, r0
 800d5d6:	1c78      	adds	r0, r7, #1
 800d5d8:	d1d6      	bne.n	800d588 <_vfiprintf_r+0x1bc>
 800d5da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5dc:	07d9      	lsls	r1, r3, #31
 800d5de:	d405      	bmi.n	800d5ec <_vfiprintf_r+0x220>
 800d5e0:	89ab      	ldrh	r3, [r5, #12]
 800d5e2:	059a      	lsls	r2, r3, #22
 800d5e4:	d402      	bmi.n	800d5ec <_vfiprintf_r+0x220>
 800d5e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5e8:	f000 faaf 	bl	800db4a <__retarget_lock_release_recursive>
 800d5ec:	89ab      	ldrh	r3, [r5, #12]
 800d5ee:	065b      	lsls	r3, r3, #25
 800d5f0:	f53f af12 	bmi.w	800d418 <_vfiprintf_r+0x4c>
 800d5f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5f6:	e711      	b.n	800d41c <_vfiprintf_r+0x50>
 800d5f8:	ab03      	add	r3, sp, #12
 800d5fa:	9300      	str	r3, [sp, #0]
 800d5fc:	462a      	mov	r2, r5
 800d5fe:	4b09      	ldr	r3, [pc, #36]	; (800d624 <_vfiprintf_r+0x258>)
 800d600:	a904      	add	r1, sp, #16
 800d602:	4630      	mov	r0, r6
 800d604:	f7fe f862 	bl	800b6cc <_printf_i>
 800d608:	e7e4      	b.n	800d5d4 <_vfiprintf_r+0x208>
 800d60a:	bf00      	nop
 800d60c:	0800e7bc 	.word	0x0800e7bc
 800d610:	0800e7dc 	.word	0x0800e7dc
 800d614:	0800e79c 	.word	0x0800e79c
 800d618:	0800e644 	.word	0x0800e644
 800d61c:	0800e64e 	.word	0x0800e64e
 800d620:	0800b185 	.word	0x0800b185
 800d624:	0800d3a9 	.word	0x0800d3a9
 800d628:	0800e64a 	.word	0x0800e64a

0800d62c <__swbuf_r>:
 800d62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d62e:	460e      	mov	r6, r1
 800d630:	4614      	mov	r4, r2
 800d632:	4605      	mov	r5, r0
 800d634:	b118      	cbz	r0, 800d63e <__swbuf_r+0x12>
 800d636:	6983      	ldr	r3, [r0, #24]
 800d638:	b90b      	cbnz	r3, 800d63e <__swbuf_r+0x12>
 800d63a:	f000 f9e7 	bl	800da0c <__sinit>
 800d63e:	4b21      	ldr	r3, [pc, #132]	; (800d6c4 <__swbuf_r+0x98>)
 800d640:	429c      	cmp	r4, r3
 800d642:	d12b      	bne.n	800d69c <__swbuf_r+0x70>
 800d644:	686c      	ldr	r4, [r5, #4]
 800d646:	69a3      	ldr	r3, [r4, #24]
 800d648:	60a3      	str	r3, [r4, #8]
 800d64a:	89a3      	ldrh	r3, [r4, #12]
 800d64c:	071a      	lsls	r2, r3, #28
 800d64e:	d52f      	bpl.n	800d6b0 <__swbuf_r+0x84>
 800d650:	6923      	ldr	r3, [r4, #16]
 800d652:	b36b      	cbz	r3, 800d6b0 <__swbuf_r+0x84>
 800d654:	6923      	ldr	r3, [r4, #16]
 800d656:	6820      	ldr	r0, [r4, #0]
 800d658:	1ac0      	subs	r0, r0, r3
 800d65a:	6963      	ldr	r3, [r4, #20]
 800d65c:	b2f6      	uxtb	r6, r6
 800d65e:	4283      	cmp	r3, r0
 800d660:	4637      	mov	r7, r6
 800d662:	dc04      	bgt.n	800d66e <__swbuf_r+0x42>
 800d664:	4621      	mov	r1, r4
 800d666:	4628      	mov	r0, r5
 800d668:	f000 f93c 	bl	800d8e4 <_fflush_r>
 800d66c:	bb30      	cbnz	r0, 800d6bc <__swbuf_r+0x90>
 800d66e:	68a3      	ldr	r3, [r4, #8]
 800d670:	3b01      	subs	r3, #1
 800d672:	60a3      	str	r3, [r4, #8]
 800d674:	6823      	ldr	r3, [r4, #0]
 800d676:	1c5a      	adds	r2, r3, #1
 800d678:	6022      	str	r2, [r4, #0]
 800d67a:	701e      	strb	r6, [r3, #0]
 800d67c:	6963      	ldr	r3, [r4, #20]
 800d67e:	3001      	adds	r0, #1
 800d680:	4283      	cmp	r3, r0
 800d682:	d004      	beq.n	800d68e <__swbuf_r+0x62>
 800d684:	89a3      	ldrh	r3, [r4, #12]
 800d686:	07db      	lsls	r3, r3, #31
 800d688:	d506      	bpl.n	800d698 <__swbuf_r+0x6c>
 800d68a:	2e0a      	cmp	r6, #10
 800d68c:	d104      	bne.n	800d698 <__swbuf_r+0x6c>
 800d68e:	4621      	mov	r1, r4
 800d690:	4628      	mov	r0, r5
 800d692:	f000 f927 	bl	800d8e4 <_fflush_r>
 800d696:	b988      	cbnz	r0, 800d6bc <__swbuf_r+0x90>
 800d698:	4638      	mov	r0, r7
 800d69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d69c:	4b0a      	ldr	r3, [pc, #40]	; (800d6c8 <__swbuf_r+0x9c>)
 800d69e:	429c      	cmp	r4, r3
 800d6a0:	d101      	bne.n	800d6a6 <__swbuf_r+0x7a>
 800d6a2:	68ac      	ldr	r4, [r5, #8]
 800d6a4:	e7cf      	b.n	800d646 <__swbuf_r+0x1a>
 800d6a6:	4b09      	ldr	r3, [pc, #36]	; (800d6cc <__swbuf_r+0xa0>)
 800d6a8:	429c      	cmp	r4, r3
 800d6aa:	bf08      	it	eq
 800d6ac:	68ec      	ldreq	r4, [r5, #12]
 800d6ae:	e7ca      	b.n	800d646 <__swbuf_r+0x1a>
 800d6b0:	4621      	mov	r1, r4
 800d6b2:	4628      	mov	r0, r5
 800d6b4:	f000 f81a 	bl	800d6ec <__swsetup_r>
 800d6b8:	2800      	cmp	r0, #0
 800d6ba:	d0cb      	beq.n	800d654 <__swbuf_r+0x28>
 800d6bc:	f04f 37ff 	mov.w	r7, #4294967295
 800d6c0:	e7ea      	b.n	800d698 <__swbuf_r+0x6c>
 800d6c2:	bf00      	nop
 800d6c4:	0800e7bc 	.word	0x0800e7bc
 800d6c8:	0800e7dc 	.word	0x0800e7dc
 800d6cc:	0800e79c 	.word	0x0800e79c

0800d6d0 <__ascii_wctomb>:
 800d6d0:	b149      	cbz	r1, 800d6e6 <__ascii_wctomb+0x16>
 800d6d2:	2aff      	cmp	r2, #255	; 0xff
 800d6d4:	bf85      	ittet	hi
 800d6d6:	238a      	movhi	r3, #138	; 0x8a
 800d6d8:	6003      	strhi	r3, [r0, #0]
 800d6da:	700a      	strbls	r2, [r1, #0]
 800d6dc:	f04f 30ff 	movhi.w	r0, #4294967295
 800d6e0:	bf98      	it	ls
 800d6e2:	2001      	movls	r0, #1
 800d6e4:	4770      	bx	lr
 800d6e6:	4608      	mov	r0, r1
 800d6e8:	4770      	bx	lr
	...

0800d6ec <__swsetup_r>:
 800d6ec:	4b32      	ldr	r3, [pc, #200]	; (800d7b8 <__swsetup_r+0xcc>)
 800d6ee:	b570      	push	{r4, r5, r6, lr}
 800d6f0:	681d      	ldr	r5, [r3, #0]
 800d6f2:	4606      	mov	r6, r0
 800d6f4:	460c      	mov	r4, r1
 800d6f6:	b125      	cbz	r5, 800d702 <__swsetup_r+0x16>
 800d6f8:	69ab      	ldr	r3, [r5, #24]
 800d6fa:	b913      	cbnz	r3, 800d702 <__swsetup_r+0x16>
 800d6fc:	4628      	mov	r0, r5
 800d6fe:	f000 f985 	bl	800da0c <__sinit>
 800d702:	4b2e      	ldr	r3, [pc, #184]	; (800d7bc <__swsetup_r+0xd0>)
 800d704:	429c      	cmp	r4, r3
 800d706:	d10f      	bne.n	800d728 <__swsetup_r+0x3c>
 800d708:	686c      	ldr	r4, [r5, #4]
 800d70a:	89a3      	ldrh	r3, [r4, #12]
 800d70c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d710:	0719      	lsls	r1, r3, #28
 800d712:	d42c      	bmi.n	800d76e <__swsetup_r+0x82>
 800d714:	06dd      	lsls	r5, r3, #27
 800d716:	d411      	bmi.n	800d73c <__swsetup_r+0x50>
 800d718:	2309      	movs	r3, #9
 800d71a:	6033      	str	r3, [r6, #0]
 800d71c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d720:	81a3      	strh	r3, [r4, #12]
 800d722:	f04f 30ff 	mov.w	r0, #4294967295
 800d726:	e03e      	b.n	800d7a6 <__swsetup_r+0xba>
 800d728:	4b25      	ldr	r3, [pc, #148]	; (800d7c0 <__swsetup_r+0xd4>)
 800d72a:	429c      	cmp	r4, r3
 800d72c:	d101      	bne.n	800d732 <__swsetup_r+0x46>
 800d72e:	68ac      	ldr	r4, [r5, #8]
 800d730:	e7eb      	b.n	800d70a <__swsetup_r+0x1e>
 800d732:	4b24      	ldr	r3, [pc, #144]	; (800d7c4 <__swsetup_r+0xd8>)
 800d734:	429c      	cmp	r4, r3
 800d736:	bf08      	it	eq
 800d738:	68ec      	ldreq	r4, [r5, #12]
 800d73a:	e7e6      	b.n	800d70a <__swsetup_r+0x1e>
 800d73c:	0758      	lsls	r0, r3, #29
 800d73e:	d512      	bpl.n	800d766 <__swsetup_r+0x7a>
 800d740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d742:	b141      	cbz	r1, 800d756 <__swsetup_r+0x6a>
 800d744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d748:	4299      	cmp	r1, r3
 800d74a:	d002      	beq.n	800d752 <__swsetup_r+0x66>
 800d74c:	4630      	mov	r0, r6
 800d74e:	f7ff fb31 	bl	800cdb4 <_free_r>
 800d752:	2300      	movs	r3, #0
 800d754:	6363      	str	r3, [r4, #52]	; 0x34
 800d756:	89a3      	ldrh	r3, [r4, #12]
 800d758:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d75c:	81a3      	strh	r3, [r4, #12]
 800d75e:	2300      	movs	r3, #0
 800d760:	6063      	str	r3, [r4, #4]
 800d762:	6923      	ldr	r3, [r4, #16]
 800d764:	6023      	str	r3, [r4, #0]
 800d766:	89a3      	ldrh	r3, [r4, #12]
 800d768:	f043 0308 	orr.w	r3, r3, #8
 800d76c:	81a3      	strh	r3, [r4, #12]
 800d76e:	6923      	ldr	r3, [r4, #16]
 800d770:	b94b      	cbnz	r3, 800d786 <__swsetup_r+0x9a>
 800d772:	89a3      	ldrh	r3, [r4, #12]
 800d774:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d77c:	d003      	beq.n	800d786 <__swsetup_r+0x9a>
 800d77e:	4621      	mov	r1, r4
 800d780:	4630      	mov	r0, r6
 800d782:	f000 fa09 	bl	800db98 <__smakebuf_r>
 800d786:	89a0      	ldrh	r0, [r4, #12]
 800d788:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d78c:	f010 0301 	ands.w	r3, r0, #1
 800d790:	d00a      	beq.n	800d7a8 <__swsetup_r+0xbc>
 800d792:	2300      	movs	r3, #0
 800d794:	60a3      	str	r3, [r4, #8]
 800d796:	6963      	ldr	r3, [r4, #20]
 800d798:	425b      	negs	r3, r3
 800d79a:	61a3      	str	r3, [r4, #24]
 800d79c:	6923      	ldr	r3, [r4, #16]
 800d79e:	b943      	cbnz	r3, 800d7b2 <__swsetup_r+0xc6>
 800d7a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d7a4:	d1ba      	bne.n	800d71c <__swsetup_r+0x30>
 800d7a6:	bd70      	pop	{r4, r5, r6, pc}
 800d7a8:	0781      	lsls	r1, r0, #30
 800d7aa:	bf58      	it	pl
 800d7ac:	6963      	ldrpl	r3, [r4, #20]
 800d7ae:	60a3      	str	r3, [r4, #8]
 800d7b0:	e7f4      	b.n	800d79c <__swsetup_r+0xb0>
 800d7b2:	2000      	movs	r0, #0
 800d7b4:	e7f7      	b.n	800d7a6 <__swsetup_r+0xba>
 800d7b6:	bf00      	nop
 800d7b8:	20000110 	.word	0x20000110
 800d7bc:	0800e7bc 	.word	0x0800e7bc
 800d7c0:	0800e7dc 	.word	0x0800e7dc
 800d7c4:	0800e79c 	.word	0x0800e79c

0800d7c8 <abort>:
 800d7c8:	b508      	push	{r3, lr}
 800d7ca:	2006      	movs	r0, #6
 800d7cc:	f000 fa54 	bl	800dc78 <raise>
 800d7d0:	2001      	movs	r0, #1
 800d7d2:	f7f4 fa89 	bl	8001ce8 <_exit>
	...

0800d7d8 <__sflush_r>:
 800d7d8:	898a      	ldrh	r2, [r1, #12]
 800d7da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7de:	4605      	mov	r5, r0
 800d7e0:	0710      	lsls	r0, r2, #28
 800d7e2:	460c      	mov	r4, r1
 800d7e4:	d458      	bmi.n	800d898 <__sflush_r+0xc0>
 800d7e6:	684b      	ldr	r3, [r1, #4]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	dc05      	bgt.n	800d7f8 <__sflush_r+0x20>
 800d7ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	dc02      	bgt.n	800d7f8 <__sflush_r+0x20>
 800d7f2:	2000      	movs	r0, #0
 800d7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d7fa:	2e00      	cmp	r6, #0
 800d7fc:	d0f9      	beq.n	800d7f2 <__sflush_r+0x1a>
 800d7fe:	2300      	movs	r3, #0
 800d800:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d804:	682f      	ldr	r7, [r5, #0]
 800d806:	602b      	str	r3, [r5, #0]
 800d808:	d032      	beq.n	800d870 <__sflush_r+0x98>
 800d80a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d80c:	89a3      	ldrh	r3, [r4, #12]
 800d80e:	075a      	lsls	r2, r3, #29
 800d810:	d505      	bpl.n	800d81e <__sflush_r+0x46>
 800d812:	6863      	ldr	r3, [r4, #4]
 800d814:	1ac0      	subs	r0, r0, r3
 800d816:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d818:	b10b      	cbz	r3, 800d81e <__sflush_r+0x46>
 800d81a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d81c:	1ac0      	subs	r0, r0, r3
 800d81e:	2300      	movs	r3, #0
 800d820:	4602      	mov	r2, r0
 800d822:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d824:	6a21      	ldr	r1, [r4, #32]
 800d826:	4628      	mov	r0, r5
 800d828:	47b0      	blx	r6
 800d82a:	1c43      	adds	r3, r0, #1
 800d82c:	89a3      	ldrh	r3, [r4, #12]
 800d82e:	d106      	bne.n	800d83e <__sflush_r+0x66>
 800d830:	6829      	ldr	r1, [r5, #0]
 800d832:	291d      	cmp	r1, #29
 800d834:	d82c      	bhi.n	800d890 <__sflush_r+0xb8>
 800d836:	4a2a      	ldr	r2, [pc, #168]	; (800d8e0 <__sflush_r+0x108>)
 800d838:	40ca      	lsrs	r2, r1
 800d83a:	07d6      	lsls	r6, r2, #31
 800d83c:	d528      	bpl.n	800d890 <__sflush_r+0xb8>
 800d83e:	2200      	movs	r2, #0
 800d840:	6062      	str	r2, [r4, #4]
 800d842:	04d9      	lsls	r1, r3, #19
 800d844:	6922      	ldr	r2, [r4, #16]
 800d846:	6022      	str	r2, [r4, #0]
 800d848:	d504      	bpl.n	800d854 <__sflush_r+0x7c>
 800d84a:	1c42      	adds	r2, r0, #1
 800d84c:	d101      	bne.n	800d852 <__sflush_r+0x7a>
 800d84e:	682b      	ldr	r3, [r5, #0]
 800d850:	b903      	cbnz	r3, 800d854 <__sflush_r+0x7c>
 800d852:	6560      	str	r0, [r4, #84]	; 0x54
 800d854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d856:	602f      	str	r7, [r5, #0]
 800d858:	2900      	cmp	r1, #0
 800d85a:	d0ca      	beq.n	800d7f2 <__sflush_r+0x1a>
 800d85c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d860:	4299      	cmp	r1, r3
 800d862:	d002      	beq.n	800d86a <__sflush_r+0x92>
 800d864:	4628      	mov	r0, r5
 800d866:	f7ff faa5 	bl	800cdb4 <_free_r>
 800d86a:	2000      	movs	r0, #0
 800d86c:	6360      	str	r0, [r4, #52]	; 0x34
 800d86e:	e7c1      	b.n	800d7f4 <__sflush_r+0x1c>
 800d870:	6a21      	ldr	r1, [r4, #32]
 800d872:	2301      	movs	r3, #1
 800d874:	4628      	mov	r0, r5
 800d876:	47b0      	blx	r6
 800d878:	1c41      	adds	r1, r0, #1
 800d87a:	d1c7      	bne.n	800d80c <__sflush_r+0x34>
 800d87c:	682b      	ldr	r3, [r5, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d0c4      	beq.n	800d80c <__sflush_r+0x34>
 800d882:	2b1d      	cmp	r3, #29
 800d884:	d001      	beq.n	800d88a <__sflush_r+0xb2>
 800d886:	2b16      	cmp	r3, #22
 800d888:	d101      	bne.n	800d88e <__sflush_r+0xb6>
 800d88a:	602f      	str	r7, [r5, #0]
 800d88c:	e7b1      	b.n	800d7f2 <__sflush_r+0x1a>
 800d88e:	89a3      	ldrh	r3, [r4, #12]
 800d890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d894:	81a3      	strh	r3, [r4, #12]
 800d896:	e7ad      	b.n	800d7f4 <__sflush_r+0x1c>
 800d898:	690f      	ldr	r7, [r1, #16]
 800d89a:	2f00      	cmp	r7, #0
 800d89c:	d0a9      	beq.n	800d7f2 <__sflush_r+0x1a>
 800d89e:	0793      	lsls	r3, r2, #30
 800d8a0:	680e      	ldr	r6, [r1, #0]
 800d8a2:	bf08      	it	eq
 800d8a4:	694b      	ldreq	r3, [r1, #20]
 800d8a6:	600f      	str	r7, [r1, #0]
 800d8a8:	bf18      	it	ne
 800d8aa:	2300      	movne	r3, #0
 800d8ac:	eba6 0807 	sub.w	r8, r6, r7
 800d8b0:	608b      	str	r3, [r1, #8]
 800d8b2:	f1b8 0f00 	cmp.w	r8, #0
 800d8b6:	dd9c      	ble.n	800d7f2 <__sflush_r+0x1a>
 800d8b8:	6a21      	ldr	r1, [r4, #32]
 800d8ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d8bc:	4643      	mov	r3, r8
 800d8be:	463a      	mov	r2, r7
 800d8c0:	4628      	mov	r0, r5
 800d8c2:	47b0      	blx	r6
 800d8c4:	2800      	cmp	r0, #0
 800d8c6:	dc06      	bgt.n	800d8d6 <__sflush_r+0xfe>
 800d8c8:	89a3      	ldrh	r3, [r4, #12]
 800d8ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8ce:	81a3      	strh	r3, [r4, #12]
 800d8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8d4:	e78e      	b.n	800d7f4 <__sflush_r+0x1c>
 800d8d6:	4407      	add	r7, r0
 800d8d8:	eba8 0800 	sub.w	r8, r8, r0
 800d8dc:	e7e9      	b.n	800d8b2 <__sflush_r+0xda>
 800d8de:	bf00      	nop
 800d8e0:	20400001 	.word	0x20400001

0800d8e4 <_fflush_r>:
 800d8e4:	b538      	push	{r3, r4, r5, lr}
 800d8e6:	690b      	ldr	r3, [r1, #16]
 800d8e8:	4605      	mov	r5, r0
 800d8ea:	460c      	mov	r4, r1
 800d8ec:	b913      	cbnz	r3, 800d8f4 <_fflush_r+0x10>
 800d8ee:	2500      	movs	r5, #0
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	bd38      	pop	{r3, r4, r5, pc}
 800d8f4:	b118      	cbz	r0, 800d8fe <_fflush_r+0x1a>
 800d8f6:	6983      	ldr	r3, [r0, #24]
 800d8f8:	b90b      	cbnz	r3, 800d8fe <_fflush_r+0x1a>
 800d8fa:	f000 f887 	bl	800da0c <__sinit>
 800d8fe:	4b14      	ldr	r3, [pc, #80]	; (800d950 <_fflush_r+0x6c>)
 800d900:	429c      	cmp	r4, r3
 800d902:	d11b      	bne.n	800d93c <_fflush_r+0x58>
 800d904:	686c      	ldr	r4, [r5, #4]
 800d906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d0ef      	beq.n	800d8ee <_fflush_r+0xa>
 800d90e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d910:	07d0      	lsls	r0, r2, #31
 800d912:	d404      	bmi.n	800d91e <_fflush_r+0x3a>
 800d914:	0599      	lsls	r1, r3, #22
 800d916:	d402      	bmi.n	800d91e <_fflush_r+0x3a>
 800d918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d91a:	f000 f915 	bl	800db48 <__retarget_lock_acquire_recursive>
 800d91e:	4628      	mov	r0, r5
 800d920:	4621      	mov	r1, r4
 800d922:	f7ff ff59 	bl	800d7d8 <__sflush_r>
 800d926:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d928:	07da      	lsls	r2, r3, #31
 800d92a:	4605      	mov	r5, r0
 800d92c:	d4e0      	bmi.n	800d8f0 <_fflush_r+0xc>
 800d92e:	89a3      	ldrh	r3, [r4, #12]
 800d930:	059b      	lsls	r3, r3, #22
 800d932:	d4dd      	bmi.n	800d8f0 <_fflush_r+0xc>
 800d934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d936:	f000 f908 	bl	800db4a <__retarget_lock_release_recursive>
 800d93a:	e7d9      	b.n	800d8f0 <_fflush_r+0xc>
 800d93c:	4b05      	ldr	r3, [pc, #20]	; (800d954 <_fflush_r+0x70>)
 800d93e:	429c      	cmp	r4, r3
 800d940:	d101      	bne.n	800d946 <_fflush_r+0x62>
 800d942:	68ac      	ldr	r4, [r5, #8]
 800d944:	e7df      	b.n	800d906 <_fflush_r+0x22>
 800d946:	4b04      	ldr	r3, [pc, #16]	; (800d958 <_fflush_r+0x74>)
 800d948:	429c      	cmp	r4, r3
 800d94a:	bf08      	it	eq
 800d94c:	68ec      	ldreq	r4, [r5, #12]
 800d94e:	e7da      	b.n	800d906 <_fflush_r+0x22>
 800d950:	0800e7bc 	.word	0x0800e7bc
 800d954:	0800e7dc 	.word	0x0800e7dc
 800d958:	0800e79c 	.word	0x0800e79c

0800d95c <std>:
 800d95c:	2300      	movs	r3, #0
 800d95e:	b510      	push	{r4, lr}
 800d960:	4604      	mov	r4, r0
 800d962:	e9c0 3300 	strd	r3, r3, [r0]
 800d966:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d96a:	6083      	str	r3, [r0, #8]
 800d96c:	8181      	strh	r1, [r0, #12]
 800d96e:	6643      	str	r3, [r0, #100]	; 0x64
 800d970:	81c2      	strh	r2, [r0, #14]
 800d972:	6183      	str	r3, [r0, #24]
 800d974:	4619      	mov	r1, r3
 800d976:	2208      	movs	r2, #8
 800d978:	305c      	adds	r0, #92	; 0x5c
 800d97a:	f7fd fb5b 	bl	800b034 <memset>
 800d97e:	4b05      	ldr	r3, [pc, #20]	; (800d994 <std+0x38>)
 800d980:	6263      	str	r3, [r4, #36]	; 0x24
 800d982:	4b05      	ldr	r3, [pc, #20]	; (800d998 <std+0x3c>)
 800d984:	62a3      	str	r3, [r4, #40]	; 0x28
 800d986:	4b05      	ldr	r3, [pc, #20]	; (800d99c <std+0x40>)
 800d988:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d98a:	4b05      	ldr	r3, [pc, #20]	; (800d9a0 <std+0x44>)
 800d98c:	6224      	str	r4, [r4, #32]
 800d98e:	6323      	str	r3, [r4, #48]	; 0x30
 800d990:	bd10      	pop	{r4, pc}
 800d992:	bf00      	nop
 800d994:	0800dcb1 	.word	0x0800dcb1
 800d998:	0800dcd3 	.word	0x0800dcd3
 800d99c:	0800dd0b 	.word	0x0800dd0b
 800d9a0:	0800dd2f 	.word	0x0800dd2f

0800d9a4 <_cleanup_r>:
 800d9a4:	4901      	ldr	r1, [pc, #4]	; (800d9ac <_cleanup_r+0x8>)
 800d9a6:	f000 b8af 	b.w	800db08 <_fwalk_reent>
 800d9aa:	bf00      	nop
 800d9ac:	0800d8e5 	.word	0x0800d8e5

0800d9b0 <__sfmoreglue>:
 800d9b0:	b570      	push	{r4, r5, r6, lr}
 800d9b2:	2268      	movs	r2, #104	; 0x68
 800d9b4:	1e4d      	subs	r5, r1, #1
 800d9b6:	4355      	muls	r5, r2
 800d9b8:	460e      	mov	r6, r1
 800d9ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d9be:	f7ff fa65 	bl	800ce8c <_malloc_r>
 800d9c2:	4604      	mov	r4, r0
 800d9c4:	b140      	cbz	r0, 800d9d8 <__sfmoreglue+0x28>
 800d9c6:	2100      	movs	r1, #0
 800d9c8:	e9c0 1600 	strd	r1, r6, [r0]
 800d9cc:	300c      	adds	r0, #12
 800d9ce:	60a0      	str	r0, [r4, #8]
 800d9d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d9d4:	f7fd fb2e 	bl	800b034 <memset>
 800d9d8:	4620      	mov	r0, r4
 800d9da:	bd70      	pop	{r4, r5, r6, pc}

0800d9dc <__sfp_lock_acquire>:
 800d9dc:	4801      	ldr	r0, [pc, #4]	; (800d9e4 <__sfp_lock_acquire+0x8>)
 800d9de:	f000 b8b3 	b.w	800db48 <__retarget_lock_acquire_recursive>
 800d9e2:	bf00      	nop
 800d9e4:	20002149 	.word	0x20002149

0800d9e8 <__sfp_lock_release>:
 800d9e8:	4801      	ldr	r0, [pc, #4]	; (800d9f0 <__sfp_lock_release+0x8>)
 800d9ea:	f000 b8ae 	b.w	800db4a <__retarget_lock_release_recursive>
 800d9ee:	bf00      	nop
 800d9f0:	20002149 	.word	0x20002149

0800d9f4 <__sinit_lock_acquire>:
 800d9f4:	4801      	ldr	r0, [pc, #4]	; (800d9fc <__sinit_lock_acquire+0x8>)
 800d9f6:	f000 b8a7 	b.w	800db48 <__retarget_lock_acquire_recursive>
 800d9fa:	bf00      	nop
 800d9fc:	2000214a 	.word	0x2000214a

0800da00 <__sinit_lock_release>:
 800da00:	4801      	ldr	r0, [pc, #4]	; (800da08 <__sinit_lock_release+0x8>)
 800da02:	f000 b8a2 	b.w	800db4a <__retarget_lock_release_recursive>
 800da06:	bf00      	nop
 800da08:	2000214a 	.word	0x2000214a

0800da0c <__sinit>:
 800da0c:	b510      	push	{r4, lr}
 800da0e:	4604      	mov	r4, r0
 800da10:	f7ff fff0 	bl	800d9f4 <__sinit_lock_acquire>
 800da14:	69a3      	ldr	r3, [r4, #24]
 800da16:	b11b      	cbz	r3, 800da20 <__sinit+0x14>
 800da18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da1c:	f7ff bff0 	b.w	800da00 <__sinit_lock_release>
 800da20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800da24:	6523      	str	r3, [r4, #80]	; 0x50
 800da26:	4b13      	ldr	r3, [pc, #76]	; (800da74 <__sinit+0x68>)
 800da28:	4a13      	ldr	r2, [pc, #76]	; (800da78 <__sinit+0x6c>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	62a2      	str	r2, [r4, #40]	; 0x28
 800da2e:	42a3      	cmp	r3, r4
 800da30:	bf04      	itt	eq
 800da32:	2301      	moveq	r3, #1
 800da34:	61a3      	streq	r3, [r4, #24]
 800da36:	4620      	mov	r0, r4
 800da38:	f000 f820 	bl	800da7c <__sfp>
 800da3c:	6060      	str	r0, [r4, #4]
 800da3e:	4620      	mov	r0, r4
 800da40:	f000 f81c 	bl	800da7c <__sfp>
 800da44:	60a0      	str	r0, [r4, #8]
 800da46:	4620      	mov	r0, r4
 800da48:	f000 f818 	bl	800da7c <__sfp>
 800da4c:	2200      	movs	r2, #0
 800da4e:	60e0      	str	r0, [r4, #12]
 800da50:	2104      	movs	r1, #4
 800da52:	6860      	ldr	r0, [r4, #4]
 800da54:	f7ff ff82 	bl	800d95c <std>
 800da58:	68a0      	ldr	r0, [r4, #8]
 800da5a:	2201      	movs	r2, #1
 800da5c:	2109      	movs	r1, #9
 800da5e:	f7ff ff7d 	bl	800d95c <std>
 800da62:	68e0      	ldr	r0, [r4, #12]
 800da64:	2202      	movs	r2, #2
 800da66:	2112      	movs	r1, #18
 800da68:	f7ff ff78 	bl	800d95c <std>
 800da6c:	2301      	movs	r3, #1
 800da6e:	61a3      	str	r3, [r4, #24]
 800da70:	e7d2      	b.n	800da18 <__sinit+0xc>
 800da72:	bf00      	nop
 800da74:	0800e424 	.word	0x0800e424
 800da78:	0800d9a5 	.word	0x0800d9a5

0800da7c <__sfp>:
 800da7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da7e:	4607      	mov	r7, r0
 800da80:	f7ff ffac 	bl	800d9dc <__sfp_lock_acquire>
 800da84:	4b1e      	ldr	r3, [pc, #120]	; (800db00 <__sfp+0x84>)
 800da86:	681e      	ldr	r6, [r3, #0]
 800da88:	69b3      	ldr	r3, [r6, #24]
 800da8a:	b913      	cbnz	r3, 800da92 <__sfp+0x16>
 800da8c:	4630      	mov	r0, r6
 800da8e:	f7ff ffbd 	bl	800da0c <__sinit>
 800da92:	3648      	adds	r6, #72	; 0x48
 800da94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800da98:	3b01      	subs	r3, #1
 800da9a:	d503      	bpl.n	800daa4 <__sfp+0x28>
 800da9c:	6833      	ldr	r3, [r6, #0]
 800da9e:	b30b      	cbz	r3, 800dae4 <__sfp+0x68>
 800daa0:	6836      	ldr	r6, [r6, #0]
 800daa2:	e7f7      	b.n	800da94 <__sfp+0x18>
 800daa4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800daa8:	b9d5      	cbnz	r5, 800dae0 <__sfp+0x64>
 800daaa:	4b16      	ldr	r3, [pc, #88]	; (800db04 <__sfp+0x88>)
 800daac:	60e3      	str	r3, [r4, #12]
 800daae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dab2:	6665      	str	r5, [r4, #100]	; 0x64
 800dab4:	f000 f847 	bl	800db46 <__retarget_lock_init_recursive>
 800dab8:	f7ff ff96 	bl	800d9e8 <__sfp_lock_release>
 800dabc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dac0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dac4:	6025      	str	r5, [r4, #0]
 800dac6:	61a5      	str	r5, [r4, #24]
 800dac8:	2208      	movs	r2, #8
 800daca:	4629      	mov	r1, r5
 800dacc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dad0:	f7fd fab0 	bl	800b034 <memset>
 800dad4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dad8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dadc:	4620      	mov	r0, r4
 800dade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dae0:	3468      	adds	r4, #104	; 0x68
 800dae2:	e7d9      	b.n	800da98 <__sfp+0x1c>
 800dae4:	2104      	movs	r1, #4
 800dae6:	4638      	mov	r0, r7
 800dae8:	f7ff ff62 	bl	800d9b0 <__sfmoreglue>
 800daec:	4604      	mov	r4, r0
 800daee:	6030      	str	r0, [r6, #0]
 800daf0:	2800      	cmp	r0, #0
 800daf2:	d1d5      	bne.n	800daa0 <__sfp+0x24>
 800daf4:	f7ff ff78 	bl	800d9e8 <__sfp_lock_release>
 800daf8:	230c      	movs	r3, #12
 800dafa:	603b      	str	r3, [r7, #0]
 800dafc:	e7ee      	b.n	800dadc <__sfp+0x60>
 800dafe:	bf00      	nop
 800db00:	0800e424 	.word	0x0800e424
 800db04:	ffff0001 	.word	0xffff0001

0800db08 <_fwalk_reent>:
 800db08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db0c:	4606      	mov	r6, r0
 800db0e:	4688      	mov	r8, r1
 800db10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800db14:	2700      	movs	r7, #0
 800db16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db1a:	f1b9 0901 	subs.w	r9, r9, #1
 800db1e:	d505      	bpl.n	800db2c <_fwalk_reent+0x24>
 800db20:	6824      	ldr	r4, [r4, #0]
 800db22:	2c00      	cmp	r4, #0
 800db24:	d1f7      	bne.n	800db16 <_fwalk_reent+0xe>
 800db26:	4638      	mov	r0, r7
 800db28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db2c:	89ab      	ldrh	r3, [r5, #12]
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d907      	bls.n	800db42 <_fwalk_reent+0x3a>
 800db32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db36:	3301      	adds	r3, #1
 800db38:	d003      	beq.n	800db42 <_fwalk_reent+0x3a>
 800db3a:	4629      	mov	r1, r5
 800db3c:	4630      	mov	r0, r6
 800db3e:	47c0      	blx	r8
 800db40:	4307      	orrs	r7, r0
 800db42:	3568      	adds	r5, #104	; 0x68
 800db44:	e7e9      	b.n	800db1a <_fwalk_reent+0x12>

0800db46 <__retarget_lock_init_recursive>:
 800db46:	4770      	bx	lr

0800db48 <__retarget_lock_acquire_recursive>:
 800db48:	4770      	bx	lr

0800db4a <__retarget_lock_release_recursive>:
 800db4a:	4770      	bx	lr

0800db4c <__swhatbuf_r>:
 800db4c:	b570      	push	{r4, r5, r6, lr}
 800db4e:	460e      	mov	r6, r1
 800db50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db54:	2900      	cmp	r1, #0
 800db56:	b096      	sub	sp, #88	; 0x58
 800db58:	4614      	mov	r4, r2
 800db5a:	461d      	mov	r5, r3
 800db5c:	da08      	bge.n	800db70 <__swhatbuf_r+0x24>
 800db5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800db62:	2200      	movs	r2, #0
 800db64:	602a      	str	r2, [r5, #0]
 800db66:	061a      	lsls	r2, r3, #24
 800db68:	d410      	bmi.n	800db8c <__swhatbuf_r+0x40>
 800db6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db6e:	e00e      	b.n	800db8e <__swhatbuf_r+0x42>
 800db70:	466a      	mov	r2, sp
 800db72:	f000 f903 	bl	800dd7c <_fstat_r>
 800db76:	2800      	cmp	r0, #0
 800db78:	dbf1      	blt.n	800db5e <__swhatbuf_r+0x12>
 800db7a:	9a01      	ldr	r2, [sp, #4]
 800db7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800db80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800db84:	425a      	negs	r2, r3
 800db86:	415a      	adcs	r2, r3
 800db88:	602a      	str	r2, [r5, #0]
 800db8a:	e7ee      	b.n	800db6a <__swhatbuf_r+0x1e>
 800db8c:	2340      	movs	r3, #64	; 0x40
 800db8e:	2000      	movs	r0, #0
 800db90:	6023      	str	r3, [r4, #0]
 800db92:	b016      	add	sp, #88	; 0x58
 800db94:	bd70      	pop	{r4, r5, r6, pc}
	...

0800db98 <__smakebuf_r>:
 800db98:	898b      	ldrh	r3, [r1, #12]
 800db9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db9c:	079d      	lsls	r5, r3, #30
 800db9e:	4606      	mov	r6, r0
 800dba0:	460c      	mov	r4, r1
 800dba2:	d507      	bpl.n	800dbb4 <__smakebuf_r+0x1c>
 800dba4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dba8:	6023      	str	r3, [r4, #0]
 800dbaa:	6123      	str	r3, [r4, #16]
 800dbac:	2301      	movs	r3, #1
 800dbae:	6163      	str	r3, [r4, #20]
 800dbb0:	b002      	add	sp, #8
 800dbb2:	bd70      	pop	{r4, r5, r6, pc}
 800dbb4:	ab01      	add	r3, sp, #4
 800dbb6:	466a      	mov	r2, sp
 800dbb8:	f7ff ffc8 	bl	800db4c <__swhatbuf_r>
 800dbbc:	9900      	ldr	r1, [sp, #0]
 800dbbe:	4605      	mov	r5, r0
 800dbc0:	4630      	mov	r0, r6
 800dbc2:	f7ff f963 	bl	800ce8c <_malloc_r>
 800dbc6:	b948      	cbnz	r0, 800dbdc <__smakebuf_r+0x44>
 800dbc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbcc:	059a      	lsls	r2, r3, #22
 800dbce:	d4ef      	bmi.n	800dbb0 <__smakebuf_r+0x18>
 800dbd0:	f023 0303 	bic.w	r3, r3, #3
 800dbd4:	f043 0302 	orr.w	r3, r3, #2
 800dbd8:	81a3      	strh	r3, [r4, #12]
 800dbda:	e7e3      	b.n	800dba4 <__smakebuf_r+0xc>
 800dbdc:	4b0d      	ldr	r3, [pc, #52]	; (800dc14 <__smakebuf_r+0x7c>)
 800dbde:	62b3      	str	r3, [r6, #40]	; 0x28
 800dbe0:	89a3      	ldrh	r3, [r4, #12]
 800dbe2:	6020      	str	r0, [r4, #0]
 800dbe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbe8:	81a3      	strh	r3, [r4, #12]
 800dbea:	9b00      	ldr	r3, [sp, #0]
 800dbec:	6163      	str	r3, [r4, #20]
 800dbee:	9b01      	ldr	r3, [sp, #4]
 800dbf0:	6120      	str	r0, [r4, #16]
 800dbf2:	b15b      	cbz	r3, 800dc0c <__smakebuf_r+0x74>
 800dbf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbf8:	4630      	mov	r0, r6
 800dbfa:	f000 f8d1 	bl	800dda0 <_isatty_r>
 800dbfe:	b128      	cbz	r0, 800dc0c <__smakebuf_r+0x74>
 800dc00:	89a3      	ldrh	r3, [r4, #12]
 800dc02:	f023 0303 	bic.w	r3, r3, #3
 800dc06:	f043 0301 	orr.w	r3, r3, #1
 800dc0a:	81a3      	strh	r3, [r4, #12]
 800dc0c:	89a0      	ldrh	r0, [r4, #12]
 800dc0e:	4305      	orrs	r5, r0
 800dc10:	81a5      	strh	r5, [r4, #12]
 800dc12:	e7cd      	b.n	800dbb0 <__smakebuf_r+0x18>
 800dc14:	0800d9a5 	.word	0x0800d9a5

0800dc18 <_malloc_usable_size_r>:
 800dc18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc1c:	1f18      	subs	r0, r3, #4
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	bfbc      	itt	lt
 800dc22:	580b      	ldrlt	r3, [r1, r0]
 800dc24:	18c0      	addlt	r0, r0, r3
 800dc26:	4770      	bx	lr

0800dc28 <_raise_r>:
 800dc28:	291f      	cmp	r1, #31
 800dc2a:	b538      	push	{r3, r4, r5, lr}
 800dc2c:	4604      	mov	r4, r0
 800dc2e:	460d      	mov	r5, r1
 800dc30:	d904      	bls.n	800dc3c <_raise_r+0x14>
 800dc32:	2316      	movs	r3, #22
 800dc34:	6003      	str	r3, [r0, #0]
 800dc36:	f04f 30ff 	mov.w	r0, #4294967295
 800dc3a:	bd38      	pop	{r3, r4, r5, pc}
 800dc3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dc3e:	b112      	cbz	r2, 800dc46 <_raise_r+0x1e>
 800dc40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc44:	b94b      	cbnz	r3, 800dc5a <_raise_r+0x32>
 800dc46:	4620      	mov	r0, r4
 800dc48:	f000 f830 	bl	800dcac <_getpid_r>
 800dc4c:	462a      	mov	r2, r5
 800dc4e:	4601      	mov	r1, r0
 800dc50:	4620      	mov	r0, r4
 800dc52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc56:	f000 b817 	b.w	800dc88 <_kill_r>
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d00a      	beq.n	800dc74 <_raise_r+0x4c>
 800dc5e:	1c59      	adds	r1, r3, #1
 800dc60:	d103      	bne.n	800dc6a <_raise_r+0x42>
 800dc62:	2316      	movs	r3, #22
 800dc64:	6003      	str	r3, [r0, #0]
 800dc66:	2001      	movs	r0, #1
 800dc68:	e7e7      	b.n	800dc3a <_raise_r+0x12>
 800dc6a:	2400      	movs	r4, #0
 800dc6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc70:	4628      	mov	r0, r5
 800dc72:	4798      	blx	r3
 800dc74:	2000      	movs	r0, #0
 800dc76:	e7e0      	b.n	800dc3a <_raise_r+0x12>

0800dc78 <raise>:
 800dc78:	4b02      	ldr	r3, [pc, #8]	; (800dc84 <raise+0xc>)
 800dc7a:	4601      	mov	r1, r0
 800dc7c:	6818      	ldr	r0, [r3, #0]
 800dc7e:	f7ff bfd3 	b.w	800dc28 <_raise_r>
 800dc82:	bf00      	nop
 800dc84:	20000110 	.word	0x20000110

0800dc88 <_kill_r>:
 800dc88:	b538      	push	{r3, r4, r5, lr}
 800dc8a:	4d07      	ldr	r5, [pc, #28]	; (800dca8 <_kill_r+0x20>)
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	4604      	mov	r4, r0
 800dc90:	4608      	mov	r0, r1
 800dc92:	4611      	mov	r1, r2
 800dc94:	602b      	str	r3, [r5, #0]
 800dc96:	f7f4 f817 	bl	8001cc8 <_kill>
 800dc9a:	1c43      	adds	r3, r0, #1
 800dc9c:	d102      	bne.n	800dca4 <_kill_r+0x1c>
 800dc9e:	682b      	ldr	r3, [r5, #0]
 800dca0:	b103      	cbz	r3, 800dca4 <_kill_r+0x1c>
 800dca2:	6023      	str	r3, [r4, #0]
 800dca4:	bd38      	pop	{r3, r4, r5, pc}
 800dca6:	bf00      	nop
 800dca8:	20002144 	.word	0x20002144

0800dcac <_getpid_r>:
 800dcac:	f7f4 b804 	b.w	8001cb8 <_getpid>

0800dcb0 <__sread>:
 800dcb0:	b510      	push	{r4, lr}
 800dcb2:	460c      	mov	r4, r1
 800dcb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcb8:	f000 f894 	bl	800dde4 <_read_r>
 800dcbc:	2800      	cmp	r0, #0
 800dcbe:	bfab      	itete	ge
 800dcc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dcc2:	89a3      	ldrhlt	r3, [r4, #12]
 800dcc4:	181b      	addge	r3, r3, r0
 800dcc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dcca:	bfac      	ite	ge
 800dccc:	6563      	strge	r3, [r4, #84]	; 0x54
 800dcce:	81a3      	strhlt	r3, [r4, #12]
 800dcd0:	bd10      	pop	{r4, pc}

0800dcd2 <__swrite>:
 800dcd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcd6:	461f      	mov	r7, r3
 800dcd8:	898b      	ldrh	r3, [r1, #12]
 800dcda:	05db      	lsls	r3, r3, #23
 800dcdc:	4605      	mov	r5, r0
 800dcde:	460c      	mov	r4, r1
 800dce0:	4616      	mov	r6, r2
 800dce2:	d505      	bpl.n	800dcf0 <__swrite+0x1e>
 800dce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dce8:	2302      	movs	r3, #2
 800dcea:	2200      	movs	r2, #0
 800dcec:	f000 f868 	bl	800ddc0 <_lseek_r>
 800dcf0:	89a3      	ldrh	r3, [r4, #12]
 800dcf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dcfa:	81a3      	strh	r3, [r4, #12]
 800dcfc:	4632      	mov	r2, r6
 800dcfe:	463b      	mov	r3, r7
 800dd00:	4628      	mov	r0, r5
 800dd02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd06:	f000 b817 	b.w	800dd38 <_write_r>

0800dd0a <__sseek>:
 800dd0a:	b510      	push	{r4, lr}
 800dd0c:	460c      	mov	r4, r1
 800dd0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd12:	f000 f855 	bl	800ddc0 <_lseek_r>
 800dd16:	1c43      	adds	r3, r0, #1
 800dd18:	89a3      	ldrh	r3, [r4, #12]
 800dd1a:	bf15      	itete	ne
 800dd1c:	6560      	strne	r0, [r4, #84]	; 0x54
 800dd1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dd22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dd26:	81a3      	strheq	r3, [r4, #12]
 800dd28:	bf18      	it	ne
 800dd2a:	81a3      	strhne	r3, [r4, #12]
 800dd2c:	bd10      	pop	{r4, pc}

0800dd2e <__sclose>:
 800dd2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd32:	f000 b813 	b.w	800dd5c <_close_r>
	...

0800dd38 <_write_r>:
 800dd38:	b538      	push	{r3, r4, r5, lr}
 800dd3a:	4d07      	ldr	r5, [pc, #28]	; (800dd58 <_write_r+0x20>)
 800dd3c:	4604      	mov	r4, r0
 800dd3e:	4608      	mov	r0, r1
 800dd40:	4611      	mov	r1, r2
 800dd42:	2200      	movs	r2, #0
 800dd44:	602a      	str	r2, [r5, #0]
 800dd46:	461a      	mov	r2, r3
 800dd48:	f7f3 fff5 	bl	8001d36 <_write>
 800dd4c:	1c43      	adds	r3, r0, #1
 800dd4e:	d102      	bne.n	800dd56 <_write_r+0x1e>
 800dd50:	682b      	ldr	r3, [r5, #0]
 800dd52:	b103      	cbz	r3, 800dd56 <_write_r+0x1e>
 800dd54:	6023      	str	r3, [r4, #0]
 800dd56:	bd38      	pop	{r3, r4, r5, pc}
 800dd58:	20002144 	.word	0x20002144

0800dd5c <_close_r>:
 800dd5c:	b538      	push	{r3, r4, r5, lr}
 800dd5e:	4d06      	ldr	r5, [pc, #24]	; (800dd78 <_close_r+0x1c>)
 800dd60:	2300      	movs	r3, #0
 800dd62:	4604      	mov	r4, r0
 800dd64:	4608      	mov	r0, r1
 800dd66:	602b      	str	r3, [r5, #0]
 800dd68:	f7f4 f801 	bl	8001d6e <_close>
 800dd6c:	1c43      	adds	r3, r0, #1
 800dd6e:	d102      	bne.n	800dd76 <_close_r+0x1a>
 800dd70:	682b      	ldr	r3, [r5, #0]
 800dd72:	b103      	cbz	r3, 800dd76 <_close_r+0x1a>
 800dd74:	6023      	str	r3, [r4, #0]
 800dd76:	bd38      	pop	{r3, r4, r5, pc}
 800dd78:	20002144 	.word	0x20002144

0800dd7c <_fstat_r>:
 800dd7c:	b538      	push	{r3, r4, r5, lr}
 800dd7e:	4d07      	ldr	r5, [pc, #28]	; (800dd9c <_fstat_r+0x20>)
 800dd80:	2300      	movs	r3, #0
 800dd82:	4604      	mov	r4, r0
 800dd84:	4608      	mov	r0, r1
 800dd86:	4611      	mov	r1, r2
 800dd88:	602b      	str	r3, [r5, #0]
 800dd8a:	f7f3 fffc 	bl	8001d86 <_fstat>
 800dd8e:	1c43      	adds	r3, r0, #1
 800dd90:	d102      	bne.n	800dd98 <_fstat_r+0x1c>
 800dd92:	682b      	ldr	r3, [r5, #0]
 800dd94:	b103      	cbz	r3, 800dd98 <_fstat_r+0x1c>
 800dd96:	6023      	str	r3, [r4, #0]
 800dd98:	bd38      	pop	{r3, r4, r5, pc}
 800dd9a:	bf00      	nop
 800dd9c:	20002144 	.word	0x20002144

0800dda0 <_isatty_r>:
 800dda0:	b538      	push	{r3, r4, r5, lr}
 800dda2:	4d06      	ldr	r5, [pc, #24]	; (800ddbc <_isatty_r+0x1c>)
 800dda4:	2300      	movs	r3, #0
 800dda6:	4604      	mov	r4, r0
 800dda8:	4608      	mov	r0, r1
 800ddaa:	602b      	str	r3, [r5, #0]
 800ddac:	f7f3 fffb 	bl	8001da6 <_isatty>
 800ddb0:	1c43      	adds	r3, r0, #1
 800ddb2:	d102      	bne.n	800ddba <_isatty_r+0x1a>
 800ddb4:	682b      	ldr	r3, [r5, #0]
 800ddb6:	b103      	cbz	r3, 800ddba <_isatty_r+0x1a>
 800ddb8:	6023      	str	r3, [r4, #0]
 800ddba:	bd38      	pop	{r3, r4, r5, pc}
 800ddbc:	20002144 	.word	0x20002144

0800ddc0 <_lseek_r>:
 800ddc0:	b538      	push	{r3, r4, r5, lr}
 800ddc2:	4d07      	ldr	r5, [pc, #28]	; (800dde0 <_lseek_r+0x20>)
 800ddc4:	4604      	mov	r4, r0
 800ddc6:	4608      	mov	r0, r1
 800ddc8:	4611      	mov	r1, r2
 800ddca:	2200      	movs	r2, #0
 800ddcc:	602a      	str	r2, [r5, #0]
 800ddce:	461a      	mov	r2, r3
 800ddd0:	f7f3 fff4 	bl	8001dbc <_lseek>
 800ddd4:	1c43      	adds	r3, r0, #1
 800ddd6:	d102      	bne.n	800ddde <_lseek_r+0x1e>
 800ddd8:	682b      	ldr	r3, [r5, #0]
 800ddda:	b103      	cbz	r3, 800ddde <_lseek_r+0x1e>
 800dddc:	6023      	str	r3, [r4, #0]
 800ddde:	bd38      	pop	{r3, r4, r5, pc}
 800dde0:	20002144 	.word	0x20002144

0800dde4 <_read_r>:
 800dde4:	b538      	push	{r3, r4, r5, lr}
 800dde6:	4d07      	ldr	r5, [pc, #28]	; (800de04 <_read_r+0x20>)
 800dde8:	4604      	mov	r4, r0
 800ddea:	4608      	mov	r0, r1
 800ddec:	4611      	mov	r1, r2
 800ddee:	2200      	movs	r2, #0
 800ddf0:	602a      	str	r2, [r5, #0]
 800ddf2:	461a      	mov	r2, r3
 800ddf4:	f7f3 ff82 	bl	8001cfc <_read>
 800ddf8:	1c43      	adds	r3, r0, #1
 800ddfa:	d102      	bne.n	800de02 <_read_r+0x1e>
 800ddfc:	682b      	ldr	r3, [r5, #0]
 800ddfe:	b103      	cbz	r3, 800de02 <_read_r+0x1e>
 800de00:	6023      	str	r3, [r4, #0]
 800de02:	bd38      	pop	{r3, r4, r5, pc}
 800de04:	20002144 	.word	0x20002144

0800de08 <atan2f>:
 800de08:	f000 b84c 	b.w	800dea4 <__ieee754_atan2f>

0800de0c <logf>:
 800de0c:	b508      	push	{r3, lr}
 800de0e:	ed2d 8b02 	vpush	{d8}
 800de12:	eeb0 8a40 	vmov.f32	s16, s0
 800de16:	f000 f8e5 	bl	800dfe4 <__ieee754_logf>
 800de1a:	eeb4 8a48 	vcmp.f32	s16, s16
 800de1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de22:	d60f      	bvs.n	800de44 <logf+0x38>
 800de24:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800de28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de2c:	dc0a      	bgt.n	800de44 <logf+0x38>
 800de2e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800de32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de36:	d108      	bne.n	800de4a <logf+0x3e>
 800de38:	f7fd f8d2 	bl	800afe0 <__errno>
 800de3c:	2322      	movs	r3, #34	; 0x22
 800de3e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800de60 <logf+0x54>
 800de42:	6003      	str	r3, [r0, #0]
 800de44:	ecbd 8b02 	vpop	{d8}
 800de48:	bd08      	pop	{r3, pc}
 800de4a:	f7fd f8c9 	bl	800afe0 <__errno>
 800de4e:	ecbd 8b02 	vpop	{d8}
 800de52:	2321      	movs	r3, #33	; 0x21
 800de54:	6003      	str	r3, [r0, #0]
 800de56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800de5a:	4802      	ldr	r0, [pc, #8]	; (800de64 <logf+0x58>)
 800de5c:	f000 ba92 	b.w	800e384 <nanf>
 800de60:	ff800000 	.word	0xff800000
 800de64:	0800e690 	.word	0x0800e690

0800de68 <sqrtf>:
 800de68:	b508      	push	{r3, lr}
 800de6a:	ed2d 8b02 	vpush	{d8}
 800de6e:	eeb0 8a40 	vmov.f32	s16, s0
 800de72:	f000 f9a7 	bl	800e1c4 <__ieee754_sqrtf>
 800de76:	eeb4 8a48 	vcmp.f32	s16, s16
 800de7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de7e:	d60c      	bvs.n	800de9a <sqrtf+0x32>
 800de80:	eddf 8a07 	vldr	s17, [pc, #28]	; 800dea0 <sqrtf+0x38>
 800de84:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800de88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de8c:	d505      	bpl.n	800de9a <sqrtf+0x32>
 800de8e:	f7fd f8a7 	bl	800afe0 <__errno>
 800de92:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800de96:	2321      	movs	r3, #33	; 0x21
 800de98:	6003      	str	r3, [r0, #0]
 800de9a:	ecbd 8b02 	vpop	{d8}
 800de9e:	bd08      	pop	{r3, pc}
 800dea0:	00000000 	.word	0x00000000

0800dea4 <__ieee754_atan2f>:
 800dea4:	ee10 2a90 	vmov	r2, s1
 800dea8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800deac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800deb0:	b510      	push	{r4, lr}
 800deb2:	eef0 7a40 	vmov.f32	s15, s0
 800deb6:	dc06      	bgt.n	800dec6 <__ieee754_atan2f+0x22>
 800deb8:	ee10 0a10 	vmov	r0, s0
 800debc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800dec0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dec4:	dd04      	ble.n	800ded0 <__ieee754_atan2f+0x2c>
 800dec6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800deca:	eeb0 0a67 	vmov.f32	s0, s15
 800dece:	bd10      	pop	{r4, pc}
 800ded0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800ded4:	d103      	bne.n	800dede <__ieee754_atan2f+0x3a>
 800ded6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800deda:	f000 b977 	b.w	800e1cc <atanf>
 800dede:	1794      	asrs	r4, r2, #30
 800dee0:	f004 0402 	and.w	r4, r4, #2
 800dee4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800dee8:	b943      	cbnz	r3, 800defc <__ieee754_atan2f+0x58>
 800deea:	2c02      	cmp	r4, #2
 800deec:	d05e      	beq.n	800dfac <__ieee754_atan2f+0x108>
 800deee:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800dfc0 <__ieee754_atan2f+0x11c>
 800def2:	2c03      	cmp	r4, #3
 800def4:	bf08      	it	eq
 800def6:	eef0 7a47 	vmoveq.f32	s15, s14
 800defa:	e7e6      	b.n	800deca <__ieee754_atan2f+0x26>
 800defc:	b941      	cbnz	r1, 800df10 <__ieee754_atan2f+0x6c>
 800defe:	eddf 7a31 	vldr	s15, [pc, #196]	; 800dfc4 <__ieee754_atan2f+0x120>
 800df02:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800dfc8 <__ieee754_atan2f+0x124>
 800df06:	2800      	cmp	r0, #0
 800df08:	bfb8      	it	lt
 800df0a:	eef0 7a40 	vmovlt.f32	s15, s0
 800df0e:	e7dc      	b.n	800deca <__ieee754_atan2f+0x26>
 800df10:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800df14:	d110      	bne.n	800df38 <__ieee754_atan2f+0x94>
 800df16:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800df1a:	f104 34ff 	add.w	r4, r4, #4294967295
 800df1e:	d107      	bne.n	800df30 <__ieee754_atan2f+0x8c>
 800df20:	2c02      	cmp	r4, #2
 800df22:	d846      	bhi.n	800dfb2 <__ieee754_atan2f+0x10e>
 800df24:	4b29      	ldr	r3, [pc, #164]	; (800dfcc <__ieee754_atan2f+0x128>)
 800df26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800df2a:	edd4 7a00 	vldr	s15, [r4]
 800df2e:	e7cc      	b.n	800deca <__ieee754_atan2f+0x26>
 800df30:	2c02      	cmp	r4, #2
 800df32:	d841      	bhi.n	800dfb8 <__ieee754_atan2f+0x114>
 800df34:	4b26      	ldr	r3, [pc, #152]	; (800dfd0 <__ieee754_atan2f+0x12c>)
 800df36:	e7f6      	b.n	800df26 <__ieee754_atan2f+0x82>
 800df38:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800df3c:	d0df      	beq.n	800defe <__ieee754_atan2f+0x5a>
 800df3e:	1a5b      	subs	r3, r3, r1
 800df40:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800df44:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800df48:	da1a      	bge.n	800df80 <__ieee754_atan2f+0xdc>
 800df4a:	2a00      	cmp	r2, #0
 800df4c:	da01      	bge.n	800df52 <__ieee754_atan2f+0xae>
 800df4e:	313c      	adds	r1, #60	; 0x3c
 800df50:	db19      	blt.n	800df86 <__ieee754_atan2f+0xe2>
 800df52:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800df56:	f000 fa0d 	bl	800e374 <fabsf>
 800df5a:	f000 f937 	bl	800e1cc <atanf>
 800df5e:	eef0 7a40 	vmov.f32	s15, s0
 800df62:	2c01      	cmp	r4, #1
 800df64:	d012      	beq.n	800df8c <__ieee754_atan2f+0xe8>
 800df66:	2c02      	cmp	r4, #2
 800df68:	d017      	beq.n	800df9a <__ieee754_atan2f+0xf6>
 800df6a:	2c00      	cmp	r4, #0
 800df6c:	d0ad      	beq.n	800deca <__ieee754_atan2f+0x26>
 800df6e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800dfd4 <__ieee754_atan2f+0x130>
 800df72:	ee77 7a80 	vadd.f32	s15, s15, s0
 800df76:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800dfd8 <__ieee754_atan2f+0x134>
 800df7a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800df7e:	e7a4      	b.n	800deca <__ieee754_atan2f+0x26>
 800df80:	eddf 7a10 	vldr	s15, [pc, #64]	; 800dfc4 <__ieee754_atan2f+0x120>
 800df84:	e7ed      	b.n	800df62 <__ieee754_atan2f+0xbe>
 800df86:	eddf 7a15 	vldr	s15, [pc, #84]	; 800dfdc <__ieee754_atan2f+0x138>
 800df8a:	e7ea      	b.n	800df62 <__ieee754_atan2f+0xbe>
 800df8c:	ee17 3a90 	vmov	r3, s15
 800df90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800df94:	ee07 3a90 	vmov	s15, r3
 800df98:	e797      	b.n	800deca <__ieee754_atan2f+0x26>
 800df9a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800dfd4 <__ieee754_atan2f+0x130>
 800df9e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800dfa2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800dfd8 <__ieee754_atan2f+0x134>
 800dfa6:	ee70 7a67 	vsub.f32	s15, s0, s15
 800dfaa:	e78e      	b.n	800deca <__ieee754_atan2f+0x26>
 800dfac:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800dfd8 <__ieee754_atan2f+0x134>
 800dfb0:	e78b      	b.n	800deca <__ieee754_atan2f+0x26>
 800dfb2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800dfe0 <__ieee754_atan2f+0x13c>
 800dfb6:	e788      	b.n	800deca <__ieee754_atan2f+0x26>
 800dfb8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800dfdc <__ieee754_atan2f+0x138>
 800dfbc:	e785      	b.n	800deca <__ieee754_atan2f+0x26>
 800dfbe:	bf00      	nop
 800dfc0:	c0490fdb 	.word	0xc0490fdb
 800dfc4:	3fc90fdb 	.word	0x3fc90fdb
 800dfc8:	bfc90fdb 	.word	0xbfc90fdb
 800dfcc:	0800e7fc 	.word	0x0800e7fc
 800dfd0:	0800e808 	.word	0x0800e808
 800dfd4:	33bbbd2e 	.word	0x33bbbd2e
 800dfd8:	40490fdb 	.word	0x40490fdb
 800dfdc:	00000000 	.word	0x00000000
 800dfe0:	3f490fdb 	.word	0x3f490fdb

0800dfe4 <__ieee754_logf>:
 800dfe4:	ee10 3a10 	vmov	r3, s0
 800dfe8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800dfec:	d106      	bne.n	800dffc <__ieee754_logf+0x18>
 800dfee:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800e184 <__ieee754_logf+0x1a0>
 800dff2:	eddf 7a65 	vldr	s15, [pc, #404]	; 800e188 <__ieee754_logf+0x1a4>
 800dff6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800dffa:	4770      	bx	lr
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	da02      	bge.n	800e006 <__ieee754_logf+0x22>
 800e000:	ee30 7a40 	vsub.f32	s14, s0, s0
 800e004:	e7f5      	b.n	800dff2 <__ieee754_logf+0xe>
 800e006:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e00a:	db02      	blt.n	800e012 <__ieee754_logf+0x2e>
 800e00c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e010:	4770      	bx	lr
 800e012:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e016:	bfb8      	it	lt
 800e018:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800e18c <__ieee754_logf+0x1a8>
 800e01c:	485c      	ldr	r0, [pc, #368]	; (800e190 <__ieee754_logf+0x1ac>)
 800e01e:	bfbe      	ittt	lt
 800e020:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800e024:	f06f 0118 	mvnlt.w	r1, #24
 800e028:	ee17 3a90 	vmovlt	r3, s15
 800e02c:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800e030:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e034:	4418      	add	r0, r3
 800e036:	bfa8      	it	ge
 800e038:	2100      	movge	r1, #0
 800e03a:	3a7f      	subs	r2, #127	; 0x7f
 800e03c:	440a      	add	r2, r1
 800e03e:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800e042:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800e046:	4319      	orrs	r1, r3
 800e048:	ee00 1a10 	vmov	s0, r1
 800e04c:	4951      	ldr	r1, [pc, #324]	; (800e194 <__ieee754_logf+0x1b0>)
 800e04e:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800e052:	f103 000f 	add.w	r0, r3, #15
 800e056:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e05a:	4001      	ands	r1, r0
 800e05c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e060:	bb89      	cbnz	r1, 800e0c6 <__ieee754_logf+0xe2>
 800e062:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e06a:	d10f      	bne.n	800e08c <__ieee754_logf+0xa8>
 800e06c:	2a00      	cmp	r2, #0
 800e06e:	f000 8085 	beq.w	800e17c <__ieee754_logf+0x198>
 800e072:	ee07 2a90 	vmov	s15, r2
 800e076:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800e198 <__ieee754_logf+0x1b4>
 800e07a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800e19c <__ieee754_logf+0x1b8>
 800e07e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e082:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e086:	eea7 0a87 	vfma.f32	s0, s15, s14
 800e08a:	4770      	bx	lr
 800e08c:	eddf 6a44 	vldr	s13, [pc, #272]	; 800e1a0 <__ieee754_logf+0x1bc>
 800e090:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e094:	eee0 7a66 	vfms.f32	s15, s0, s13
 800e098:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e09c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0a0:	b912      	cbnz	r2, 800e0a8 <__ieee754_logf+0xc4>
 800e0a2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e0a6:	4770      	bx	lr
 800e0a8:	ee07 2a90 	vmov	s15, r2
 800e0ac:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800e198 <__ieee754_logf+0x1b4>
 800e0b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e0b4:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800e0b8:	ee37 0a40 	vsub.f32	s0, s14, s0
 800e0bc:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800e19c <__ieee754_logf+0x1b8>
 800e0c0:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800e0c4:	4770      	bx	lr
 800e0c6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800e0ca:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e0ce:	eddf 5a35 	vldr	s11, [pc, #212]	; 800e1a4 <__ieee754_logf+0x1c0>
 800e0d2:	eddf 4a35 	vldr	s9, [pc, #212]	; 800e1a8 <__ieee754_logf+0x1c4>
 800e0d6:	4935      	ldr	r1, [pc, #212]	; (800e1ac <__ieee754_logf+0x1c8>)
 800e0d8:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800e0dc:	4419      	add	r1, r3
 800e0de:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800e0e2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e0e6:	430b      	orrs	r3, r1
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	ee07 2a90 	vmov	s15, r2
 800e0ee:	ee26 5a06 	vmul.f32	s10, s12, s12
 800e0f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e0f6:	ee25 7a05 	vmul.f32	s14, s10, s10
 800e0fa:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800e1b0 <__ieee754_logf+0x1cc>
 800e0fe:	eee7 7a25 	vfma.f32	s15, s14, s11
 800e102:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800e1b4 <__ieee754_logf+0x1d0>
 800e106:	eee7 5a87 	vfma.f32	s11, s15, s14
 800e10a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e1b8 <__ieee754_logf+0x1d4>
 800e10e:	eee7 7a24 	vfma.f32	s15, s14, s9
 800e112:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800e1bc <__ieee754_logf+0x1d8>
 800e116:	eee7 4a87 	vfma.f32	s9, s15, s14
 800e11a:	eddf 7a29 	vldr	s15, [pc, #164]	; 800e1c0 <__ieee754_logf+0x1dc>
 800e11e:	eee4 7a87 	vfma.f32	s15, s9, s14
 800e122:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e126:	eee5 7a87 	vfma.f32	s15, s11, s14
 800e12a:	dd1c      	ble.n	800e166 <__ieee754_logf+0x182>
 800e12c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e130:	ee20 7a07 	vmul.f32	s14, s0, s14
 800e134:	ee27 7a00 	vmul.f32	s14, s14, s0
 800e138:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e13c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e140:	b922      	cbnz	r2, 800e14c <__ieee754_logf+0x168>
 800e142:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e146:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e14a:	4770      	bx	lr
 800e14c:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800e198 <__ieee754_logf+0x1b4>
 800e150:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e154:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e158:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e15c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800e19c <__ieee754_logf+0x1b8>
 800e160:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800e164:	4770      	bx	lr
 800e166:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e16a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e16e:	2a00      	cmp	r2, #0
 800e170:	d0e9      	beq.n	800e146 <__ieee754_logf+0x162>
 800e172:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800e198 <__ieee754_logf+0x1b4>
 800e176:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e17a:	e7ed      	b.n	800e158 <__ieee754_logf+0x174>
 800e17c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800e188 <__ieee754_logf+0x1a4>
 800e180:	4770      	bx	lr
 800e182:	bf00      	nop
 800e184:	cc000000 	.word	0xcc000000
 800e188:	00000000 	.word	0x00000000
 800e18c:	4c000000 	.word	0x4c000000
 800e190:	004afb20 	.word	0x004afb20
 800e194:	007ffff0 	.word	0x007ffff0
 800e198:	3717f7d1 	.word	0x3717f7d1
 800e19c:	3f317180 	.word	0x3f317180
 800e1a0:	3eaaaaab 	.word	0x3eaaaaab
 800e1a4:	3e1cd04f 	.word	0x3e1cd04f
 800e1a8:	3e178897 	.word	0x3e178897
 800e1ac:	ffcf5c30 	.word	0xffcf5c30
 800e1b0:	3e638e29 	.word	0x3e638e29
 800e1b4:	3ecccccd 	.word	0x3ecccccd
 800e1b8:	3e3a3325 	.word	0x3e3a3325
 800e1bc:	3e924925 	.word	0x3e924925
 800e1c0:	3f2aaaab 	.word	0x3f2aaaab

0800e1c4 <__ieee754_sqrtf>:
 800e1c4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e1c8:	4770      	bx	lr
	...

0800e1cc <atanf>:
 800e1cc:	b538      	push	{r3, r4, r5, lr}
 800e1ce:	ee10 5a10 	vmov	r5, s0
 800e1d2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800e1d6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800e1da:	eef0 7a40 	vmov.f32	s15, s0
 800e1de:	db10      	blt.n	800e202 <atanf+0x36>
 800e1e0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800e1e4:	dd04      	ble.n	800e1f0 <atanf+0x24>
 800e1e6:	ee70 7a00 	vadd.f32	s15, s0, s0
 800e1ea:	eeb0 0a67 	vmov.f32	s0, s15
 800e1ee:	bd38      	pop	{r3, r4, r5, pc}
 800e1f0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800e328 <atanf+0x15c>
 800e1f4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800e32c <atanf+0x160>
 800e1f8:	2d00      	cmp	r5, #0
 800e1fa:	bfd8      	it	le
 800e1fc:	eef0 7a40 	vmovle.f32	s15, s0
 800e200:	e7f3      	b.n	800e1ea <atanf+0x1e>
 800e202:	4b4b      	ldr	r3, [pc, #300]	; (800e330 <atanf+0x164>)
 800e204:	429c      	cmp	r4, r3
 800e206:	dc10      	bgt.n	800e22a <atanf+0x5e>
 800e208:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800e20c:	da0a      	bge.n	800e224 <atanf+0x58>
 800e20e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800e334 <atanf+0x168>
 800e212:	ee30 7a07 	vadd.f32	s14, s0, s14
 800e216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e21a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800e21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e222:	dce2      	bgt.n	800e1ea <atanf+0x1e>
 800e224:	f04f 33ff 	mov.w	r3, #4294967295
 800e228:	e013      	b.n	800e252 <atanf+0x86>
 800e22a:	f000 f8a3 	bl	800e374 <fabsf>
 800e22e:	4b42      	ldr	r3, [pc, #264]	; (800e338 <atanf+0x16c>)
 800e230:	429c      	cmp	r4, r3
 800e232:	dc4f      	bgt.n	800e2d4 <atanf+0x108>
 800e234:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800e238:	429c      	cmp	r4, r3
 800e23a:	dc41      	bgt.n	800e2c0 <atanf+0xf4>
 800e23c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800e240:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e244:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e248:	2300      	movs	r3, #0
 800e24a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e24e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e252:	1c5a      	adds	r2, r3, #1
 800e254:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800e258:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800e33c <atanf+0x170>
 800e25c:	eddf 5a38 	vldr	s11, [pc, #224]	; 800e340 <atanf+0x174>
 800e260:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800e344 <atanf+0x178>
 800e264:	ee66 6a06 	vmul.f32	s13, s12, s12
 800e268:	eee6 5a87 	vfma.f32	s11, s13, s14
 800e26c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800e348 <atanf+0x17c>
 800e270:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e274:	eddf 5a35 	vldr	s11, [pc, #212]	; 800e34c <atanf+0x180>
 800e278:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e27c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800e350 <atanf+0x184>
 800e280:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e284:	eddf 5a33 	vldr	s11, [pc, #204]	; 800e354 <atanf+0x188>
 800e288:	eee7 5a26 	vfma.f32	s11, s14, s13
 800e28c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800e358 <atanf+0x18c>
 800e290:	eea6 5a87 	vfma.f32	s10, s13, s14
 800e294:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800e35c <atanf+0x190>
 800e298:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e29c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800e360 <atanf+0x194>
 800e2a0:	eea7 5a26 	vfma.f32	s10, s14, s13
 800e2a4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800e364 <atanf+0x198>
 800e2a8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800e2ac:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e2b0:	eea5 7a86 	vfma.f32	s14, s11, s12
 800e2b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e2b8:	d121      	bne.n	800e2fe <atanf+0x132>
 800e2ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e2be:	e794      	b.n	800e1ea <atanf+0x1e>
 800e2c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e2c4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e2c8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e2d2:	e7be      	b.n	800e252 <atanf+0x86>
 800e2d4:	4b24      	ldr	r3, [pc, #144]	; (800e368 <atanf+0x19c>)
 800e2d6:	429c      	cmp	r4, r3
 800e2d8:	dc0b      	bgt.n	800e2f2 <atanf+0x126>
 800e2da:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800e2de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e2e2:	eea0 7a27 	vfma.f32	s14, s0, s15
 800e2e6:	2302      	movs	r3, #2
 800e2e8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e2ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e2f0:	e7af      	b.n	800e252 <atanf+0x86>
 800e2f2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800e2f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e2fa:	2303      	movs	r3, #3
 800e2fc:	e7a9      	b.n	800e252 <atanf+0x86>
 800e2fe:	4a1b      	ldr	r2, [pc, #108]	; (800e36c <atanf+0x1a0>)
 800e300:	491b      	ldr	r1, [pc, #108]	; (800e370 <atanf+0x1a4>)
 800e302:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e306:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e30a:	ed93 0a00 	vldr	s0, [r3]
 800e30e:	ee37 7a40 	vsub.f32	s14, s14, s0
 800e312:	ed92 0a00 	vldr	s0, [r2]
 800e316:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e31a:	2d00      	cmp	r5, #0
 800e31c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e320:	bfb8      	it	lt
 800e322:	eef1 7a67 	vneglt.f32	s15, s15
 800e326:	e760      	b.n	800e1ea <atanf+0x1e>
 800e328:	3fc90fdb 	.word	0x3fc90fdb
 800e32c:	bfc90fdb 	.word	0xbfc90fdb
 800e330:	3edfffff 	.word	0x3edfffff
 800e334:	7149f2ca 	.word	0x7149f2ca
 800e338:	3f97ffff 	.word	0x3f97ffff
 800e33c:	3c8569d7 	.word	0x3c8569d7
 800e340:	3d4bda59 	.word	0x3d4bda59
 800e344:	bd6ef16b 	.word	0xbd6ef16b
 800e348:	3d886b35 	.word	0x3d886b35
 800e34c:	3dba2e6e 	.word	0x3dba2e6e
 800e350:	3e124925 	.word	0x3e124925
 800e354:	3eaaaaab 	.word	0x3eaaaaab
 800e358:	bd15a221 	.word	0xbd15a221
 800e35c:	bd9d8795 	.word	0xbd9d8795
 800e360:	bde38e38 	.word	0xbde38e38
 800e364:	be4ccccd 	.word	0xbe4ccccd
 800e368:	401bffff 	.word	0x401bffff
 800e36c:	0800e814 	.word	0x0800e814
 800e370:	0800e824 	.word	0x0800e824

0800e374 <fabsf>:
 800e374:	ee10 3a10 	vmov	r3, s0
 800e378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e37c:	ee00 3a10 	vmov	s0, r3
 800e380:	4770      	bx	lr
	...

0800e384 <nanf>:
 800e384:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e38c <nanf+0x8>
 800e388:	4770      	bx	lr
 800e38a:	bf00      	nop
 800e38c:	7fc00000 	.word	0x7fc00000

0800e390 <_init>:
 800e390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e392:	bf00      	nop
 800e394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e396:	bc08      	pop	{r3}
 800e398:	469e      	mov	lr, r3
 800e39a:	4770      	bx	lr

0800e39c <_fini>:
 800e39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e39e:	bf00      	nop
 800e3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3a2:	bc08      	pop	{r3}
 800e3a4:	469e      	mov	lr, r3
 800e3a6:	4770      	bx	lr
